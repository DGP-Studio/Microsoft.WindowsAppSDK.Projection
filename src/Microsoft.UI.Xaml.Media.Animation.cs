//------------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by cswinrt.exe version 2.2.0.241111.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq.Expressions;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using WinRT;
using WinRT.Interop;


#pragma warning disable 0169 // warning CS0169: The field '...' is never used
#pragma warning disable 0649 // warning CS0169: Field '...' is never assigned to
#pragma warning disable CA2207, CA1063, CA1033, CA1001, CA2213

namespace Microsoft.UI.Xaml.Media.Animation
{
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.AddDeleteThemeTransition))]
    [global::ABI.Microsoft.UI.Xaml.Media.Animation.AddDeleteThemeTransitionRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IAddDeleteThemeTransition))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class AddDeleteThemeTransition : Transition, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<AddDeleteThemeTransition>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_IAddDeleteThemeTransition => _inner;


        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_AddDeleteThemeTransition;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_AddDeleteThemeTransition
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_AddDeleteThemeTransition;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_AddDeleteThemeTransition = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.AddDeleteThemeTransition");
                }
            }
        }

        public AddDeleteThemeTransition() :base(global::WinRT.DerivedComposed.Instance)
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Xaml_Media_Animation_AddDeleteThemeTransition, global::ABI.Microsoft.UI.Xaml.Media.Animation.IAddDeleteThemeTransitionMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static new AddDeleteThemeTransition FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<AddDeleteThemeTransition>.FromAbi(thisPtr);
        }

        internal AddDeleteThemeTransition(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Media.Animation.IAddDeleteThemeTransitionMethods.IID);

        }


        public static bool operator ==(AddDeleteThemeTransition x, AddDeleteThemeTransition y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(AddDeleteThemeTransition x, AddDeleteThemeTransition y) => !(x == y);
        public bool Equals(AddDeleteThemeTransition other) => this == other;
        public override bool Equals(object obj) => obj is AddDeleteThemeTransition that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.BackEase))]
    [global::ABI.Microsoft.UI.Xaml.Media.Animation.BackEaseRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IBackEase))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class BackEase : EasingFunctionBase, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<BackEase>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_IBackEase => _inner;


        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_BackEase;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_BackEase
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_BackEase;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_BackEase = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.BackEase");
                }
            }
        }

        public BackEase() :base(global::WinRT.DerivedComposed.Instance)
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Xaml_Media_Animation_BackEase, global::ABI.Microsoft.UI.Xaml.Media.Animation.IBackEaseMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static new I As<I>() => ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.BackEase").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IBackEaseStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_IBackEaseStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IBackEaseStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IBackEaseStatics = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.BackEase", global::ABI.Microsoft.UI.Xaml.Media.Animation.IBackEaseStaticsMethods.IID);
                }
            }
        }

        public static global::Microsoft.UI.Xaml.DependencyProperty AmplitudeProperty => global::ABI.Microsoft.UI.Xaml.Media.Animation.IBackEaseStaticsMethods.get_AmplitudeProperty(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IBackEaseStatics);

        public static new BackEase FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<BackEase>.FromAbi(thisPtr);
        }

        internal BackEase(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Media.Animation.IBackEaseMethods.IID);

        }


        public static bool operator ==(BackEase x, BackEase y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(BackEase x, BackEase y) => !(x == y);
        public bool Equals(BackEase other) => this == other;
        public override bool Equals(object obj) => obj is BackEase that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public double Amplitude
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Animation.IBackEaseMethods.get_Amplitude(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IBackEase);
            set => global::ABI.Microsoft.UI.Xaml.Media.Animation.IBackEaseMethods.set_Amplitude(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IBackEase, value);
        }

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.BasicConnectedAnimationConfiguration))]
    [global::ABI.Microsoft.UI.Xaml.Media.Animation.BasicConnectedAnimationConfigurationRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IBasicConnectedAnimationConfiguration))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public class BasicConnectedAnimationConfiguration : ConnectedAnimationConfiguration, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<BasicConnectedAnimationConfiguration>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IBasicConnectedAnimationConfiguration;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_Media_Animation_IBasicConnectedAnimationConfiguration()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IBasicConnectedAnimationConfiguration, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.Media.Animation.IBasicConnectedAnimationConfigurationMethods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IBasicConnectedAnimationConfiguration;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_IBasicConnectedAnimationConfiguration => ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IBasicConnectedAnimationConfiguration ?? Make___objRef_global__Microsoft_UI_Xaml_Media_Animation_IBasicConnectedAnimationConfiguration();



        private static class _IBasicConnectedAnimationConfigurationFactoryMethods
        {
            public static unsafe IntPtr CreateInstance(IObjectReference _obj, object baseInterface, out IntPtr innerInterface)
            {
                var ThisPtr = _obj.ThisPtr;

                ObjectReferenceValue __baseInterface = default;
                IntPtr __innerInterface = default;
                IntPtr __retval = default;
                try
                {
                    __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                    global::System.GC.KeepAlive(_obj);
                    innerInterface = __innerInterface;
                    return __retval;
                }
                finally
                {
                    MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                }
            }
        }

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IBasicConnectedAnimationConfigurationFactory;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_IBasicConnectedAnimationConfigurationFactory
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IBasicConnectedAnimationConfigurationFactory;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IBasicConnectedAnimationConfigurationFactory = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.BasicConnectedAnimationConfiguration", global::ABI.Microsoft.UI.Xaml.Media.Animation.IBasicConnectedAnimationConfigurationFactoryMethods.IID);
                }
            }
        }

        public BasicConnectedAnimationConfiguration():base(global::WinRT.DerivedComposed.Instance)
        {
            bool isAggregation = this.GetType() != typeof(BasicConnectedAnimationConfiguration);
            object baseInspectable = isAggregation ? this : null;
            IntPtr composed = _IBasicConnectedAnimationConfigurationFactoryMethods.CreateInstance(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IBasicConnectedAnimationConfigurationFactory,  baseInspectable, out IntPtr inner);
            try
            {
                ComWrappersHelper.Init(isAggregation, this, composed, inner, global::ABI.Microsoft.UI.Xaml.Media.Animation.IBasicConnectedAnimationConfigurationMethods.IID, out _inner);

            }
            finally
            {
                Marshal.Release(inner);   
            }
        }

        public static new BasicConnectedAnimationConfiguration FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<BasicConnectedAnimationConfiguration>.FromAbi(thisPtr);
        }

        protected internal BasicConnectedAnimationConfiguration(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Media.Animation.IBasicConnectedAnimationConfigurationMethods.IID);

        }


        public static bool operator ==(BasicConnectedAnimationConfiguration x, BasicConnectedAnimationConfiguration y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(BasicConnectedAnimationConfiguration x, BasicConnectedAnimationConfiguration y) => !(x == y);
        public bool Equals(BasicConnectedAnimationConfiguration other) => this == other;
        public override bool Equals(object obj) => obj is BasicConnectedAnimationConfiguration that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        protected BasicConnectedAnimationConfiguration(global::WinRT.DerivedComposed _):base(_)
        {

        }
        bool IWinRTObject.HasUnwrappableNativeObject => this.GetType() == typeof(BasicConnectedAnimationConfiguration);
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.BeginStoryboard))]
    [global::ABI.Microsoft.UI.Xaml.Media.Animation.BeginStoryboardRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IBeginStoryboard))]
    [global::Microsoft.UI.Xaml.Markup.ContentProperty(Name = @"Storyboard")]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class BeginStoryboard : global::Microsoft.UI.Xaml.TriggerAction, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<BeginStoryboard>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_IBeginStoryboard => _inner;


        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_BeginStoryboard;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_BeginStoryboard
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_BeginStoryboard;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_BeginStoryboard = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.BeginStoryboard");
                }
            }
        }

        public BeginStoryboard() :base(global::WinRT.DerivedComposed.Instance)
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Xaml_Media_Animation_BeginStoryboard, global::ABI.Microsoft.UI.Xaml.Media.Animation.IBeginStoryboardMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static I As<I>() => ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.BeginStoryboard").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IBeginStoryboardStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_IBeginStoryboardStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IBeginStoryboardStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IBeginStoryboardStatics = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.BeginStoryboard", global::ABI.Microsoft.UI.Xaml.Media.Animation.IBeginStoryboardStaticsMethods.IID);
                }
            }
        }

        public static global::Microsoft.UI.Xaml.DependencyProperty StoryboardProperty => global::ABI.Microsoft.UI.Xaml.Media.Animation.IBeginStoryboardStaticsMethods.get_StoryboardProperty(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IBeginStoryboardStatics);

        public static new BeginStoryboard FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<BeginStoryboard>.FromAbi(thisPtr);
        }

        internal BeginStoryboard(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Media.Animation.IBeginStoryboardMethods.IID);

        }


        public static bool operator ==(BeginStoryboard x, BeginStoryboard y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(BeginStoryboard x, BeginStoryboard y) => !(x == y);
        public bool Equals(BeginStoryboard other) => this == other;
        public override bool Equals(object obj) => obj is BeginStoryboard that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public Storyboard Storyboard
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Animation.IBeginStoryboardMethods.get_Storyboard(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IBeginStoryboard);
            set => global::ABI.Microsoft.UI.Xaml.Media.Animation.IBeginStoryboardMethods.set_Storyboard(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IBeginStoryboard, value);
        }

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.BounceEase))]
    [global::ABI.Microsoft.UI.Xaml.Media.Animation.BounceEaseRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IBounceEase))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class BounceEase : EasingFunctionBase, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<BounceEase>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_IBounceEase => _inner;


        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_BounceEase;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_BounceEase
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_BounceEase;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_BounceEase = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.BounceEase");
                }
            }
        }

        public BounceEase() :base(global::WinRT.DerivedComposed.Instance)
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Xaml_Media_Animation_BounceEase, global::ABI.Microsoft.UI.Xaml.Media.Animation.IBounceEaseMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static new I As<I>() => ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.BounceEase").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IBounceEaseStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_IBounceEaseStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IBounceEaseStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IBounceEaseStatics = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.BounceEase", global::ABI.Microsoft.UI.Xaml.Media.Animation.IBounceEaseStaticsMethods.IID);
                }
            }
        }

        public static global::Microsoft.UI.Xaml.DependencyProperty BouncesProperty => global::ABI.Microsoft.UI.Xaml.Media.Animation.IBounceEaseStaticsMethods.get_BouncesProperty(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IBounceEaseStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty BouncinessProperty => global::ABI.Microsoft.UI.Xaml.Media.Animation.IBounceEaseStaticsMethods.get_BouncinessProperty(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IBounceEaseStatics);

        public static new BounceEase FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<BounceEase>.FromAbi(thisPtr);
        }

        internal BounceEase(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Media.Animation.IBounceEaseMethods.IID);

        }


        public static bool operator ==(BounceEase x, BounceEase y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(BounceEase x, BounceEase y) => !(x == y);
        public bool Equals(BounceEase other) => this == other;
        public override bool Equals(object obj) => obj is BounceEase that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public int Bounces
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Animation.IBounceEaseMethods.get_Bounces(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IBounceEase);
            set => global::ABI.Microsoft.UI.Xaml.Media.Animation.IBounceEaseMethods.set_Bounces(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IBounceEase, value);
        }

        public double Bounciness
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Animation.IBounceEaseMethods.get_Bounciness(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IBounceEase);
            set => global::ABI.Microsoft.UI.Xaml.Media.Animation.IBounceEaseMethods.set_Bounciness(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IBounceEase, value);
        }

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.CircleEase))]
    [global::ABI.Microsoft.UI.Xaml.Media.Animation.CircleEaseRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ICircleEase))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class CircleEase : EasingFunctionBase, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<CircleEase>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_ICircleEase => _inner;


        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_CircleEase;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_CircleEase
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_CircleEase;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_CircleEase = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.CircleEase");
                }
            }
        }

        public CircleEase() :base(global::WinRT.DerivedComposed.Instance)
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Xaml_Media_Animation_CircleEase, global::ABI.Microsoft.UI.Xaml.Media.Animation.ICircleEaseMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static new CircleEase FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<CircleEase>.FromAbi(thisPtr);
        }

        internal CircleEase(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Media.Animation.ICircleEaseMethods.IID);

        }


        public static bool operator ==(CircleEase x, CircleEase y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(CircleEase x, CircleEase y) => !(x == y);
        public bool Equals(CircleEase other) => this == other;
        public override bool Equals(object obj) => obj is CircleEase that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<ClockState>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public enum ClockState : int
    {
        Active = unchecked((int)0),
        Filling = unchecked((int)0x1),
        Stopped = unchecked((int)0x2),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.ColorAnimation))]
    [global::ABI.Microsoft.UI.Xaml.Media.Animation.ColorAnimationRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IColorAnimation))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class ColorAnimation : Timeline, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<ColorAnimation>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_IColorAnimation => _inner;


        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_ColorAnimation;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_ColorAnimation
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_ColorAnimation;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_ColorAnimation = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.ColorAnimation");
                }
            }
        }

        public ColorAnimation() :base(global::WinRT.DerivedComposed.Instance)
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ColorAnimation, global::ABI.Microsoft.UI.Xaml.Media.Animation.IColorAnimationMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static new I As<I>() => ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.ColorAnimation").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IColorAnimationStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_IColorAnimationStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IColorAnimationStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IColorAnimationStatics = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.ColorAnimation", global::ABI.Microsoft.UI.Xaml.Media.Animation.IColorAnimationStaticsMethods.IID);
                }
            }
        }

        public static global::Microsoft.UI.Xaml.DependencyProperty ByProperty => global::ABI.Microsoft.UI.Xaml.Media.Animation.IColorAnimationStaticsMethods.get_ByProperty(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IColorAnimationStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty EasingFunctionProperty => global::ABI.Microsoft.UI.Xaml.Media.Animation.IColorAnimationStaticsMethods.get_EasingFunctionProperty(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IColorAnimationStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty EnableDependentAnimationProperty => global::ABI.Microsoft.UI.Xaml.Media.Animation.IColorAnimationStaticsMethods.get_EnableDependentAnimationProperty(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IColorAnimationStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty FromProperty => global::ABI.Microsoft.UI.Xaml.Media.Animation.IColorAnimationStaticsMethods.get_FromProperty(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IColorAnimationStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty ToProperty => global::ABI.Microsoft.UI.Xaml.Media.Animation.IColorAnimationStaticsMethods.get_ToProperty(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IColorAnimationStatics);

        public static new ColorAnimation FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<ColorAnimation>.FromAbi(thisPtr);
        }

        internal ColorAnimation(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Media.Animation.IColorAnimationMethods.IID);

        }


        public static bool operator ==(ColorAnimation x, ColorAnimation y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(ColorAnimation x, ColorAnimation y) => !(x == y);
        public bool Equals(ColorAnimation other) => this == other;
        public override bool Equals(object obj) => obj is ColorAnimation that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public global::System.Nullable<global::Windows.UI.Color> By
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Animation.IColorAnimationMethods.get_By(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IColorAnimation);
            set => global::ABI.Microsoft.UI.Xaml.Media.Animation.IColorAnimationMethods.set_By(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IColorAnimation, value);
        }

        public EasingFunctionBase EasingFunction
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Animation.IColorAnimationMethods.get_EasingFunction(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IColorAnimation);
            set => global::ABI.Microsoft.UI.Xaml.Media.Animation.IColorAnimationMethods.set_EasingFunction(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IColorAnimation, value);
        }

        public bool EnableDependentAnimation
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Animation.IColorAnimationMethods.get_EnableDependentAnimation(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IColorAnimation);
            set => global::ABI.Microsoft.UI.Xaml.Media.Animation.IColorAnimationMethods.set_EnableDependentAnimation(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IColorAnimation, value);
        }

        public global::System.Nullable<global::Windows.UI.Color> From
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Animation.IColorAnimationMethods.get_From(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IColorAnimation);
            set => global::ABI.Microsoft.UI.Xaml.Media.Animation.IColorAnimationMethods.set_From(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IColorAnimation, value);
        }

        public global::System.Nullable<global::Windows.UI.Color> To
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Animation.IColorAnimationMethods.get_To(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IColorAnimation);
            set => global::ABI.Microsoft.UI.Xaml.Media.Animation.IColorAnimationMethods.set_To(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IColorAnimation, value);
        }

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.ColorAnimationUsingKeyFrames))]
    [global::ABI.Microsoft.UI.Xaml.Media.Animation.ColorAnimationUsingKeyFramesRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IColorAnimationUsingKeyFrames))]
    [global::Microsoft.UI.Xaml.Markup.ContentProperty(Name = @"KeyFrames")]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class ColorAnimationUsingKeyFrames : Timeline, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<ColorAnimationUsingKeyFrames>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_IColorAnimationUsingKeyFrames => _inner;


        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_ColorAnimationUsingKeyFrames;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_ColorAnimationUsingKeyFrames
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_ColorAnimationUsingKeyFrames;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_ColorAnimationUsingKeyFrames = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.ColorAnimationUsingKeyFrames");
                }
            }
        }

        public ColorAnimationUsingKeyFrames() :base(global::WinRT.DerivedComposed.Instance)
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ColorAnimationUsingKeyFrames, global::ABI.Microsoft.UI.Xaml.Media.Animation.IColorAnimationUsingKeyFramesMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static new I As<I>() => ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.ColorAnimationUsingKeyFrames").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IColorAnimationUsingKeyFramesStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_IColorAnimationUsingKeyFramesStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IColorAnimationUsingKeyFramesStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IColorAnimationUsingKeyFramesStatics = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.ColorAnimationUsingKeyFrames", global::ABI.Microsoft.UI.Xaml.Media.Animation.IColorAnimationUsingKeyFramesStaticsMethods.IID);
                }
            }
        }

        public static global::Microsoft.UI.Xaml.DependencyProperty EnableDependentAnimationProperty => global::ABI.Microsoft.UI.Xaml.Media.Animation.IColorAnimationUsingKeyFramesStaticsMethods.get_EnableDependentAnimationProperty(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IColorAnimationUsingKeyFramesStatics);

        public static new ColorAnimationUsingKeyFrames FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<ColorAnimationUsingKeyFrames>.FromAbi(thisPtr);
        }

        internal ColorAnimationUsingKeyFrames(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Media.Animation.IColorAnimationUsingKeyFramesMethods.IID);

        }


        public static bool operator ==(ColorAnimationUsingKeyFrames x, ColorAnimationUsingKeyFrames y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(ColorAnimationUsingKeyFrames x, ColorAnimationUsingKeyFrames y) => !(x == y);
        public bool Equals(ColorAnimationUsingKeyFrames other) => this == other;
        public override bool Equals(object obj) => obj is ColorAnimationUsingKeyFrames that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public bool EnableDependentAnimation
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Animation.IColorAnimationUsingKeyFramesMethods.get_EnableDependentAnimation(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IColorAnimationUsingKeyFrames);
            set => global::ABI.Microsoft.UI.Xaml.Media.Animation.IColorAnimationUsingKeyFramesMethods.set_EnableDependentAnimation(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IColorAnimationUsingKeyFrames, value);
        }

        public ColorKeyFrameCollection KeyFrames => global::ABI.Microsoft.UI.Xaml.Media.Animation.IColorAnimationUsingKeyFramesMethods.get_KeyFrames(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IColorAnimationUsingKeyFrames);

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.ColorKeyFrame))]
    [global::ABI.Microsoft.UI.Xaml.Media.Animation.ColorKeyFrameRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IColorKeyFrame))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public class ColorKeyFrame : global::Microsoft.UI.Xaml.DependencyObject, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<ColorKeyFrame>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IColorKeyFrame;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_Media_Animation_IColorKeyFrame()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IColorKeyFrame, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.Media.Animation.IColorKeyFrameMethods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IColorKeyFrame;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_IColorKeyFrame => ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IColorKeyFrame ?? Make___objRef_global__Microsoft_UI_Xaml_Media_Animation_IColorKeyFrame();



        private static class _IColorKeyFrameFactoryMethods
        {
            public static unsafe IntPtr CreateInstance(IObjectReference _obj, object baseInterface, out IntPtr innerInterface)
            {
                var ThisPtr = _obj.ThisPtr;

                ObjectReferenceValue __baseInterface = default;
                IntPtr __innerInterface = default;
                IntPtr __retval = default;
                try
                {
                    __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                    global::System.GC.KeepAlive(_obj);
                    innerInterface = __innerInterface;
                    return __retval;
                }
                finally
                {
                    MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                }
            }
        }

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IColorKeyFrameFactory;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_IColorKeyFrameFactory
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IColorKeyFrameFactory;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IColorKeyFrameFactory = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.ColorKeyFrame", global::ABI.Microsoft.UI.Xaml.Media.Animation.IColorKeyFrameFactoryMethods.IID);
                }
            }
        }

        protected ColorKeyFrame():base(global::WinRT.DerivedComposed.Instance)
        {
            bool isAggregation = this.GetType() != typeof(ColorKeyFrame);
            object baseInspectable = isAggregation ? this : null;
            IntPtr composed = _IColorKeyFrameFactoryMethods.CreateInstance(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IColorKeyFrameFactory,  baseInspectable, out IntPtr inner);
            try
            {
                ComWrappersHelper.Init(isAggregation, this, composed, inner, global::ABI.Microsoft.UI.Xaml.Media.Animation.IColorKeyFrameMethods.IID, out _inner);

            }
            finally
            {
                Marshal.Release(inner);   
            }
        }

        public static I As<I>() => ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.ColorKeyFrame").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IColorKeyFrameStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_IColorKeyFrameStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IColorKeyFrameStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IColorKeyFrameStatics = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.ColorKeyFrame", global::ABI.Microsoft.UI.Xaml.Media.Animation.IColorKeyFrameStaticsMethods.IID);
                }
            }
        }

        public static global::Microsoft.UI.Xaml.DependencyProperty KeyTimeProperty => global::ABI.Microsoft.UI.Xaml.Media.Animation.IColorKeyFrameStaticsMethods.get_KeyTimeProperty(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IColorKeyFrameStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty ValueProperty => global::ABI.Microsoft.UI.Xaml.Media.Animation.IColorKeyFrameStaticsMethods.get_ValueProperty(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IColorKeyFrameStatics);

        public static new ColorKeyFrame FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<ColorKeyFrame>.FromAbi(thisPtr);
        }

        protected internal ColorKeyFrame(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Media.Animation.IColorKeyFrameMethods.IID);

        }


        public static bool operator ==(ColorKeyFrame x, ColorKeyFrame y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(ColorKeyFrame x, ColorKeyFrame y) => !(x == y);
        public bool Equals(ColorKeyFrame other) => this == other;
        public override bool Equals(object obj) => obj is ColorKeyFrame that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        protected ColorKeyFrame(global::WinRT.DerivedComposed _):base(_)
        {

        }
        bool IWinRTObject.HasUnwrappableNativeObject => this.GetType() == typeof(ColorKeyFrame);
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public KeyTime KeyTime
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Animation.IColorKeyFrameMethods.get_KeyTime(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IColorKeyFrame);
            set => global::ABI.Microsoft.UI.Xaml.Media.Animation.IColorKeyFrameMethods.set_KeyTime(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IColorKeyFrame, value);
        }

        public global::Windows.UI.Color Value
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Animation.IColorKeyFrameMethods.get_Value(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IColorKeyFrame);
            set => global::ABI.Microsoft.UI.Xaml.Media.Animation.IColorKeyFrameMethods.set_Value(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IColorKeyFrame, value);
        }

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.ColorKeyFrameCollection))]
    [global::ABI.Microsoft.UI.Xaml.Media.Animation.ColorKeyFrameCollectionRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(global::System.Collections.Generic.IList<ColorKeyFrame>))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class ColorKeyFrameCollection : global::System.Collections.Generic.IList<ColorKeyFrame>, global::System.Collections.Generic.IEnumerable<ColorKeyFrame>, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<ColorKeyFrameCollection>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__System_Collections_Generic_IList_ColorKeyFrame_;
        private IObjectReference Make___objRef_global__System_Collections_Generic_IList_ColorKeyFrame_()
        {
            _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IVector_1_Microsoft_UI_Xaml_Media_Animation_ColorKeyFrame.EnsureInitialized();
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__System_Collections_Generic_IList_ColorKeyFrame_, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.System.Collections.Generic.IListMethods<ColorKeyFrame>.IID), null);
            return ___objRef_global__System_Collections_Generic_IList_ColorKeyFrame_;
        }
        private IObjectReference _objRef_global__System_Collections_Generic_IList_ColorKeyFrame_ => ___objRef_global__System_Collections_Generic_IList_ColorKeyFrame_ ?? Make___objRef_global__System_Collections_Generic_IList_ColorKeyFrame_();

        private volatile IObjectReference ___objRef_global__System_Collections_Generic_IEnumerable_ColorKeyFrame_;
        private IObjectReference Make___objRef_global__System_Collections_Generic_IEnumerable_ColorKeyFrame_()
        {
            _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IIterable_1_Microsoft_UI_Xaml_Media_Animation_ColorKeyFrame.EnsureInitialized();
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__System_Collections_Generic_IEnumerable_ColorKeyFrame_, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.System.Collections.Generic.IEnumerableMethods<ColorKeyFrame>.IID), null);
            return ___objRef_global__System_Collections_Generic_IEnumerable_ColorKeyFrame_;
        }
        private IObjectReference _objRef_global__System_Collections_Generic_IEnumerable_ColorKeyFrame_ => ___objRef_global__System_Collections_Generic_IEnumerable_ColorKeyFrame_ ?? Make___objRef_global__System_Collections_Generic_IEnumerable_ColorKeyFrame_();



        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_ColorKeyFrameCollection;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_ColorKeyFrameCollection
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_ColorKeyFrameCollection;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_ColorKeyFrameCollection = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.ColorKeyFrameCollection");
                }
            }
        }

        public ColorKeyFrameCollection() 
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ColorKeyFrameCollection, global::ABI.System.Collections.Generic.IListMethods<ColorKeyFrame>.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static ColorKeyFrameCollection FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<ColorKeyFrameCollection>.FromAbi(thisPtr);
        }

        internal ColorKeyFrameCollection(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.System.Collections.Generic.IListMethods<ColorKeyFrame>.IID);

        }


        public static bool operator ==(ColorKeyFrameCollection x, ColorKeyFrameCollection y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(ColorKeyFrameCollection x, ColorKeyFrameCollection y) => !(x == y);
        public bool Equals(ColorKeyFrameCollection other) => this == other;
        public override bool Equals(object obj) => obj is ColorKeyFrameCollection that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public int Count => global::ABI.System.Collections.Generic.IListMethods<ColorKeyFrame>.get_Count(_objRef_global__System_Collections_Generic_IList_ColorKeyFrame_);
        public bool IsReadOnly => global::ABI.System.Collections.Generic.IListMethods<ColorKeyFrame>.get_IsReadOnly(_objRef_global__System_Collections_Generic_IList_ColorKeyFrame_);
        [global::System.Runtime.CompilerServices.IndexerName("ListItem")]
        public ColorKeyFrame this[int index] 
        {
            get => global::ABI.System.Collections.Generic.IListMethods<ColorKeyFrame>.Indexer_Get(_objRef_global__System_Collections_Generic_IList_ColorKeyFrame_, index);
            set => global::ABI.System.Collections.Generic.IListMethods<ColorKeyFrame>.Indexer_Set(_objRef_global__System_Collections_Generic_IList_ColorKeyFrame_, index, value);
        }
        public int IndexOf(ColorKeyFrame item) => global::ABI.System.Collections.Generic.IListMethods<ColorKeyFrame>.IndexOf(_objRef_global__System_Collections_Generic_IList_ColorKeyFrame_, item);
        public void Insert(int index, ColorKeyFrame item) => global::ABI.System.Collections.Generic.IListMethods<ColorKeyFrame>.Insert(_objRef_global__System_Collections_Generic_IList_ColorKeyFrame_, index, item);
        public void RemoveAt(int index) => global::ABI.System.Collections.Generic.IListMethods<ColorKeyFrame>.RemoveAt(_objRef_global__System_Collections_Generic_IList_ColorKeyFrame_, index);
        public void Add(ColorKeyFrame item) => global::ABI.System.Collections.Generic.IListMethods<ColorKeyFrame>.Add(_objRef_global__System_Collections_Generic_IList_ColorKeyFrame_, item);
        public void Clear() => global::ABI.System.Collections.Generic.IListMethods<ColorKeyFrame>.Clear(_objRef_global__System_Collections_Generic_IList_ColorKeyFrame_);
        public bool Contains(ColorKeyFrame item) => global::ABI.System.Collections.Generic.IListMethods<ColorKeyFrame>.Contains(_objRef_global__System_Collections_Generic_IList_ColorKeyFrame_, item);
        public void CopyTo(ColorKeyFrame[] array, int arrayIndex) => global::ABI.System.Collections.Generic.IListMethods<ColorKeyFrame>.CopyTo(_objRef_global__System_Collections_Generic_IList_ColorKeyFrame_, array, arrayIndex);
        public bool Remove(ColorKeyFrame item) => global::ABI.System.Collections.Generic.IListMethods<ColorKeyFrame>.Remove(_objRef_global__System_Collections_Generic_IList_ColorKeyFrame_, item);

        public IEnumerator<ColorKeyFrame> GetEnumerator() => global::ABI.System.Collections.Generic.IEnumerableMethods<ColorKeyFrame>.GetEnumerator(_objRef_global__System_Collections_Generic_IEnumerable_ColorKeyFrame_);

        IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.CommonNavigationTransitionInfo))]
    [global::ABI.Microsoft.UI.Xaml.Media.Animation.CommonNavigationTransitionInfoRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ICommonNavigationTransitionInfo))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class CommonNavigationTransitionInfo : NavigationTransitionInfo, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<CommonNavigationTransitionInfo>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_ICommonNavigationTransitionInfo => _inner;


        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_CommonNavigationTransitionInfo;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_CommonNavigationTransitionInfo
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_CommonNavigationTransitionInfo;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_CommonNavigationTransitionInfo = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.CommonNavigationTransitionInfo");
                }
            }
        }

        public CommonNavigationTransitionInfo() :base(global::WinRT.DerivedComposed.Instance)
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Xaml_Media_Animation_CommonNavigationTransitionInfo, global::ABI.Microsoft.UI.Xaml.Media.Animation.ICommonNavigationTransitionInfoMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static I As<I>() => ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.CommonNavigationTransitionInfo").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_ICommonNavigationTransitionInfoStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_ICommonNavigationTransitionInfoStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_ICommonNavigationTransitionInfoStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_ICommonNavigationTransitionInfoStatics = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.CommonNavigationTransitionInfo", global::ABI.Microsoft.UI.Xaml.Media.Animation.ICommonNavigationTransitionInfoStaticsMethods.IID);
                }
            }
        }

        public static bool GetIsStaggerElement(global::Microsoft.UI.Xaml.UIElement element) => global::ABI.Microsoft.UI.Xaml.Media.Animation.ICommonNavigationTransitionInfoStaticsMethods.GetIsStaggerElement(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ICommonNavigationTransitionInfoStatics, element);

        public static void SetIsStaggerElement(global::Microsoft.UI.Xaml.UIElement element, bool value) => global::ABI.Microsoft.UI.Xaml.Media.Animation.ICommonNavigationTransitionInfoStaticsMethods.SetIsStaggerElement(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ICommonNavigationTransitionInfoStatics, element, value);

        public static global::Microsoft.UI.Xaml.DependencyProperty IsStaggerElementProperty => global::ABI.Microsoft.UI.Xaml.Media.Animation.ICommonNavigationTransitionInfoStaticsMethods.get_IsStaggerElementProperty(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ICommonNavigationTransitionInfoStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty IsStaggeringEnabledProperty => global::ABI.Microsoft.UI.Xaml.Media.Animation.ICommonNavigationTransitionInfoStaticsMethods.get_IsStaggeringEnabledProperty(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ICommonNavigationTransitionInfoStatics);

        public static new CommonNavigationTransitionInfo FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<CommonNavigationTransitionInfo>.FromAbi(thisPtr);
        }

        internal CommonNavigationTransitionInfo(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Media.Animation.ICommonNavigationTransitionInfoMethods.IID);

        }


        public static bool operator ==(CommonNavigationTransitionInfo x, CommonNavigationTransitionInfo y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(CommonNavigationTransitionInfo x, CommonNavigationTransitionInfo y) => !(x == y);
        public bool Equals(CommonNavigationTransitionInfo other) => this == other;
        public override bool Equals(object obj) => obj is CommonNavigationTransitionInfo that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public bool IsStaggeringEnabled
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Animation.ICommonNavigationTransitionInfoMethods.get_IsStaggeringEnabled(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ICommonNavigationTransitionInfo);
            set => global::ABI.Microsoft.UI.Xaml.Media.Animation.ICommonNavigationTransitionInfoMethods.set_IsStaggeringEnabled(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ICommonNavigationTransitionInfo, value);
        }

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][global::System.AttributeUsage(global::System.AttributeTargets.Property, AllowMultiple = false)]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class ConditionallyIndependentlyAnimatableAttribute: Attribute
    {
        public ConditionallyIndependentlyAnimatableAttribute(){}
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.ConnectedAnimation))]
    [global::ABI.Microsoft.UI.Xaml.Media.Animation.ConnectedAnimationRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IConnectedAnimation))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class ConnectedAnimation : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<ConnectedAnimation>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_IConnectedAnimation => _inner;


        public static ConnectedAnimation FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<ConnectedAnimation>.FromAbi(thisPtr);
        }

        internal ConnectedAnimation(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Media.Animation.IConnectedAnimationMethods.IID);

        }


        public static bool operator ==(ConnectedAnimation x, ConnectedAnimation y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(ConnectedAnimation x, ConnectedAnimation y) => !(x == y);
        public bool Equals(ConnectedAnimation other) => this == other;
        public override bool Equals(object obj) => obj is ConnectedAnimation that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public bool TryStart(global::Microsoft.UI.Xaml.UIElement destination) => global::ABI.Microsoft.UI.Xaml.Media.Animation.IConnectedAnimationMethods.TryStart(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IConnectedAnimation, destination);

        public bool TryStart(global::Microsoft.UI.Xaml.UIElement destination, global::System.Collections.Generic.IEnumerable<global::Microsoft.UI.Xaml.UIElement> coordinatedElements) => global::ABI.Microsoft.UI.Xaml.Media.Animation.IConnectedAnimationMethods.TryStart(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IConnectedAnimation, destination, coordinatedElements);

        public void Cancel() => global::ABI.Microsoft.UI.Xaml.Media.Animation.IConnectedAnimationMethods.Cancel(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IConnectedAnimation);

        public void SetAnimationComponent(ConnectedAnimationComponent component, global::Microsoft.UI.Composition.ICompositionAnimationBase animation) => global::ABI.Microsoft.UI.Xaml.Media.Animation.IConnectedAnimationMethods.SetAnimationComponent(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IConnectedAnimation, component, animation);

        public event global::Windows.Foundation.TypedEventHandler<ConnectedAnimation, object> Completed
        {
            add => global::ABI.Microsoft.UI.Xaml.Media.Animation.IConnectedAnimationMethods.Get_Completed2(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IConnectedAnimation, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Xaml.Media.Animation.IConnectedAnimationMethods.Get_Completed2(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IConnectedAnimation, (IWinRTObject)this).Unsubscribe(value);
        }

        public ConnectedAnimationConfiguration Configuration
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Animation.IConnectedAnimationMethods.get_Configuration(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IConnectedAnimation);
            set => global::ABI.Microsoft.UI.Xaml.Media.Animation.IConnectedAnimationMethods.set_Configuration(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IConnectedAnimation, value);
        }

        public bool IsScaleAnimationEnabled
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Animation.IConnectedAnimationMethods.get_IsScaleAnimationEnabled(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IConnectedAnimation);
            set => global::ABI.Microsoft.UI.Xaml.Media.Animation.IConnectedAnimationMethods.set_IsScaleAnimationEnabled(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IConnectedAnimation, value);
        }

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<ConnectedAnimationComponent>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public enum ConnectedAnimationComponent : int
    {
        OffsetX = unchecked((int)0),
        OffsetY = unchecked((int)0x1),
        CrossFade = unchecked((int)0x2),
        Scale = unchecked((int)0x3),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.ConnectedAnimationConfiguration))]
    [global::ABI.Microsoft.UI.Xaml.Media.Animation.ConnectedAnimationConfigurationRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IConnectedAnimationConfiguration))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public class ConnectedAnimationConfiguration : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<ConnectedAnimationConfiguration>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IConnectedAnimationConfiguration;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_Media_Animation_IConnectedAnimationConfiguration()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IConnectedAnimationConfiguration, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.Media.Animation.IConnectedAnimationConfigurationMethods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IConnectedAnimationConfiguration;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_IConnectedAnimationConfiguration => ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IConnectedAnimationConfiguration ?? Make___objRef_global__Microsoft_UI_Xaml_Media_Animation_IConnectedAnimationConfiguration();



        private static class _IConnectedAnimationConfigurationFactoryMethods
        {}

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IConnectedAnimationConfigurationFactory;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_IConnectedAnimationConfigurationFactory
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IConnectedAnimationConfigurationFactory;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IConnectedAnimationConfigurationFactory = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.ConnectedAnimationConfiguration", global::ABI.Microsoft.UI.Xaml.Media.Animation.IConnectedAnimationConfigurationFactoryMethods.IID);
                }
            }
        }

        public static ConnectedAnimationConfiguration FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<ConnectedAnimationConfiguration>.FromAbi(thisPtr);
        }

        protected internal ConnectedAnimationConfiguration(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Media.Animation.IConnectedAnimationConfigurationMethods.IID);

        }


        public static bool operator ==(ConnectedAnimationConfiguration x, ConnectedAnimationConfiguration y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(ConnectedAnimationConfiguration x, ConnectedAnimationConfiguration y) => !(x == y);
        public bool Equals(ConnectedAnimationConfiguration other) => this == other;
        public override bool Equals(object obj) => obj is ConnectedAnimationConfiguration that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        protected ConnectedAnimationConfiguration(global::WinRT.DerivedComposed _)
        {

        }
        bool IWinRTObject.HasUnwrappableNativeObject => this.GetType() == typeof(ConnectedAnimationConfiguration);
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        protected virtual bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.ConnectedAnimationService))]
    [global::ABI.Microsoft.UI.Xaml.Media.Animation.ConnectedAnimationServiceRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IConnectedAnimationService))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class ConnectedAnimationService : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<ConnectedAnimationService>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_IConnectedAnimationService => _inner;


        public static I As<I>() => ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.ConnectedAnimationService").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IConnectedAnimationServiceStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_IConnectedAnimationServiceStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IConnectedAnimationServiceStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IConnectedAnimationServiceStatics = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.ConnectedAnimationService", global::ABI.Microsoft.UI.Xaml.Media.Animation.IConnectedAnimationServiceStaticsMethods.IID);
                }
            }
        }

        public static ConnectedAnimationService GetForCurrentView() => global::ABI.Microsoft.UI.Xaml.Media.Animation.IConnectedAnimationServiceStaticsMethods.GetForCurrentView(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IConnectedAnimationServiceStatics);

        public static ConnectedAnimationService FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<ConnectedAnimationService>.FromAbi(thisPtr);
        }

        internal ConnectedAnimationService(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Media.Animation.IConnectedAnimationServiceMethods.IID);

        }


        public static bool operator ==(ConnectedAnimationService x, ConnectedAnimationService y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(ConnectedAnimationService x, ConnectedAnimationService y) => !(x == y);
        public bool Equals(ConnectedAnimationService other) => this == other;
        public override bool Equals(object obj) => obj is ConnectedAnimationService that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public ConnectedAnimation PrepareToAnimate(string key, global::Microsoft.UI.Xaml.UIElement source) => global::ABI.Microsoft.UI.Xaml.Media.Animation.IConnectedAnimationServiceMethods.PrepareToAnimate(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IConnectedAnimationService, key, source);

        public ConnectedAnimation GetAnimation(string key) => global::ABI.Microsoft.UI.Xaml.Media.Animation.IConnectedAnimationServiceMethods.GetAnimation(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IConnectedAnimationService, key);

        public global::System.TimeSpan DefaultDuration
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Animation.IConnectedAnimationServiceMethods.get_DefaultDuration(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IConnectedAnimationService);
            set => global::ABI.Microsoft.UI.Xaml.Media.Animation.IConnectedAnimationServiceMethods.set_DefaultDuration(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IConnectedAnimationService, value);
        }

        public global::Microsoft.UI.Composition.CompositionEasingFunction DefaultEasingFunction
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Animation.IConnectedAnimationServiceMethods.get_DefaultEasingFunction(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IConnectedAnimationService);
            set => global::ABI.Microsoft.UI.Xaml.Media.Animation.IConnectedAnimationServiceMethods.set_DefaultEasingFunction(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IConnectedAnimationService, value);
        }

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.ContentThemeTransition))]
    [global::ABI.Microsoft.UI.Xaml.Media.Animation.ContentThemeTransitionRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IContentThemeTransition))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class ContentThemeTransition : Transition, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<ContentThemeTransition>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_IContentThemeTransition => _inner;


        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_ContentThemeTransition;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_ContentThemeTransition
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_ContentThemeTransition;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_ContentThemeTransition = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.ContentThemeTransition");
                }
            }
        }

        public ContentThemeTransition() :base(global::WinRT.DerivedComposed.Instance)
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ContentThemeTransition, global::ABI.Microsoft.UI.Xaml.Media.Animation.IContentThemeTransitionMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static I As<I>() => ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.ContentThemeTransition").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IContentThemeTransitionStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_IContentThemeTransitionStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IContentThemeTransitionStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IContentThemeTransitionStatics = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.ContentThemeTransition", global::ABI.Microsoft.UI.Xaml.Media.Animation.IContentThemeTransitionStaticsMethods.IID);
                }
            }
        }

        public static global::Microsoft.UI.Xaml.DependencyProperty HorizontalOffsetProperty => global::ABI.Microsoft.UI.Xaml.Media.Animation.IContentThemeTransitionStaticsMethods.get_HorizontalOffsetProperty(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IContentThemeTransitionStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty VerticalOffsetProperty => global::ABI.Microsoft.UI.Xaml.Media.Animation.IContentThemeTransitionStaticsMethods.get_VerticalOffsetProperty(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IContentThemeTransitionStatics);

        public static new ContentThemeTransition FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<ContentThemeTransition>.FromAbi(thisPtr);
        }

        internal ContentThemeTransition(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Media.Animation.IContentThemeTransitionMethods.IID);

        }


        public static bool operator ==(ContentThemeTransition x, ContentThemeTransition y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(ContentThemeTransition x, ContentThemeTransition y) => !(x == y);
        public bool Equals(ContentThemeTransition other) => this == other;
        public override bool Equals(object obj) => obj is ContentThemeTransition that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public double HorizontalOffset
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Animation.IContentThemeTransitionMethods.get_HorizontalOffset(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IContentThemeTransition);
            set => global::ABI.Microsoft.UI.Xaml.Media.Animation.IContentThemeTransitionMethods.set_HorizontalOffset(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IContentThemeTransition, value);
        }

        public double VerticalOffset
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Animation.IContentThemeTransitionMethods.get_VerticalOffset(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IContentThemeTransition);
            set => global::ABI.Microsoft.UI.Xaml.Media.Animation.IContentThemeTransitionMethods.set_VerticalOffset(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IContentThemeTransition, value);
        }

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.ContinuumNavigationTransitionInfo))]
    [global::ABI.Microsoft.UI.Xaml.Media.Animation.ContinuumNavigationTransitionInfoRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IContinuumNavigationTransitionInfo))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class ContinuumNavigationTransitionInfo : NavigationTransitionInfo, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<ContinuumNavigationTransitionInfo>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_IContinuumNavigationTransitionInfo => _inner;


        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_ContinuumNavigationTransitionInfo;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_ContinuumNavigationTransitionInfo
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_ContinuumNavigationTransitionInfo;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_ContinuumNavigationTransitionInfo = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.ContinuumNavigationTransitionInfo");
                }
            }
        }

        public ContinuumNavigationTransitionInfo() :base(global::WinRT.DerivedComposed.Instance)
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ContinuumNavigationTransitionInfo, global::ABI.Microsoft.UI.Xaml.Media.Animation.IContinuumNavigationTransitionInfoMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static I As<I>() => ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.ContinuumNavigationTransitionInfo").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IContinuumNavigationTransitionInfoStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_IContinuumNavigationTransitionInfoStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IContinuumNavigationTransitionInfoStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IContinuumNavigationTransitionInfoStatics = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.ContinuumNavigationTransitionInfo", global::ABI.Microsoft.UI.Xaml.Media.Animation.IContinuumNavigationTransitionInfoStaticsMethods.IID);
                }
            }
        }

        public static bool GetIsEntranceElement(global::Microsoft.UI.Xaml.UIElement element) => global::ABI.Microsoft.UI.Xaml.Media.Animation.IContinuumNavigationTransitionInfoStaticsMethods.GetIsEntranceElement(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IContinuumNavigationTransitionInfoStatics, element);

        public static void SetIsEntranceElement(global::Microsoft.UI.Xaml.UIElement element, bool value) => global::ABI.Microsoft.UI.Xaml.Media.Animation.IContinuumNavigationTransitionInfoStaticsMethods.SetIsEntranceElement(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IContinuumNavigationTransitionInfoStatics, element, value);

        public static bool GetIsExitElement(global::Microsoft.UI.Xaml.UIElement element) => global::ABI.Microsoft.UI.Xaml.Media.Animation.IContinuumNavigationTransitionInfoStaticsMethods.GetIsExitElement(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IContinuumNavigationTransitionInfoStatics, element);

        public static void SetIsExitElement(global::Microsoft.UI.Xaml.UIElement element, bool value) => global::ABI.Microsoft.UI.Xaml.Media.Animation.IContinuumNavigationTransitionInfoStaticsMethods.SetIsExitElement(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IContinuumNavigationTransitionInfoStatics, element, value);

        public static bool GetExitElementContainer(global::Microsoft.UI.Xaml.Controls.ListViewBase element) => global::ABI.Microsoft.UI.Xaml.Media.Animation.IContinuumNavigationTransitionInfoStaticsMethods.GetExitElementContainer(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IContinuumNavigationTransitionInfoStatics, element);

        public static void SetExitElementContainer(global::Microsoft.UI.Xaml.Controls.ListViewBase element, bool value) => global::ABI.Microsoft.UI.Xaml.Media.Animation.IContinuumNavigationTransitionInfoStaticsMethods.SetExitElementContainer(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IContinuumNavigationTransitionInfoStatics, element, value);

        public static global::Microsoft.UI.Xaml.DependencyProperty ExitElementContainerProperty => global::ABI.Microsoft.UI.Xaml.Media.Animation.IContinuumNavigationTransitionInfoStaticsMethods.get_ExitElementContainerProperty(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IContinuumNavigationTransitionInfoStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty ExitElementProperty => global::ABI.Microsoft.UI.Xaml.Media.Animation.IContinuumNavigationTransitionInfoStaticsMethods.get_ExitElementProperty(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IContinuumNavigationTransitionInfoStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty IsEntranceElementProperty => global::ABI.Microsoft.UI.Xaml.Media.Animation.IContinuumNavigationTransitionInfoStaticsMethods.get_IsEntranceElementProperty(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IContinuumNavigationTransitionInfoStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty IsExitElementProperty => global::ABI.Microsoft.UI.Xaml.Media.Animation.IContinuumNavigationTransitionInfoStaticsMethods.get_IsExitElementProperty(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IContinuumNavigationTransitionInfoStatics);

        public static new ContinuumNavigationTransitionInfo FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<ContinuumNavigationTransitionInfo>.FromAbi(thisPtr);
        }

        internal ContinuumNavigationTransitionInfo(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Media.Animation.IContinuumNavigationTransitionInfoMethods.IID);

        }


        public static bool operator ==(ContinuumNavigationTransitionInfo x, ContinuumNavigationTransitionInfo y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(ContinuumNavigationTransitionInfo x, ContinuumNavigationTransitionInfo y) => !(x == y);
        public bool Equals(ContinuumNavigationTransitionInfo other) => this == other;
        public override bool Equals(object obj) => obj is ContinuumNavigationTransitionInfo that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public global::Microsoft.UI.Xaml.UIElement ExitElement
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Animation.IContinuumNavigationTransitionInfoMethods.get_ExitElement(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IContinuumNavigationTransitionInfo);
            set => global::ABI.Microsoft.UI.Xaml.Media.Animation.IContinuumNavigationTransitionInfoMethods.set_ExitElement(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IContinuumNavigationTransitionInfo, value);
        }

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.CubicEase))]
    [global::ABI.Microsoft.UI.Xaml.Media.Animation.CubicEaseRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ICubicEase))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class CubicEase : EasingFunctionBase, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<CubicEase>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_ICubicEase => _inner;


        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_CubicEase;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_CubicEase
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_CubicEase;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_CubicEase = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.CubicEase");
                }
            }
        }

        public CubicEase() :base(global::WinRT.DerivedComposed.Instance)
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Xaml_Media_Animation_CubicEase, global::ABI.Microsoft.UI.Xaml.Media.Animation.ICubicEaseMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static new CubicEase FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<CubicEase>.FromAbi(thisPtr);
        }

        internal CubicEase(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Media.Animation.ICubicEaseMethods.IID);

        }


        public static bool operator ==(CubicEase x, CubicEase y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(CubicEase x, CubicEase y) => !(x == y);
        public bool Equals(CubicEase other) => this == other;
        public override bool Equals(object obj) => obj is CubicEase that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.DirectConnectedAnimationConfiguration))]
    [global::ABI.Microsoft.UI.Xaml.Media.Animation.DirectConnectedAnimationConfigurationRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IDirectConnectedAnimationConfiguration))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public class DirectConnectedAnimationConfiguration : ConnectedAnimationConfiguration, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<DirectConnectedAnimationConfiguration>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IDirectConnectedAnimationConfiguration;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_Media_Animation_IDirectConnectedAnimationConfiguration()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IDirectConnectedAnimationConfiguration, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.Media.Animation.IDirectConnectedAnimationConfigurationMethods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IDirectConnectedAnimationConfiguration;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_IDirectConnectedAnimationConfiguration => ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IDirectConnectedAnimationConfiguration ?? Make___objRef_global__Microsoft_UI_Xaml_Media_Animation_IDirectConnectedAnimationConfiguration();



        private static class _IDirectConnectedAnimationConfigurationFactoryMethods
        {
            public static unsafe IntPtr CreateInstance(IObjectReference _obj, object baseInterface, out IntPtr innerInterface)
            {
                var ThisPtr = _obj.ThisPtr;

                ObjectReferenceValue __baseInterface = default;
                IntPtr __innerInterface = default;
                IntPtr __retval = default;
                try
                {
                    __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                    global::System.GC.KeepAlive(_obj);
                    innerInterface = __innerInterface;
                    return __retval;
                }
                finally
                {
                    MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                }
            }
        }

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IDirectConnectedAnimationConfigurationFactory;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_IDirectConnectedAnimationConfigurationFactory
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IDirectConnectedAnimationConfigurationFactory;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IDirectConnectedAnimationConfigurationFactory = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.DirectConnectedAnimationConfiguration", global::ABI.Microsoft.UI.Xaml.Media.Animation.IDirectConnectedAnimationConfigurationFactoryMethods.IID);
                }
            }
        }

        public DirectConnectedAnimationConfiguration():base(global::WinRT.DerivedComposed.Instance)
        {
            bool isAggregation = this.GetType() != typeof(DirectConnectedAnimationConfiguration);
            object baseInspectable = isAggregation ? this : null;
            IntPtr composed = _IDirectConnectedAnimationConfigurationFactoryMethods.CreateInstance(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IDirectConnectedAnimationConfigurationFactory,  baseInspectable, out IntPtr inner);
            try
            {
                ComWrappersHelper.Init(isAggregation, this, composed, inner, global::ABI.Microsoft.UI.Xaml.Media.Animation.IDirectConnectedAnimationConfigurationMethods.IID, out _inner);

            }
            finally
            {
                Marshal.Release(inner);   
            }
        }

        public static new DirectConnectedAnimationConfiguration FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<DirectConnectedAnimationConfiguration>.FromAbi(thisPtr);
        }

        protected internal DirectConnectedAnimationConfiguration(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Media.Animation.IDirectConnectedAnimationConfigurationMethods.IID);

        }


        public static bool operator ==(DirectConnectedAnimationConfiguration x, DirectConnectedAnimationConfiguration y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(DirectConnectedAnimationConfiguration x, DirectConnectedAnimationConfiguration y) => !(x == y);
        public bool Equals(DirectConnectedAnimationConfiguration other) => this == other;
        public override bool Equals(object obj) => obj is DirectConnectedAnimationConfiguration that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        protected DirectConnectedAnimationConfiguration(global::WinRT.DerivedComposed _):base(_)
        {

        }
        bool IWinRTObject.HasUnwrappableNativeObject => this.GetType() == typeof(DirectConnectedAnimationConfiguration);
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.DiscreteColorKeyFrame))]
    [global::ABI.Microsoft.UI.Xaml.Media.Animation.DiscreteColorKeyFrameRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IDiscreteColorKeyFrame))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class DiscreteColorKeyFrame : ColorKeyFrame, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<DiscreteColorKeyFrame>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_IDiscreteColorKeyFrame => _inner;


        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_DiscreteColorKeyFrame;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_DiscreteColorKeyFrame
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_DiscreteColorKeyFrame;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_DiscreteColorKeyFrame = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.DiscreteColorKeyFrame");
                }
            }
        }

        public DiscreteColorKeyFrame() :base(global::WinRT.DerivedComposed.Instance)
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Xaml_Media_Animation_DiscreteColorKeyFrame, global::ABI.Microsoft.UI.Xaml.Media.Animation.IDiscreteColorKeyFrameMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static new DiscreteColorKeyFrame FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<DiscreteColorKeyFrame>.FromAbi(thisPtr);
        }

        internal DiscreteColorKeyFrame(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Media.Animation.IDiscreteColorKeyFrameMethods.IID);

        }


        public static bool operator ==(DiscreteColorKeyFrame x, DiscreteColorKeyFrame y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(DiscreteColorKeyFrame x, DiscreteColorKeyFrame y) => !(x == y);
        public bool Equals(DiscreteColorKeyFrame other) => this == other;
        public override bool Equals(object obj) => obj is DiscreteColorKeyFrame that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.DiscreteDoubleKeyFrame))]
    [global::ABI.Microsoft.UI.Xaml.Media.Animation.DiscreteDoubleKeyFrameRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IDiscreteDoubleKeyFrame))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class DiscreteDoubleKeyFrame : DoubleKeyFrame, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<DiscreteDoubleKeyFrame>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_IDiscreteDoubleKeyFrame => _inner;


        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_DiscreteDoubleKeyFrame;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_DiscreteDoubleKeyFrame
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_DiscreteDoubleKeyFrame;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_DiscreteDoubleKeyFrame = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.DiscreteDoubleKeyFrame");
                }
            }
        }

        public DiscreteDoubleKeyFrame() :base(global::WinRT.DerivedComposed.Instance)
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Xaml_Media_Animation_DiscreteDoubleKeyFrame, global::ABI.Microsoft.UI.Xaml.Media.Animation.IDiscreteDoubleKeyFrameMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static new DiscreteDoubleKeyFrame FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<DiscreteDoubleKeyFrame>.FromAbi(thisPtr);
        }

        internal DiscreteDoubleKeyFrame(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Media.Animation.IDiscreteDoubleKeyFrameMethods.IID);

        }


        public static bool operator ==(DiscreteDoubleKeyFrame x, DiscreteDoubleKeyFrame y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(DiscreteDoubleKeyFrame x, DiscreteDoubleKeyFrame y) => !(x == y);
        public bool Equals(DiscreteDoubleKeyFrame other) => this == other;
        public override bool Equals(object obj) => obj is DiscreteDoubleKeyFrame that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.DiscreteObjectKeyFrame))]
    [global::ABI.Microsoft.UI.Xaml.Media.Animation.DiscreteObjectKeyFrameRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IDiscreteObjectKeyFrame))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class DiscreteObjectKeyFrame : ObjectKeyFrame, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<DiscreteObjectKeyFrame>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_IDiscreteObjectKeyFrame => _inner;


        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_DiscreteObjectKeyFrame;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_DiscreteObjectKeyFrame
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_DiscreteObjectKeyFrame;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_DiscreteObjectKeyFrame = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.DiscreteObjectKeyFrame");
                }
            }
        }

        public DiscreteObjectKeyFrame() :base(global::WinRT.DerivedComposed.Instance)
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Xaml_Media_Animation_DiscreteObjectKeyFrame, global::ABI.Microsoft.UI.Xaml.Media.Animation.IDiscreteObjectKeyFrameMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static new DiscreteObjectKeyFrame FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<DiscreteObjectKeyFrame>.FromAbi(thisPtr);
        }

        internal DiscreteObjectKeyFrame(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Media.Animation.IDiscreteObjectKeyFrameMethods.IID);

        }


        public static bool operator ==(DiscreteObjectKeyFrame x, DiscreteObjectKeyFrame y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(DiscreteObjectKeyFrame x, DiscreteObjectKeyFrame y) => !(x == y);
        public bool Equals(DiscreteObjectKeyFrame other) => this == other;
        public override bool Equals(object obj) => obj is DiscreteObjectKeyFrame that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.DiscretePointKeyFrame))]
    [global::ABI.Microsoft.UI.Xaml.Media.Animation.DiscretePointKeyFrameRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IDiscretePointKeyFrame))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class DiscretePointKeyFrame : PointKeyFrame, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<DiscretePointKeyFrame>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_IDiscretePointKeyFrame => _inner;


        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_DiscretePointKeyFrame;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_DiscretePointKeyFrame
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_DiscretePointKeyFrame;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_DiscretePointKeyFrame = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.DiscretePointKeyFrame");
                }
            }
        }

        public DiscretePointKeyFrame() :base(global::WinRT.DerivedComposed.Instance)
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Xaml_Media_Animation_DiscretePointKeyFrame, global::ABI.Microsoft.UI.Xaml.Media.Animation.IDiscretePointKeyFrameMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static new DiscretePointKeyFrame FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<DiscretePointKeyFrame>.FromAbi(thisPtr);
        }

        internal DiscretePointKeyFrame(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Media.Animation.IDiscretePointKeyFrameMethods.IID);

        }


        public static bool operator ==(DiscretePointKeyFrame x, DiscretePointKeyFrame y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(DiscretePointKeyFrame x, DiscretePointKeyFrame y) => !(x == y);
        public bool Equals(DiscretePointKeyFrame other) => this == other;
        public override bool Equals(object obj) => obj is DiscretePointKeyFrame that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.DoubleAnimation))]
    [global::ABI.Microsoft.UI.Xaml.Media.Animation.DoubleAnimationRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IDoubleAnimation))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class DoubleAnimation : Timeline, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<DoubleAnimation>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_IDoubleAnimation => _inner;


        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_DoubleAnimation;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_DoubleAnimation
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_DoubleAnimation;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_DoubleAnimation = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.DoubleAnimation");
                }
            }
        }

        public DoubleAnimation() :base(global::WinRT.DerivedComposed.Instance)
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Xaml_Media_Animation_DoubleAnimation, global::ABI.Microsoft.UI.Xaml.Media.Animation.IDoubleAnimationMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static new I As<I>() => ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.DoubleAnimation").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IDoubleAnimationStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_IDoubleAnimationStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IDoubleAnimationStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IDoubleAnimationStatics = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.DoubleAnimation", global::ABI.Microsoft.UI.Xaml.Media.Animation.IDoubleAnimationStaticsMethods.IID);
                }
            }
        }

        public static global::Microsoft.UI.Xaml.DependencyProperty ByProperty => global::ABI.Microsoft.UI.Xaml.Media.Animation.IDoubleAnimationStaticsMethods.get_ByProperty(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IDoubleAnimationStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty EasingFunctionProperty => global::ABI.Microsoft.UI.Xaml.Media.Animation.IDoubleAnimationStaticsMethods.get_EasingFunctionProperty(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IDoubleAnimationStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty EnableDependentAnimationProperty => global::ABI.Microsoft.UI.Xaml.Media.Animation.IDoubleAnimationStaticsMethods.get_EnableDependentAnimationProperty(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IDoubleAnimationStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty FromProperty => global::ABI.Microsoft.UI.Xaml.Media.Animation.IDoubleAnimationStaticsMethods.get_FromProperty(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IDoubleAnimationStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty ToProperty => global::ABI.Microsoft.UI.Xaml.Media.Animation.IDoubleAnimationStaticsMethods.get_ToProperty(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IDoubleAnimationStatics);

        public static new DoubleAnimation FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<DoubleAnimation>.FromAbi(thisPtr);
        }

        internal DoubleAnimation(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Media.Animation.IDoubleAnimationMethods.IID);

        }


        public static bool operator ==(DoubleAnimation x, DoubleAnimation y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(DoubleAnimation x, DoubleAnimation y) => !(x == y);
        public bool Equals(DoubleAnimation other) => this == other;
        public override bool Equals(object obj) => obj is DoubleAnimation that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public global::System.Nullable<double> By
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Animation.IDoubleAnimationMethods.get_By(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IDoubleAnimation);
            set => global::ABI.Microsoft.UI.Xaml.Media.Animation.IDoubleAnimationMethods.set_By(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IDoubleAnimation, value);
        }

        public EasingFunctionBase EasingFunction
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Animation.IDoubleAnimationMethods.get_EasingFunction(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IDoubleAnimation);
            set => global::ABI.Microsoft.UI.Xaml.Media.Animation.IDoubleAnimationMethods.set_EasingFunction(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IDoubleAnimation, value);
        }

        public bool EnableDependentAnimation
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Animation.IDoubleAnimationMethods.get_EnableDependentAnimation(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IDoubleAnimation);
            set => global::ABI.Microsoft.UI.Xaml.Media.Animation.IDoubleAnimationMethods.set_EnableDependentAnimation(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IDoubleAnimation, value);
        }

        public global::System.Nullable<double> From
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Animation.IDoubleAnimationMethods.get_From(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IDoubleAnimation);
            set => global::ABI.Microsoft.UI.Xaml.Media.Animation.IDoubleAnimationMethods.set_From(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IDoubleAnimation, value);
        }

        public global::System.Nullable<double> To
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Animation.IDoubleAnimationMethods.get_To(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IDoubleAnimation);
            set => global::ABI.Microsoft.UI.Xaml.Media.Animation.IDoubleAnimationMethods.set_To(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IDoubleAnimation, value);
        }

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.DoubleAnimationUsingKeyFrames))]
    [global::ABI.Microsoft.UI.Xaml.Media.Animation.DoubleAnimationUsingKeyFramesRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IDoubleAnimationUsingKeyFrames))]
    [global::Microsoft.UI.Xaml.Markup.ContentProperty(Name = @"KeyFrames")]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class DoubleAnimationUsingKeyFrames : Timeline, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<DoubleAnimationUsingKeyFrames>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_IDoubleAnimationUsingKeyFrames => _inner;


        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_DoubleAnimationUsingKeyFrames;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_DoubleAnimationUsingKeyFrames
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_DoubleAnimationUsingKeyFrames;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_DoubleAnimationUsingKeyFrames = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.DoubleAnimationUsingKeyFrames");
                }
            }
        }

        public DoubleAnimationUsingKeyFrames() :base(global::WinRT.DerivedComposed.Instance)
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Xaml_Media_Animation_DoubleAnimationUsingKeyFrames, global::ABI.Microsoft.UI.Xaml.Media.Animation.IDoubleAnimationUsingKeyFramesMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static new I As<I>() => ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.DoubleAnimationUsingKeyFrames").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IDoubleAnimationUsingKeyFramesStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_IDoubleAnimationUsingKeyFramesStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IDoubleAnimationUsingKeyFramesStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IDoubleAnimationUsingKeyFramesStatics = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.DoubleAnimationUsingKeyFrames", global::ABI.Microsoft.UI.Xaml.Media.Animation.IDoubleAnimationUsingKeyFramesStaticsMethods.IID);
                }
            }
        }

        public static global::Microsoft.UI.Xaml.DependencyProperty EnableDependentAnimationProperty => global::ABI.Microsoft.UI.Xaml.Media.Animation.IDoubleAnimationUsingKeyFramesStaticsMethods.get_EnableDependentAnimationProperty(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IDoubleAnimationUsingKeyFramesStatics);

        public static new DoubleAnimationUsingKeyFrames FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<DoubleAnimationUsingKeyFrames>.FromAbi(thisPtr);
        }

        internal DoubleAnimationUsingKeyFrames(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Media.Animation.IDoubleAnimationUsingKeyFramesMethods.IID);

        }


        public static bool operator ==(DoubleAnimationUsingKeyFrames x, DoubleAnimationUsingKeyFrames y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(DoubleAnimationUsingKeyFrames x, DoubleAnimationUsingKeyFrames y) => !(x == y);
        public bool Equals(DoubleAnimationUsingKeyFrames other) => this == other;
        public override bool Equals(object obj) => obj is DoubleAnimationUsingKeyFrames that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public bool EnableDependentAnimation
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Animation.IDoubleAnimationUsingKeyFramesMethods.get_EnableDependentAnimation(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IDoubleAnimationUsingKeyFrames);
            set => global::ABI.Microsoft.UI.Xaml.Media.Animation.IDoubleAnimationUsingKeyFramesMethods.set_EnableDependentAnimation(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IDoubleAnimationUsingKeyFrames, value);
        }

        public DoubleKeyFrameCollection KeyFrames => global::ABI.Microsoft.UI.Xaml.Media.Animation.IDoubleAnimationUsingKeyFramesMethods.get_KeyFrames(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IDoubleAnimationUsingKeyFrames);

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.DoubleKeyFrame))]
    [global::ABI.Microsoft.UI.Xaml.Media.Animation.DoubleKeyFrameRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IDoubleKeyFrame))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public class DoubleKeyFrame : global::Microsoft.UI.Xaml.DependencyObject, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<DoubleKeyFrame>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IDoubleKeyFrame;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_Media_Animation_IDoubleKeyFrame()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IDoubleKeyFrame, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.Media.Animation.IDoubleKeyFrameMethods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IDoubleKeyFrame;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_IDoubleKeyFrame => ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IDoubleKeyFrame ?? Make___objRef_global__Microsoft_UI_Xaml_Media_Animation_IDoubleKeyFrame();



        private static class _IDoubleKeyFrameFactoryMethods
        {
            public static unsafe IntPtr CreateInstance(IObjectReference _obj, object baseInterface, out IntPtr innerInterface)
            {
                var ThisPtr = _obj.ThisPtr;

                ObjectReferenceValue __baseInterface = default;
                IntPtr __innerInterface = default;
                IntPtr __retval = default;
                try
                {
                    __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                    global::System.GC.KeepAlive(_obj);
                    innerInterface = __innerInterface;
                    return __retval;
                }
                finally
                {
                    MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                }
            }
        }

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IDoubleKeyFrameFactory;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_IDoubleKeyFrameFactory
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IDoubleKeyFrameFactory;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IDoubleKeyFrameFactory = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.DoubleKeyFrame", global::ABI.Microsoft.UI.Xaml.Media.Animation.IDoubleKeyFrameFactoryMethods.IID);
                }
            }
        }

        protected DoubleKeyFrame():base(global::WinRT.DerivedComposed.Instance)
        {
            bool isAggregation = this.GetType() != typeof(DoubleKeyFrame);
            object baseInspectable = isAggregation ? this : null;
            IntPtr composed = _IDoubleKeyFrameFactoryMethods.CreateInstance(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IDoubleKeyFrameFactory,  baseInspectable, out IntPtr inner);
            try
            {
                ComWrappersHelper.Init(isAggregation, this, composed, inner, global::ABI.Microsoft.UI.Xaml.Media.Animation.IDoubleKeyFrameMethods.IID, out _inner);

            }
            finally
            {
                Marshal.Release(inner);   
            }
        }

        public static I As<I>() => ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.DoubleKeyFrame").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IDoubleKeyFrameStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_IDoubleKeyFrameStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IDoubleKeyFrameStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IDoubleKeyFrameStatics = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.DoubleKeyFrame", global::ABI.Microsoft.UI.Xaml.Media.Animation.IDoubleKeyFrameStaticsMethods.IID);
                }
            }
        }

        public static global::Microsoft.UI.Xaml.DependencyProperty KeyTimeProperty => global::ABI.Microsoft.UI.Xaml.Media.Animation.IDoubleKeyFrameStaticsMethods.get_KeyTimeProperty(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IDoubleKeyFrameStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty ValueProperty => global::ABI.Microsoft.UI.Xaml.Media.Animation.IDoubleKeyFrameStaticsMethods.get_ValueProperty(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IDoubleKeyFrameStatics);

        public static new DoubleKeyFrame FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<DoubleKeyFrame>.FromAbi(thisPtr);
        }

        protected internal DoubleKeyFrame(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Media.Animation.IDoubleKeyFrameMethods.IID);

        }


        public static bool operator ==(DoubleKeyFrame x, DoubleKeyFrame y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(DoubleKeyFrame x, DoubleKeyFrame y) => !(x == y);
        public bool Equals(DoubleKeyFrame other) => this == other;
        public override bool Equals(object obj) => obj is DoubleKeyFrame that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        protected DoubleKeyFrame(global::WinRT.DerivedComposed _):base(_)
        {

        }
        bool IWinRTObject.HasUnwrappableNativeObject => this.GetType() == typeof(DoubleKeyFrame);
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public KeyTime KeyTime
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Animation.IDoubleKeyFrameMethods.get_KeyTime(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IDoubleKeyFrame);
            set => global::ABI.Microsoft.UI.Xaml.Media.Animation.IDoubleKeyFrameMethods.set_KeyTime(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IDoubleKeyFrame, value);
        }

        public double Value
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Animation.IDoubleKeyFrameMethods.get_Value(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IDoubleKeyFrame);
            set => global::ABI.Microsoft.UI.Xaml.Media.Animation.IDoubleKeyFrameMethods.set_Value(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IDoubleKeyFrame, value);
        }

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.DoubleKeyFrameCollection))]
    [global::ABI.Microsoft.UI.Xaml.Media.Animation.DoubleKeyFrameCollectionRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(global::System.Collections.Generic.IList<DoubleKeyFrame>))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class DoubleKeyFrameCollection : global::System.Collections.Generic.IList<DoubleKeyFrame>, global::System.Collections.Generic.IEnumerable<DoubleKeyFrame>, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<DoubleKeyFrameCollection>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__System_Collections_Generic_IList_DoubleKeyFrame_;
        private IObjectReference Make___objRef_global__System_Collections_Generic_IList_DoubleKeyFrame_()
        {
            _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IVector_1_Microsoft_UI_Xaml_Media_Animation_DoubleKeyFrame.EnsureInitialized();
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__System_Collections_Generic_IList_DoubleKeyFrame_, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.System.Collections.Generic.IListMethods<DoubleKeyFrame>.IID), null);
            return ___objRef_global__System_Collections_Generic_IList_DoubleKeyFrame_;
        }
        private IObjectReference _objRef_global__System_Collections_Generic_IList_DoubleKeyFrame_ => ___objRef_global__System_Collections_Generic_IList_DoubleKeyFrame_ ?? Make___objRef_global__System_Collections_Generic_IList_DoubleKeyFrame_();

        private volatile IObjectReference ___objRef_global__System_Collections_Generic_IEnumerable_DoubleKeyFrame_;
        private IObjectReference Make___objRef_global__System_Collections_Generic_IEnumerable_DoubleKeyFrame_()
        {
            _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IIterable_1_Microsoft_UI_Xaml_Media_Animation_DoubleKeyFrame.EnsureInitialized();
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__System_Collections_Generic_IEnumerable_DoubleKeyFrame_, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.System.Collections.Generic.IEnumerableMethods<DoubleKeyFrame>.IID), null);
            return ___objRef_global__System_Collections_Generic_IEnumerable_DoubleKeyFrame_;
        }
        private IObjectReference _objRef_global__System_Collections_Generic_IEnumerable_DoubleKeyFrame_ => ___objRef_global__System_Collections_Generic_IEnumerable_DoubleKeyFrame_ ?? Make___objRef_global__System_Collections_Generic_IEnumerable_DoubleKeyFrame_();



        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_DoubleKeyFrameCollection;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_DoubleKeyFrameCollection
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_DoubleKeyFrameCollection;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_DoubleKeyFrameCollection = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.DoubleKeyFrameCollection");
                }
            }
        }

        public DoubleKeyFrameCollection() 
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Xaml_Media_Animation_DoubleKeyFrameCollection, global::ABI.System.Collections.Generic.IListMethods<DoubleKeyFrame>.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static DoubleKeyFrameCollection FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<DoubleKeyFrameCollection>.FromAbi(thisPtr);
        }

        internal DoubleKeyFrameCollection(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.System.Collections.Generic.IListMethods<DoubleKeyFrame>.IID);

        }


        public static bool operator ==(DoubleKeyFrameCollection x, DoubleKeyFrameCollection y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(DoubleKeyFrameCollection x, DoubleKeyFrameCollection y) => !(x == y);
        public bool Equals(DoubleKeyFrameCollection other) => this == other;
        public override bool Equals(object obj) => obj is DoubleKeyFrameCollection that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public int Count => global::ABI.System.Collections.Generic.IListMethods<DoubleKeyFrame>.get_Count(_objRef_global__System_Collections_Generic_IList_DoubleKeyFrame_);
        public bool IsReadOnly => global::ABI.System.Collections.Generic.IListMethods<DoubleKeyFrame>.get_IsReadOnly(_objRef_global__System_Collections_Generic_IList_DoubleKeyFrame_);
        [global::System.Runtime.CompilerServices.IndexerName("ListItem")]
        public DoubleKeyFrame this[int index] 
        {
            get => global::ABI.System.Collections.Generic.IListMethods<DoubleKeyFrame>.Indexer_Get(_objRef_global__System_Collections_Generic_IList_DoubleKeyFrame_, index);
            set => global::ABI.System.Collections.Generic.IListMethods<DoubleKeyFrame>.Indexer_Set(_objRef_global__System_Collections_Generic_IList_DoubleKeyFrame_, index, value);
        }
        public int IndexOf(DoubleKeyFrame item) => global::ABI.System.Collections.Generic.IListMethods<DoubleKeyFrame>.IndexOf(_objRef_global__System_Collections_Generic_IList_DoubleKeyFrame_, item);
        public void Insert(int index, DoubleKeyFrame item) => global::ABI.System.Collections.Generic.IListMethods<DoubleKeyFrame>.Insert(_objRef_global__System_Collections_Generic_IList_DoubleKeyFrame_, index, item);
        public void RemoveAt(int index) => global::ABI.System.Collections.Generic.IListMethods<DoubleKeyFrame>.RemoveAt(_objRef_global__System_Collections_Generic_IList_DoubleKeyFrame_, index);
        public void Add(DoubleKeyFrame item) => global::ABI.System.Collections.Generic.IListMethods<DoubleKeyFrame>.Add(_objRef_global__System_Collections_Generic_IList_DoubleKeyFrame_, item);
        public void Clear() => global::ABI.System.Collections.Generic.IListMethods<DoubleKeyFrame>.Clear(_objRef_global__System_Collections_Generic_IList_DoubleKeyFrame_);
        public bool Contains(DoubleKeyFrame item) => global::ABI.System.Collections.Generic.IListMethods<DoubleKeyFrame>.Contains(_objRef_global__System_Collections_Generic_IList_DoubleKeyFrame_, item);
        public void CopyTo(DoubleKeyFrame[] array, int arrayIndex) => global::ABI.System.Collections.Generic.IListMethods<DoubleKeyFrame>.CopyTo(_objRef_global__System_Collections_Generic_IList_DoubleKeyFrame_, array, arrayIndex);
        public bool Remove(DoubleKeyFrame item) => global::ABI.System.Collections.Generic.IListMethods<DoubleKeyFrame>.Remove(_objRef_global__System_Collections_Generic_IList_DoubleKeyFrame_, item);

        public IEnumerator<DoubleKeyFrame> GetEnumerator() => global::ABI.System.Collections.Generic.IEnumerableMethods<DoubleKeyFrame>.GetEnumerator(_objRef_global__System_Collections_Generic_IEnumerable_DoubleKeyFrame_);

        IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.DragItemThemeAnimation))]
    [global::ABI.Microsoft.UI.Xaml.Media.Animation.DragItemThemeAnimationRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IDragItemThemeAnimation))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class DragItemThemeAnimation : Timeline, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<DragItemThemeAnimation>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_IDragItemThemeAnimation => _inner;


        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_DragItemThemeAnimation;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_DragItemThemeAnimation
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_DragItemThemeAnimation;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_DragItemThemeAnimation = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.DragItemThemeAnimation");
                }
            }
        }

        public DragItemThemeAnimation() :base(global::WinRT.DerivedComposed.Instance)
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Xaml_Media_Animation_DragItemThemeAnimation, global::ABI.Microsoft.UI.Xaml.Media.Animation.IDragItemThemeAnimationMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static new I As<I>() => ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.DragItemThemeAnimation").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IDragItemThemeAnimationStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_IDragItemThemeAnimationStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IDragItemThemeAnimationStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IDragItemThemeAnimationStatics = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.DragItemThemeAnimation", global::ABI.Microsoft.UI.Xaml.Media.Animation.IDragItemThemeAnimationStaticsMethods.IID);
                }
            }
        }

        public static global::Microsoft.UI.Xaml.DependencyProperty TargetNameProperty => global::ABI.Microsoft.UI.Xaml.Media.Animation.IDragItemThemeAnimationStaticsMethods.get_TargetNameProperty(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IDragItemThemeAnimationStatics);

        public static new DragItemThemeAnimation FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<DragItemThemeAnimation>.FromAbi(thisPtr);
        }

        internal DragItemThemeAnimation(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Media.Animation.IDragItemThemeAnimationMethods.IID);

        }


        public static bool operator ==(DragItemThemeAnimation x, DragItemThemeAnimation y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(DragItemThemeAnimation x, DragItemThemeAnimation y) => !(x == y);
        public bool Equals(DragItemThemeAnimation other) => this == other;
        public override bool Equals(object obj) => obj is DragItemThemeAnimation that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public string TargetName
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Animation.IDragItemThemeAnimationMethods.get_TargetName(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IDragItemThemeAnimation);
            set => global::ABI.Microsoft.UI.Xaml.Media.Animation.IDragItemThemeAnimationMethods.set_TargetName(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IDragItemThemeAnimation, value);
        }

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.DragOverThemeAnimation))]
    [global::ABI.Microsoft.UI.Xaml.Media.Animation.DragOverThemeAnimationRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IDragOverThemeAnimation))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class DragOverThemeAnimation : Timeline, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<DragOverThemeAnimation>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_IDragOverThemeAnimation => _inner;


        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_DragOverThemeAnimation;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_DragOverThemeAnimation
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_DragOverThemeAnimation;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_DragOverThemeAnimation = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.DragOverThemeAnimation");
                }
            }
        }

        public DragOverThemeAnimation() :base(global::WinRT.DerivedComposed.Instance)
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Xaml_Media_Animation_DragOverThemeAnimation, global::ABI.Microsoft.UI.Xaml.Media.Animation.IDragOverThemeAnimationMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static new I As<I>() => ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.DragOverThemeAnimation").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IDragOverThemeAnimationStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_IDragOverThemeAnimationStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IDragOverThemeAnimationStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IDragOverThemeAnimationStatics = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.DragOverThemeAnimation", global::ABI.Microsoft.UI.Xaml.Media.Animation.IDragOverThemeAnimationStaticsMethods.IID);
                }
            }
        }

        public static global::Microsoft.UI.Xaml.DependencyProperty DirectionProperty => global::ABI.Microsoft.UI.Xaml.Media.Animation.IDragOverThemeAnimationStaticsMethods.get_DirectionProperty(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IDragOverThemeAnimationStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty TargetNameProperty => global::ABI.Microsoft.UI.Xaml.Media.Animation.IDragOverThemeAnimationStaticsMethods.get_TargetNameProperty(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IDragOverThemeAnimationStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty ToOffsetProperty => global::ABI.Microsoft.UI.Xaml.Media.Animation.IDragOverThemeAnimationStaticsMethods.get_ToOffsetProperty(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IDragOverThemeAnimationStatics);

        public static new DragOverThemeAnimation FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<DragOverThemeAnimation>.FromAbi(thisPtr);
        }

        internal DragOverThemeAnimation(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Media.Animation.IDragOverThemeAnimationMethods.IID);

        }


        public static bool operator ==(DragOverThemeAnimation x, DragOverThemeAnimation y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(DragOverThemeAnimation x, DragOverThemeAnimation y) => !(x == y);
        public bool Equals(DragOverThemeAnimation other) => this == other;
        public override bool Equals(object obj) => obj is DragOverThemeAnimation that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public global::Microsoft.UI.Xaml.Controls.Primitives.AnimationDirection Direction
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Animation.IDragOverThemeAnimationMethods.get_Direction(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IDragOverThemeAnimation);
            set => global::ABI.Microsoft.UI.Xaml.Media.Animation.IDragOverThemeAnimationMethods.set_Direction(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IDragOverThemeAnimation, value);
        }

        public string TargetName
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Animation.IDragOverThemeAnimationMethods.get_TargetName(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IDragOverThemeAnimation);
            set => global::ABI.Microsoft.UI.Xaml.Media.Animation.IDragOverThemeAnimationMethods.set_TargetName(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IDragOverThemeAnimation, value);
        }

        public double ToOffset
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Animation.IDragOverThemeAnimationMethods.get_ToOffset(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IDragOverThemeAnimation);
            set => global::ABI.Microsoft.UI.Xaml.Media.Animation.IDragOverThemeAnimationMethods.set_ToOffset(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IDragOverThemeAnimation, value);
        }

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.DrillInNavigationTransitionInfo))]
    [global::ABI.Microsoft.UI.Xaml.Media.Animation.DrillInNavigationTransitionInfoRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IDrillInNavigationTransitionInfo))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class DrillInNavigationTransitionInfo : NavigationTransitionInfo, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<DrillInNavigationTransitionInfo>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_IDrillInNavigationTransitionInfo => _inner;


        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_DrillInNavigationTransitionInfo;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_DrillInNavigationTransitionInfo
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_DrillInNavigationTransitionInfo;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_DrillInNavigationTransitionInfo = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.DrillInNavigationTransitionInfo");
                }
            }
        }

        public DrillInNavigationTransitionInfo() :base(global::WinRT.DerivedComposed.Instance)
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Xaml_Media_Animation_DrillInNavigationTransitionInfo, global::ABI.Microsoft.UI.Xaml.Media.Animation.IDrillInNavigationTransitionInfoMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static new DrillInNavigationTransitionInfo FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<DrillInNavigationTransitionInfo>.FromAbi(thisPtr);
        }

        internal DrillInNavigationTransitionInfo(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Media.Animation.IDrillInNavigationTransitionInfoMethods.IID);

        }


        public static bool operator ==(DrillInNavigationTransitionInfo x, DrillInNavigationTransitionInfo y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(DrillInNavigationTransitionInfo x, DrillInNavigationTransitionInfo y) => !(x == y);
        public bool Equals(DrillInNavigationTransitionInfo other) => this == other;
        public override bool Equals(object obj) => obj is DrillInNavigationTransitionInfo that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.DrillInThemeAnimation))]
    [global::ABI.Microsoft.UI.Xaml.Media.Animation.DrillInThemeAnimationRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IDrillInThemeAnimation))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class DrillInThemeAnimation : Timeline, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<DrillInThemeAnimation>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_IDrillInThemeAnimation => _inner;


        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_DrillInThemeAnimation;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_DrillInThemeAnimation
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_DrillInThemeAnimation;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_DrillInThemeAnimation = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.DrillInThemeAnimation");
                }
            }
        }

        public DrillInThemeAnimation() :base(global::WinRT.DerivedComposed.Instance)
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Xaml_Media_Animation_DrillInThemeAnimation, global::ABI.Microsoft.UI.Xaml.Media.Animation.IDrillInThemeAnimationMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static new I As<I>() => ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.DrillInThemeAnimation").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IDrillInThemeAnimationStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_IDrillInThemeAnimationStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IDrillInThemeAnimationStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IDrillInThemeAnimationStatics = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.DrillInThemeAnimation", global::ABI.Microsoft.UI.Xaml.Media.Animation.IDrillInThemeAnimationStaticsMethods.IID);
                }
            }
        }

        public static global::Microsoft.UI.Xaml.DependencyProperty EntranceTargetNameProperty => global::ABI.Microsoft.UI.Xaml.Media.Animation.IDrillInThemeAnimationStaticsMethods.get_EntranceTargetNameProperty(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IDrillInThemeAnimationStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty EntranceTargetProperty => global::ABI.Microsoft.UI.Xaml.Media.Animation.IDrillInThemeAnimationStaticsMethods.get_EntranceTargetProperty(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IDrillInThemeAnimationStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty ExitTargetNameProperty => global::ABI.Microsoft.UI.Xaml.Media.Animation.IDrillInThemeAnimationStaticsMethods.get_ExitTargetNameProperty(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IDrillInThemeAnimationStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty ExitTargetProperty => global::ABI.Microsoft.UI.Xaml.Media.Animation.IDrillInThemeAnimationStaticsMethods.get_ExitTargetProperty(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IDrillInThemeAnimationStatics);

        public static new DrillInThemeAnimation FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<DrillInThemeAnimation>.FromAbi(thisPtr);
        }

        internal DrillInThemeAnimation(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Media.Animation.IDrillInThemeAnimationMethods.IID);

        }


        public static bool operator ==(DrillInThemeAnimation x, DrillInThemeAnimation y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(DrillInThemeAnimation x, DrillInThemeAnimation y) => !(x == y);
        public bool Equals(DrillInThemeAnimation other) => this == other;
        public override bool Equals(object obj) => obj is DrillInThemeAnimation that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public global::Microsoft.UI.Xaml.DependencyObject EntranceTarget
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Animation.IDrillInThemeAnimationMethods.get_EntranceTarget(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IDrillInThemeAnimation);
            set => global::ABI.Microsoft.UI.Xaml.Media.Animation.IDrillInThemeAnimationMethods.set_EntranceTarget(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IDrillInThemeAnimation, value);
        }

        public string EntranceTargetName
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Animation.IDrillInThemeAnimationMethods.get_EntranceTargetName(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IDrillInThemeAnimation);
            set => global::ABI.Microsoft.UI.Xaml.Media.Animation.IDrillInThemeAnimationMethods.set_EntranceTargetName(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IDrillInThemeAnimation, value);
        }

        public global::Microsoft.UI.Xaml.DependencyObject ExitTarget
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Animation.IDrillInThemeAnimationMethods.get_ExitTarget(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IDrillInThemeAnimation);
            set => global::ABI.Microsoft.UI.Xaml.Media.Animation.IDrillInThemeAnimationMethods.set_ExitTarget(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IDrillInThemeAnimation, value);
        }

        public string ExitTargetName
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Animation.IDrillInThemeAnimationMethods.get_ExitTargetName(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IDrillInThemeAnimation);
            set => global::ABI.Microsoft.UI.Xaml.Media.Animation.IDrillInThemeAnimationMethods.set_ExitTargetName(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IDrillInThemeAnimation, value);
        }

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.DrillOutThemeAnimation))]
    [global::ABI.Microsoft.UI.Xaml.Media.Animation.DrillOutThemeAnimationRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IDrillOutThemeAnimation))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class DrillOutThemeAnimation : Timeline, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<DrillOutThemeAnimation>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_IDrillOutThemeAnimation => _inner;


        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_DrillOutThemeAnimation;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_DrillOutThemeAnimation
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_DrillOutThemeAnimation;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_DrillOutThemeAnimation = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.DrillOutThemeAnimation");
                }
            }
        }

        public DrillOutThemeAnimation() :base(global::WinRT.DerivedComposed.Instance)
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Xaml_Media_Animation_DrillOutThemeAnimation, global::ABI.Microsoft.UI.Xaml.Media.Animation.IDrillOutThemeAnimationMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static new I As<I>() => ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.DrillOutThemeAnimation").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IDrillOutThemeAnimationStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_IDrillOutThemeAnimationStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IDrillOutThemeAnimationStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IDrillOutThemeAnimationStatics = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.DrillOutThemeAnimation", global::ABI.Microsoft.UI.Xaml.Media.Animation.IDrillOutThemeAnimationStaticsMethods.IID);
                }
            }
        }

        public static global::Microsoft.UI.Xaml.DependencyProperty EntranceTargetNameProperty => global::ABI.Microsoft.UI.Xaml.Media.Animation.IDrillOutThemeAnimationStaticsMethods.get_EntranceTargetNameProperty(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IDrillOutThemeAnimationStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty EntranceTargetProperty => global::ABI.Microsoft.UI.Xaml.Media.Animation.IDrillOutThemeAnimationStaticsMethods.get_EntranceTargetProperty(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IDrillOutThemeAnimationStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty ExitTargetNameProperty => global::ABI.Microsoft.UI.Xaml.Media.Animation.IDrillOutThemeAnimationStaticsMethods.get_ExitTargetNameProperty(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IDrillOutThemeAnimationStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty ExitTargetProperty => global::ABI.Microsoft.UI.Xaml.Media.Animation.IDrillOutThemeAnimationStaticsMethods.get_ExitTargetProperty(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IDrillOutThemeAnimationStatics);

        public static new DrillOutThemeAnimation FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<DrillOutThemeAnimation>.FromAbi(thisPtr);
        }

        internal DrillOutThemeAnimation(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Media.Animation.IDrillOutThemeAnimationMethods.IID);

        }


        public static bool operator ==(DrillOutThemeAnimation x, DrillOutThemeAnimation y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(DrillOutThemeAnimation x, DrillOutThemeAnimation y) => !(x == y);
        public bool Equals(DrillOutThemeAnimation other) => this == other;
        public override bool Equals(object obj) => obj is DrillOutThemeAnimation that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public global::Microsoft.UI.Xaml.DependencyObject EntranceTarget
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Animation.IDrillOutThemeAnimationMethods.get_EntranceTarget(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IDrillOutThemeAnimation);
            set => global::ABI.Microsoft.UI.Xaml.Media.Animation.IDrillOutThemeAnimationMethods.set_EntranceTarget(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IDrillOutThemeAnimation, value);
        }

        public string EntranceTargetName
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Animation.IDrillOutThemeAnimationMethods.get_EntranceTargetName(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IDrillOutThemeAnimation);
            set => global::ABI.Microsoft.UI.Xaml.Media.Animation.IDrillOutThemeAnimationMethods.set_EntranceTargetName(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IDrillOutThemeAnimation, value);
        }

        public global::Microsoft.UI.Xaml.DependencyObject ExitTarget
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Animation.IDrillOutThemeAnimationMethods.get_ExitTarget(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IDrillOutThemeAnimation);
            set => global::ABI.Microsoft.UI.Xaml.Media.Animation.IDrillOutThemeAnimationMethods.set_ExitTarget(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IDrillOutThemeAnimation, value);
        }

        public string ExitTargetName
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Animation.IDrillOutThemeAnimationMethods.get_ExitTargetName(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IDrillOutThemeAnimation);
            set => global::ABI.Microsoft.UI.Xaml.Media.Animation.IDrillOutThemeAnimationMethods.set_ExitTargetName(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IDrillOutThemeAnimation, value);
        }

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.DropTargetItemThemeAnimation))]
    [global::ABI.Microsoft.UI.Xaml.Media.Animation.DropTargetItemThemeAnimationRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IDropTargetItemThemeAnimation))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class DropTargetItemThemeAnimation : Timeline, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<DropTargetItemThemeAnimation>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_IDropTargetItemThemeAnimation => _inner;


        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_DropTargetItemThemeAnimation;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_DropTargetItemThemeAnimation
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_DropTargetItemThemeAnimation;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_DropTargetItemThemeAnimation = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.DropTargetItemThemeAnimation");
                }
            }
        }

        public DropTargetItemThemeAnimation() :base(global::WinRT.DerivedComposed.Instance)
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Xaml_Media_Animation_DropTargetItemThemeAnimation, global::ABI.Microsoft.UI.Xaml.Media.Animation.IDropTargetItemThemeAnimationMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static new I As<I>() => ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.DropTargetItemThemeAnimation").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IDropTargetItemThemeAnimationStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_IDropTargetItemThemeAnimationStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IDropTargetItemThemeAnimationStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IDropTargetItemThemeAnimationStatics = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.DropTargetItemThemeAnimation", global::ABI.Microsoft.UI.Xaml.Media.Animation.IDropTargetItemThemeAnimationStaticsMethods.IID);
                }
            }
        }

        public static global::Microsoft.UI.Xaml.DependencyProperty TargetNameProperty => global::ABI.Microsoft.UI.Xaml.Media.Animation.IDropTargetItemThemeAnimationStaticsMethods.get_TargetNameProperty(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IDropTargetItemThemeAnimationStatics);

        public static new DropTargetItemThemeAnimation FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<DropTargetItemThemeAnimation>.FromAbi(thisPtr);
        }

        internal DropTargetItemThemeAnimation(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Media.Animation.IDropTargetItemThemeAnimationMethods.IID);

        }


        public static bool operator ==(DropTargetItemThemeAnimation x, DropTargetItemThemeAnimation y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(DropTargetItemThemeAnimation x, DropTargetItemThemeAnimation y) => !(x == y);
        public bool Equals(DropTargetItemThemeAnimation other) => this == other;
        public override bool Equals(object obj) => obj is DropTargetItemThemeAnimation that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public string TargetName
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Animation.IDropTargetItemThemeAnimationMethods.get_TargetName(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IDropTargetItemThemeAnimation);
            set => global::ABI.Microsoft.UI.Xaml.Media.Animation.IDropTargetItemThemeAnimationMethods.set_TargetName(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IDropTargetItemThemeAnimation, value);
        }

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.EasingColorKeyFrame))]
    [global::ABI.Microsoft.UI.Xaml.Media.Animation.EasingColorKeyFrameRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IEasingColorKeyFrame))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class EasingColorKeyFrame : ColorKeyFrame, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<EasingColorKeyFrame>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_IEasingColorKeyFrame => _inner;


        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_EasingColorKeyFrame;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_EasingColorKeyFrame
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_EasingColorKeyFrame;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_EasingColorKeyFrame = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.EasingColorKeyFrame");
                }
            }
        }

        public EasingColorKeyFrame() :base(global::WinRT.DerivedComposed.Instance)
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Xaml_Media_Animation_EasingColorKeyFrame, global::ABI.Microsoft.UI.Xaml.Media.Animation.IEasingColorKeyFrameMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static new I As<I>() => ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.EasingColorKeyFrame").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IEasingColorKeyFrameStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_IEasingColorKeyFrameStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IEasingColorKeyFrameStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IEasingColorKeyFrameStatics = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.EasingColorKeyFrame", global::ABI.Microsoft.UI.Xaml.Media.Animation.IEasingColorKeyFrameStaticsMethods.IID);
                }
            }
        }

        public static global::Microsoft.UI.Xaml.DependencyProperty EasingFunctionProperty => global::ABI.Microsoft.UI.Xaml.Media.Animation.IEasingColorKeyFrameStaticsMethods.get_EasingFunctionProperty(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IEasingColorKeyFrameStatics);

        public static new EasingColorKeyFrame FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<EasingColorKeyFrame>.FromAbi(thisPtr);
        }

        internal EasingColorKeyFrame(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Media.Animation.IEasingColorKeyFrameMethods.IID);

        }


        public static bool operator ==(EasingColorKeyFrame x, EasingColorKeyFrame y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(EasingColorKeyFrame x, EasingColorKeyFrame y) => !(x == y);
        public bool Equals(EasingColorKeyFrame other) => this == other;
        public override bool Equals(object obj) => obj is EasingColorKeyFrame that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public EasingFunctionBase EasingFunction
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Animation.IEasingColorKeyFrameMethods.get_EasingFunction(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IEasingColorKeyFrame);
            set => global::ABI.Microsoft.UI.Xaml.Media.Animation.IEasingColorKeyFrameMethods.set_EasingFunction(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IEasingColorKeyFrame, value);
        }

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.EasingDoubleKeyFrame))]
    [global::ABI.Microsoft.UI.Xaml.Media.Animation.EasingDoubleKeyFrameRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IEasingDoubleKeyFrame))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class EasingDoubleKeyFrame : DoubleKeyFrame, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<EasingDoubleKeyFrame>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_IEasingDoubleKeyFrame => _inner;


        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_EasingDoubleKeyFrame;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_EasingDoubleKeyFrame
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_EasingDoubleKeyFrame;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_EasingDoubleKeyFrame = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.EasingDoubleKeyFrame");
                }
            }
        }

        public EasingDoubleKeyFrame() :base(global::WinRT.DerivedComposed.Instance)
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Xaml_Media_Animation_EasingDoubleKeyFrame, global::ABI.Microsoft.UI.Xaml.Media.Animation.IEasingDoubleKeyFrameMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static new I As<I>() => ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.EasingDoubleKeyFrame").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IEasingDoubleKeyFrameStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_IEasingDoubleKeyFrameStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IEasingDoubleKeyFrameStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IEasingDoubleKeyFrameStatics = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.EasingDoubleKeyFrame", global::ABI.Microsoft.UI.Xaml.Media.Animation.IEasingDoubleKeyFrameStaticsMethods.IID);
                }
            }
        }

        public static global::Microsoft.UI.Xaml.DependencyProperty EasingFunctionProperty => global::ABI.Microsoft.UI.Xaml.Media.Animation.IEasingDoubleKeyFrameStaticsMethods.get_EasingFunctionProperty(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IEasingDoubleKeyFrameStatics);

        public static new EasingDoubleKeyFrame FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<EasingDoubleKeyFrame>.FromAbi(thisPtr);
        }

        internal EasingDoubleKeyFrame(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Media.Animation.IEasingDoubleKeyFrameMethods.IID);

        }


        public static bool operator ==(EasingDoubleKeyFrame x, EasingDoubleKeyFrame y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(EasingDoubleKeyFrame x, EasingDoubleKeyFrame y) => !(x == y);
        public bool Equals(EasingDoubleKeyFrame other) => this == other;
        public override bool Equals(object obj) => obj is EasingDoubleKeyFrame that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public EasingFunctionBase EasingFunction
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Animation.IEasingDoubleKeyFrameMethods.get_EasingFunction(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IEasingDoubleKeyFrame);
            set => global::ABI.Microsoft.UI.Xaml.Media.Animation.IEasingDoubleKeyFrameMethods.set_EasingFunction(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IEasingDoubleKeyFrame, value);
        }

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.EasingFunctionBase))]
    [global::ABI.Microsoft.UI.Xaml.Media.Animation.EasingFunctionBaseRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IEasingFunctionBase))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public class EasingFunctionBase : global::Microsoft.UI.Xaml.DependencyObject, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<EasingFunctionBase>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IEasingFunctionBase;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_Media_Animation_IEasingFunctionBase()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IEasingFunctionBase, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.Media.Animation.IEasingFunctionBaseMethods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IEasingFunctionBase;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_IEasingFunctionBase => ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IEasingFunctionBase ?? Make___objRef_global__Microsoft_UI_Xaml_Media_Animation_IEasingFunctionBase();



        private static class _IEasingFunctionBaseFactoryMethods
        {}

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IEasingFunctionBaseFactory;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_IEasingFunctionBaseFactory
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IEasingFunctionBaseFactory;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IEasingFunctionBaseFactory = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.EasingFunctionBase", global::ABI.Microsoft.UI.Xaml.Media.Animation.IEasingFunctionBaseFactoryMethods.IID);
                }
            }
        }

        public static I As<I>() => ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.EasingFunctionBase").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IEasingFunctionBaseStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_IEasingFunctionBaseStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IEasingFunctionBaseStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IEasingFunctionBaseStatics = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.EasingFunctionBase", global::ABI.Microsoft.UI.Xaml.Media.Animation.IEasingFunctionBaseStaticsMethods.IID);
                }
            }
        }

        public static global::Microsoft.UI.Xaml.DependencyProperty EasingModeProperty => global::ABI.Microsoft.UI.Xaml.Media.Animation.IEasingFunctionBaseStaticsMethods.get_EasingModeProperty(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IEasingFunctionBaseStatics);

        public static new EasingFunctionBase FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<EasingFunctionBase>.FromAbi(thisPtr);
        }

        protected internal EasingFunctionBase(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Media.Animation.IEasingFunctionBaseMethods.IID);

        }


        public static bool operator ==(EasingFunctionBase x, EasingFunctionBase y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(EasingFunctionBase x, EasingFunctionBase y) => !(x == y);
        public bool Equals(EasingFunctionBase other) => this == other;
        public override bool Equals(object obj) => obj is EasingFunctionBase that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        protected EasingFunctionBase(global::WinRT.DerivedComposed _):base(_)
        {

        }
        bool IWinRTObject.HasUnwrappableNativeObject => this.GetType() == typeof(EasingFunctionBase);
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public double Ease(double normalizedTime) => global::ABI.Microsoft.UI.Xaml.Media.Animation.IEasingFunctionBaseMethods.Ease(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IEasingFunctionBase, normalizedTime);

        public EasingMode EasingMode
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Animation.IEasingFunctionBaseMethods.get_EasingMode(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IEasingFunctionBase);
            set => global::ABI.Microsoft.UI.Xaml.Media.Animation.IEasingFunctionBaseMethods.set_EasingMode(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IEasingFunctionBase, value);
        }

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<EasingMode>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public enum EasingMode : int
    {
        EaseOut = unchecked((int)0),
        EaseIn = unchecked((int)0x1),
        EaseInOut = unchecked((int)0x2),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.EasingPointKeyFrame))]
    [global::ABI.Microsoft.UI.Xaml.Media.Animation.EasingPointKeyFrameRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IEasingPointKeyFrame))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class EasingPointKeyFrame : PointKeyFrame, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<EasingPointKeyFrame>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_IEasingPointKeyFrame => _inner;


        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_EasingPointKeyFrame;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_EasingPointKeyFrame
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_EasingPointKeyFrame;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_EasingPointKeyFrame = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.EasingPointKeyFrame");
                }
            }
        }

        public EasingPointKeyFrame() :base(global::WinRT.DerivedComposed.Instance)
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Xaml_Media_Animation_EasingPointKeyFrame, global::ABI.Microsoft.UI.Xaml.Media.Animation.IEasingPointKeyFrameMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static new I As<I>() => ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.EasingPointKeyFrame").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IEasingPointKeyFrameStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_IEasingPointKeyFrameStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IEasingPointKeyFrameStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IEasingPointKeyFrameStatics = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.EasingPointKeyFrame", global::ABI.Microsoft.UI.Xaml.Media.Animation.IEasingPointKeyFrameStaticsMethods.IID);
                }
            }
        }

        public static global::Microsoft.UI.Xaml.DependencyProperty EasingFunctionProperty => global::ABI.Microsoft.UI.Xaml.Media.Animation.IEasingPointKeyFrameStaticsMethods.get_EasingFunctionProperty(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IEasingPointKeyFrameStatics);

        public static new EasingPointKeyFrame FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<EasingPointKeyFrame>.FromAbi(thisPtr);
        }

        internal EasingPointKeyFrame(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Media.Animation.IEasingPointKeyFrameMethods.IID);

        }


        public static bool operator ==(EasingPointKeyFrame x, EasingPointKeyFrame y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(EasingPointKeyFrame x, EasingPointKeyFrame y) => !(x == y);
        public bool Equals(EasingPointKeyFrame other) => this == other;
        public override bool Equals(object obj) => obj is EasingPointKeyFrame that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public EasingFunctionBase EasingFunction
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Animation.IEasingPointKeyFrameMethods.get_EasingFunction(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IEasingPointKeyFrame);
            set => global::ABI.Microsoft.UI.Xaml.Media.Animation.IEasingPointKeyFrameMethods.set_EasingFunction(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IEasingPointKeyFrame, value);
        }

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.EdgeUIThemeTransition))]
    [global::ABI.Microsoft.UI.Xaml.Media.Animation.EdgeUIThemeTransitionRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IEdgeUIThemeTransition))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class EdgeUIThemeTransition : Transition, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<EdgeUIThemeTransition>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_IEdgeUIThemeTransition => _inner;


        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_EdgeUIThemeTransition;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_EdgeUIThemeTransition
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_EdgeUIThemeTransition;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_EdgeUIThemeTransition = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.EdgeUIThemeTransition");
                }
            }
        }

        public EdgeUIThemeTransition() :base(global::WinRT.DerivedComposed.Instance)
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Xaml_Media_Animation_EdgeUIThemeTransition, global::ABI.Microsoft.UI.Xaml.Media.Animation.IEdgeUIThemeTransitionMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static I As<I>() => ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.EdgeUIThemeTransition").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IEdgeUIThemeTransitionStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_IEdgeUIThemeTransitionStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IEdgeUIThemeTransitionStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IEdgeUIThemeTransitionStatics = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.EdgeUIThemeTransition", global::ABI.Microsoft.UI.Xaml.Media.Animation.IEdgeUIThemeTransitionStaticsMethods.IID);
                }
            }
        }

        public static global::Microsoft.UI.Xaml.DependencyProperty EdgeProperty => global::ABI.Microsoft.UI.Xaml.Media.Animation.IEdgeUIThemeTransitionStaticsMethods.get_EdgeProperty(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IEdgeUIThemeTransitionStatics);

        public static new EdgeUIThemeTransition FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<EdgeUIThemeTransition>.FromAbi(thisPtr);
        }

        internal EdgeUIThemeTransition(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Media.Animation.IEdgeUIThemeTransitionMethods.IID);

        }


        public static bool operator ==(EdgeUIThemeTransition x, EdgeUIThemeTransition y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(EdgeUIThemeTransition x, EdgeUIThemeTransition y) => !(x == y);
        public bool Equals(EdgeUIThemeTransition other) => this == other;
        public override bool Equals(object obj) => obj is EdgeUIThemeTransition that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public global::Microsoft.UI.Xaml.Controls.Primitives.EdgeTransitionLocation Edge
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Animation.IEdgeUIThemeTransitionMethods.get_Edge(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IEdgeUIThemeTransition);
            set => global::ABI.Microsoft.UI.Xaml.Media.Animation.IEdgeUIThemeTransitionMethods.set_Edge(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IEdgeUIThemeTransition, value);
        }

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.ElasticEase))]
    [global::ABI.Microsoft.UI.Xaml.Media.Animation.ElasticEaseRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IElasticEase))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class ElasticEase : EasingFunctionBase, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<ElasticEase>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_IElasticEase => _inner;


        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_ElasticEase;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_ElasticEase
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_ElasticEase;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_ElasticEase = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.ElasticEase");
                }
            }
        }

        public ElasticEase() :base(global::WinRT.DerivedComposed.Instance)
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ElasticEase, global::ABI.Microsoft.UI.Xaml.Media.Animation.IElasticEaseMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static new I As<I>() => ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.ElasticEase").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IElasticEaseStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_IElasticEaseStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IElasticEaseStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IElasticEaseStatics = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.ElasticEase", global::ABI.Microsoft.UI.Xaml.Media.Animation.IElasticEaseStaticsMethods.IID);
                }
            }
        }

        public static global::Microsoft.UI.Xaml.DependencyProperty OscillationsProperty => global::ABI.Microsoft.UI.Xaml.Media.Animation.IElasticEaseStaticsMethods.get_OscillationsProperty(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IElasticEaseStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty SpringinessProperty => global::ABI.Microsoft.UI.Xaml.Media.Animation.IElasticEaseStaticsMethods.get_SpringinessProperty(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IElasticEaseStatics);

        public static new ElasticEase FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<ElasticEase>.FromAbi(thisPtr);
        }

        internal ElasticEase(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Media.Animation.IElasticEaseMethods.IID);

        }


        public static bool operator ==(ElasticEase x, ElasticEase y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(ElasticEase x, ElasticEase y) => !(x == y);
        public bool Equals(ElasticEase other) => this == other;
        public override bool Equals(object obj) => obj is ElasticEase that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public int Oscillations
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Animation.IElasticEaseMethods.get_Oscillations(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IElasticEase);
            set => global::ABI.Microsoft.UI.Xaml.Media.Animation.IElasticEaseMethods.set_Oscillations(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IElasticEase, value);
        }

        public double Springiness
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Animation.IElasticEaseMethods.get_Springiness(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IElasticEase);
            set => global::ABI.Microsoft.UI.Xaml.Media.Animation.IElasticEaseMethods.set_Springiness(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IElasticEase, value);
        }

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.EntranceNavigationTransitionInfo))]
    [global::ABI.Microsoft.UI.Xaml.Media.Animation.EntranceNavigationTransitionInfoRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IEntranceNavigationTransitionInfo))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class EntranceNavigationTransitionInfo : NavigationTransitionInfo, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<EntranceNavigationTransitionInfo>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_IEntranceNavigationTransitionInfo => _inner;


        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_EntranceNavigationTransitionInfo;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_EntranceNavigationTransitionInfo
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_EntranceNavigationTransitionInfo;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_EntranceNavigationTransitionInfo = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.EntranceNavigationTransitionInfo");
                }
            }
        }

        public EntranceNavigationTransitionInfo() :base(global::WinRT.DerivedComposed.Instance)
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Xaml_Media_Animation_EntranceNavigationTransitionInfo, global::ABI.Microsoft.UI.Xaml.Media.Animation.IEntranceNavigationTransitionInfoMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static I As<I>() => ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.EntranceNavigationTransitionInfo").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IEntranceNavigationTransitionInfoStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_IEntranceNavigationTransitionInfoStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IEntranceNavigationTransitionInfoStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IEntranceNavigationTransitionInfoStatics = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.EntranceNavigationTransitionInfo", global::ABI.Microsoft.UI.Xaml.Media.Animation.IEntranceNavigationTransitionInfoStaticsMethods.IID);
                }
            }
        }

        public static bool GetIsTargetElement(global::Microsoft.UI.Xaml.UIElement element) => global::ABI.Microsoft.UI.Xaml.Media.Animation.IEntranceNavigationTransitionInfoStaticsMethods.GetIsTargetElement(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IEntranceNavigationTransitionInfoStatics, element);

        public static void SetIsTargetElement(global::Microsoft.UI.Xaml.UIElement element, bool value) => global::ABI.Microsoft.UI.Xaml.Media.Animation.IEntranceNavigationTransitionInfoStaticsMethods.SetIsTargetElement(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IEntranceNavigationTransitionInfoStatics, element, value);

        public static global::Microsoft.UI.Xaml.DependencyProperty IsTargetElementProperty => global::ABI.Microsoft.UI.Xaml.Media.Animation.IEntranceNavigationTransitionInfoStaticsMethods.get_IsTargetElementProperty(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IEntranceNavigationTransitionInfoStatics);

        public static new EntranceNavigationTransitionInfo FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<EntranceNavigationTransitionInfo>.FromAbi(thisPtr);
        }

        internal EntranceNavigationTransitionInfo(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Media.Animation.IEntranceNavigationTransitionInfoMethods.IID);

        }


        public static bool operator ==(EntranceNavigationTransitionInfo x, EntranceNavigationTransitionInfo y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(EntranceNavigationTransitionInfo x, EntranceNavigationTransitionInfo y) => !(x == y);
        public bool Equals(EntranceNavigationTransitionInfo other) => this == other;
        public override bool Equals(object obj) => obj is EntranceNavigationTransitionInfo that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.EntranceThemeTransition))]
    [global::ABI.Microsoft.UI.Xaml.Media.Animation.EntranceThemeTransitionRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IEntranceThemeTransition))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class EntranceThemeTransition : Transition, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<EntranceThemeTransition>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_IEntranceThemeTransition => _inner;


        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_EntranceThemeTransition;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_EntranceThemeTransition
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_EntranceThemeTransition;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_EntranceThemeTransition = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.EntranceThemeTransition");
                }
            }
        }

        public EntranceThemeTransition() :base(global::WinRT.DerivedComposed.Instance)
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Xaml_Media_Animation_EntranceThemeTransition, global::ABI.Microsoft.UI.Xaml.Media.Animation.IEntranceThemeTransitionMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static I As<I>() => ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.EntranceThemeTransition").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IEntranceThemeTransitionStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_IEntranceThemeTransitionStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IEntranceThemeTransitionStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IEntranceThemeTransitionStatics = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.EntranceThemeTransition", global::ABI.Microsoft.UI.Xaml.Media.Animation.IEntranceThemeTransitionStaticsMethods.IID);
                }
            }
        }

        public static global::Microsoft.UI.Xaml.DependencyProperty FromHorizontalOffsetProperty => global::ABI.Microsoft.UI.Xaml.Media.Animation.IEntranceThemeTransitionStaticsMethods.get_FromHorizontalOffsetProperty(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IEntranceThemeTransitionStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty FromVerticalOffsetProperty => global::ABI.Microsoft.UI.Xaml.Media.Animation.IEntranceThemeTransitionStaticsMethods.get_FromVerticalOffsetProperty(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IEntranceThemeTransitionStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty IsStaggeringEnabledProperty => global::ABI.Microsoft.UI.Xaml.Media.Animation.IEntranceThemeTransitionStaticsMethods.get_IsStaggeringEnabledProperty(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IEntranceThemeTransitionStatics);

        public static new EntranceThemeTransition FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<EntranceThemeTransition>.FromAbi(thisPtr);
        }

        internal EntranceThemeTransition(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Media.Animation.IEntranceThemeTransitionMethods.IID);

        }


        public static bool operator ==(EntranceThemeTransition x, EntranceThemeTransition y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(EntranceThemeTransition x, EntranceThemeTransition y) => !(x == y);
        public bool Equals(EntranceThemeTransition other) => this == other;
        public override bool Equals(object obj) => obj is EntranceThemeTransition that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public double FromHorizontalOffset
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Animation.IEntranceThemeTransitionMethods.get_FromHorizontalOffset(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IEntranceThemeTransition);
            set => global::ABI.Microsoft.UI.Xaml.Media.Animation.IEntranceThemeTransitionMethods.set_FromHorizontalOffset(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IEntranceThemeTransition, value);
        }

        public double FromVerticalOffset
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Animation.IEntranceThemeTransitionMethods.get_FromVerticalOffset(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IEntranceThemeTransition);
            set => global::ABI.Microsoft.UI.Xaml.Media.Animation.IEntranceThemeTransitionMethods.set_FromVerticalOffset(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IEntranceThemeTransition, value);
        }

        public bool IsStaggeringEnabled
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Animation.IEntranceThemeTransitionMethods.get_IsStaggeringEnabled(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IEntranceThemeTransition);
            set => global::ABI.Microsoft.UI.Xaml.Media.Animation.IEntranceThemeTransitionMethods.set_IsStaggeringEnabled(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IEntranceThemeTransition, value);
        }

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.ExponentialEase))]
    [global::ABI.Microsoft.UI.Xaml.Media.Animation.ExponentialEaseRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IExponentialEase))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class ExponentialEase : EasingFunctionBase, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<ExponentialEase>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_IExponentialEase => _inner;


        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_ExponentialEase;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_ExponentialEase
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_ExponentialEase;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_ExponentialEase = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.ExponentialEase");
                }
            }
        }

        public ExponentialEase() :base(global::WinRT.DerivedComposed.Instance)
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ExponentialEase, global::ABI.Microsoft.UI.Xaml.Media.Animation.IExponentialEaseMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static new I As<I>() => ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.ExponentialEase").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IExponentialEaseStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_IExponentialEaseStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IExponentialEaseStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IExponentialEaseStatics = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.ExponentialEase", global::ABI.Microsoft.UI.Xaml.Media.Animation.IExponentialEaseStaticsMethods.IID);
                }
            }
        }

        public static global::Microsoft.UI.Xaml.DependencyProperty ExponentProperty => global::ABI.Microsoft.UI.Xaml.Media.Animation.IExponentialEaseStaticsMethods.get_ExponentProperty(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IExponentialEaseStatics);

        public static new ExponentialEase FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<ExponentialEase>.FromAbi(thisPtr);
        }

        internal ExponentialEase(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Media.Animation.IExponentialEaseMethods.IID);

        }


        public static bool operator ==(ExponentialEase x, ExponentialEase y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(ExponentialEase x, ExponentialEase y) => !(x == y);
        public bool Equals(ExponentialEase other) => this == other;
        public override bool Equals(object obj) => obj is ExponentialEase that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public double Exponent
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Animation.IExponentialEaseMethods.get_Exponent(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IExponentialEase);
            set => global::ABI.Microsoft.UI.Xaml.Media.Animation.IExponentialEaseMethods.set_Exponent(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IExponentialEase, value);
        }

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.FadeInThemeAnimation))]
    [global::ABI.Microsoft.UI.Xaml.Media.Animation.FadeInThemeAnimationRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IFadeInThemeAnimation))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class FadeInThemeAnimation : Timeline, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<FadeInThemeAnimation>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_IFadeInThemeAnimation => _inner;


        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_FadeInThemeAnimation;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_FadeInThemeAnimation
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_FadeInThemeAnimation;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_FadeInThemeAnimation = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.FadeInThemeAnimation");
                }
            }
        }

        public FadeInThemeAnimation() :base(global::WinRT.DerivedComposed.Instance)
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Xaml_Media_Animation_FadeInThemeAnimation, global::ABI.Microsoft.UI.Xaml.Media.Animation.IFadeInThemeAnimationMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static new I As<I>() => ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.FadeInThemeAnimation").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IFadeInThemeAnimationStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_IFadeInThemeAnimationStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IFadeInThemeAnimationStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IFadeInThemeAnimationStatics = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.FadeInThemeAnimation", global::ABI.Microsoft.UI.Xaml.Media.Animation.IFadeInThemeAnimationStaticsMethods.IID);
                }
            }
        }

        public static global::Microsoft.UI.Xaml.DependencyProperty TargetNameProperty => global::ABI.Microsoft.UI.Xaml.Media.Animation.IFadeInThemeAnimationStaticsMethods.get_TargetNameProperty(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IFadeInThemeAnimationStatics);

        public static new FadeInThemeAnimation FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<FadeInThemeAnimation>.FromAbi(thisPtr);
        }

        internal FadeInThemeAnimation(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Media.Animation.IFadeInThemeAnimationMethods.IID);

        }


        public static bool operator ==(FadeInThemeAnimation x, FadeInThemeAnimation y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(FadeInThemeAnimation x, FadeInThemeAnimation y) => !(x == y);
        public bool Equals(FadeInThemeAnimation other) => this == other;
        public override bool Equals(object obj) => obj is FadeInThemeAnimation that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public string TargetName
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Animation.IFadeInThemeAnimationMethods.get_TargetName(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IFadeInThemeAnimation);
            set => global::ABI.Microsoft.UI.Xaml.Media.Animation.IFadeInThemeAnimationMethods.set_TargetName(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IFadeInThemeAnimation, value);
        }

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.FadeOutThemeAnimation))]
    [global::ABI.Microsoft.UI.Xaml.Media.Animation.FadeOutThemeAnimationRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IFadeOutThemeAnimation))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class FadeOutThemeAnimation : Timeline, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<FadeOutThemeAnimation>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_IFadeOutThemeAnimation => _inner;


        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_FadeOutThemeAnimation;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_FadeOutThemeAnimation
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_FadeOutThemeAnimation;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_FadeOutThemeAnimation = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.FadeOutThemeAnimation");
                }
            }
        }

        public FadeOutThemeAnimation() :base(global::WinRT.DerivedComposed.Instance)
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Xaml_Media_Animation_FadeOutThemeAnimation, global::ABI.Microsoft.UI.Xaml.Media.Animation.IFadeOutThemeAnimationMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static new I As<I>() => ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.FadeOutThemeAnimation").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IFadeOutThemeAnimationStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_IFadeOutThemeAnimationStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IFadeOutThemeAnimationStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IFadeOutThemeAnimationStatics = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.FadeOutThemeAnimation", global::ABI.Microsoft.UI.Xaml.Media.Animation.IFadeOutThemeAnimationStaticsMethods.IID);
                }
            }
        }

        public static global::Microsoft.UI.Xaml.DependencyProperty TargetNameProperty => global::ABI.Microsoft.UI.Xaml.Media.Animation.IFadeOutThemeAnimationStaticsMethods.get_TargetNameProperty(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IFadeOutThemeAnimationStatics);

        public static new FadeOutThemeAnimation FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<FadeOutThemeAnimation>.FromAbi(thisPtr);
        }

        internal FadeOutThemeAnimation(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Media.Animation.IFadeOutThemeAnimationMethods.IID);

        }


        public static bool operator ==(FadeOutThemeAnimation x, FadeOutThemeAnimation y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(FadeOutThemeAnimation x, FadeOutThemeAnimation y) => !(x == y);
        public bool Equals(FadeOutThemeAnimation other) => this == other;
        public override bool Equals(object obj) => obj is FadeOutThemeAnimation that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public string TargetName
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Animation.IFadeOutThemeAnimationMethods.get_TargetName(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IFadeOutThemeAnimation);
            set => global::ABI.Microsoft.UI.Xaml.Media.Animation.IFadeOutThemeAnimationMethods.set_TargetName(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IFadeOutThemeAnimation, value);
        }

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<FillBehavior>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public enum FillBehavior : int
    {
        HoldEnd = unchecked((int)0),
        Stop = unchecked((int)0x1),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.GravityConnectedAnimationConfiguration))]
    [global::ABI.Microsoft.UI.Xaml.Media.Animation.GravityConnectedAnimationConfigurationRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IGravityConnectedAnimationConfiguration))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public class GravityConnectedAnimationConfiguration : ConnectedAnimationConfiguration, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<GravityConnectedAnimationConfiguration>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IGravityConnectedAnimationConfiguration;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_Media_Animation_IGravityConnectedAnimationConfiguration()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IGravityConnectedAnimationConfiguration, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.Media.Animation.IGravityConnectedAnimationConfigurationMethods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IGravityConnectedAnimationConfiguration;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_IGravityConnectedAnimationConfiguration => ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IGravityConnectedAnimationConfiguration ?? Make___objRef_global__Microsoft_UI_Xaml_Media_Animation_IGravityConnectedAnimationConfiguration();



        private static class _IGravityConnectedAnimationConfigurationFactoryMethods
        {
            public static unsafe IntPtr CreateInstance(IObjectReference _obj, object baseInterface, out IntPtr innerInterface)
            {
                var ThisPtr = _obj.ThisPtr;

                ObjectReferenceValue __baseInterface = default;
                IntPtr __innerInterface = default;
                IntPtr __retval = default;
                try
                {
                    __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                    global::System.GC.KeepAlive(_obj);
                    innerInterface = __innerInterface;
                    return __retval;
                }
                finally
                {
                    MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                }
            }
        }

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IGravityConnectedAnimationConfigurationFactory;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_IGravityConnectedAnimationConfigurationFactory
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IGravityConnectedAnimationConfigurationFactory;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IGravityConnectedAnimationConfigurationFactory = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.GravityConnectedAnimationConfiguration", global::ABI.Microsoft.UI.Xaml.Media.Animation.IGravityConnectedAnimationConfigurationFactoryMethods.IID);
                }
            }
        }

        public GravityConnectedAnimationConfiguration():base(global::WinRT.DerivedComposed.Instance)
        {
            bool isAggregation = this.GetType() != typeof(GravityConnectedAnimationConfiguration);
            object baseInspectable = isAggregation ? this : null;
            IntPtr composed = _IGravityConnectedAnimationConfigurationFactoryMethods.CreateInstance(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IGravityConnectedAnimationConfigurationFactory,  baseInspectable, out IntPtr inner);
            try
            {
                ComWrappersHelper.Init(isAggregation, this, composed, inner, global::ABI.Microsoft.UI.Xaml.Media.Animation.IGravityConnectedAnimationConfigurationMethods.IID, out _inner);

            }
            finally
            {
                Marshal.Release(inner);   
            }
        }

        public static new GravityConnectedAnimationConfiguration FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<GravityConnectedAnimationConfiguration>.FromAbi(thisPtr);
        }

        protected internal GravityConnectedAnimationConfiguration(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Media.Animation.IGravityConnectedAnimationConfigurationMethods.IID);

        }


        public static bool operator ==(GravityConnectedAnimationConfiguration x, GravityConnectedAnimationConfiguration y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(GravityConnectedAnimationConfiguration x, GravityConnectedAnimationConfiguration y) => !(x == y);
        public bool Equals(GravityConnectedAnimationConfiguration other) => this == other;
        public override bool Equals(object obj) => obj is GravityConnectedAnimationConfiguration that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        protected GravityConnectedAnimationConfiguration(global::WinRT.DerivedComposed _):base(_)
        {

        }
        bool IWinRTObject.HasUnwrappableNativeObject => this.GetType() == typeof(GravityConnectedAnimationConfiguration);
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public bool IsShadowEnabled
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Animation.IGravityConnectedAnimationConfigurationMethods.get_IsShadowEnabled(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IGravityConnectedAnimationConfiguration);
            set => global::ABI.Microsoft.UI.Xaml.Media.Animation.IGravityConnectedAnimationConfigurationMethods.set_IsShadowEnabled(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IGravityConnectedAnimationConfiguration, value);
        }

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("3728595E-0EA2-524B-9348-86CFB860A0FF")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.IAddDeleteThemeTransition))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IAddDeleteThemeTransition
    {
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("1775BD43-1939-57CB-8C31-CD7590EC9543")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.IBackEase))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IBackEase
    {
        double Amplitude { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("1EAD2EF9-7901-542D-AE08-7B5937B32EF0")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.IBackEaseStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IBackEaseStatics
    {
        global::Microsoft.UI.Xaml.DependencyProperty AmplitudeProperty { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("7FF18AFE-91E8-52FA-A1C1-7B2C1A140118")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.IBasicConnectedAnimationConfiguration))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IBasicConnectedAnimationConfiguration
    {
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("2D156A02-0FB5-5AD1-AF9B-BC9C2720FECB")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.IBasicConnectedAnimationConfigurationFactory))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IBasicConnectedAnimationConfigurationFactory
    {
        BasicConnectedAnimationConfiguration CreateInstance(object baseInterface, out object innerInterface);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("BB364720-EE5A-5B32-91E2-62589729FD3A")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.IBeginStoryboard))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IBeginStoryboard
    {
        Storyboard Storyboard { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("4D5FDBEB-6B0E-5A8F-A8F0-01F438DF8FB2")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.IBeginStoryboardStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IBeginStoryboardStatics
    {
        global::Microsoft.UI.Xaml.DependencyProperty StoryboardProperty { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("C138BFFF-87C8-5C60-B280-682A499C58C3")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.IBounceEase))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IBounceEase
    {
        int Bounces { get; set; }
        double Bounciness { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("D7716B38-C705-5093-96D6-735C13105A30")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.IBounceEaseStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IBounceEaseStatics
    {
        global::Microsoft.UI.Xaml.DependencyProperty BouncesProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty BouncinessProperty { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("88209080-2929-5924-9B52-F95196568713")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.ICircleEase))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface ICircleEase
    {
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("6DF862D2-65F2-53A8-8B1B-1B6C1763C175")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.IColorAnimation))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IColorAnimation
    {
        global::System.Nullable<global::Windows.UI.Color> By { get; set; }
        EasingFunctionBase EasingFunction { get; set; }
        bool EnableDependentAnimation { get; set; }
        global::System.Nullable<global::Windows.UI.Color> From { get; set; }
        global::System.Nullable<global::Windows.UI.Color> To { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("99AEBE0F-928E-52CB-842F-F43FE660FF06")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.IColorAnimationStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IColorAnimationStatics
    {
        global::Microsoft.UI.Xaml.DependencyProperty ByProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty EasingFunctionProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty EnableDependentAnimationProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty FromProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty ToProperty { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("96F28C97-67EB-5393-8E37-A81D8FDA18B3")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.IColorAnimationUsingKeyFrames))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IColorAnimationUsingKeyFrames
    {
        bool EnableDependentAnimation { get; set; }
        ColorKeyFrameCollection KeyFrames { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("5B0F4840-0EF7-5AD7-A8F2-D49424ED906F")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.IColorAnimationUsingKeyFramesStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IColorAnimationUsingKeyFramesStatics
    {
        global::Microsoft.UI.Xaml.DependencyProperty EnableDependentAnimationProperty { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("02848C7E-C772-5F66-842B-FD494D0DA669")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.IColorKeyFrame))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IColorKeyFrame
    {
        KeyTime KeyTime { get; set; }
        global::Windows.UI.Color Value { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("A82CC182-9D80-508C-B962-D74225587200")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.IColorKeyFrameFactory))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IColorKeyFrameFactory
    {
        ColorKeyFrame CreateInstance(object baseInterface, out object innerInterface);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("B62FDD68-15C7-5C6C-A4FA-0CEE10E04556")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.IColorKeyFrameStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IColorKeyFrameStatics
    {
        global::Microsoft.UI.Xaml.DependencyProperty KeyTimeProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty ValueProperty { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("B21CC95F-9E3D-540A-B35A-17B99DC41B1E")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.ICommonNavigationTransitionInfo))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface ICommonNavigationTransitionInfo
    {
        bool IsStaggeringEnabled { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("20020BE1-C1BA-59F5-997A-C04F5E3833B0")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.ICommonNavigationTransitionInfoStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface ICommonNavigationTransitionInfoStatics
    {
        bool GetIsStaggerElement(global::Microsoft.UI.Xaml.UIElement element);
        void SetIsStaggerElement(global::Microsoft.UI.Xaml.UIElement element, bool value);
        global::Microsoft.UI.Xaml.DependencyProperty IsStaggerElementProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty IsStaggeringEnabledProperty { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("A9C1C6AD-7670-589C-A608-9B5C01CEC71F")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.IConnectedAnimation))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IConnectedAnimation
    {
        [global::Windows.Foundation.Metadata.Overload(@"TryStart")]
        bool TryStart(global::Microsoft.UI.Xaml.UIElement destination);
        [global::Windows.Foundation.Metadata.Overload(@"TryStartWithCoordinatedElements")]
        bool TryStart(global::Microsoft.UI.Xaml.UIElement destination, global::System.Collections.Generic.IEnumerable<global::Microsoft.UI.Xaml.UIElement> coordinatedElements);
        void Cancel();
        void SetAnimationComponent(ConnectedAnimationComponent component, global::Microsoft.UI.Composition.ICompositionAnimationBase animation);
        ConnectedAnimationConfiguration Configuration { get; set; }
        bool IsScaleAnimationEnabled { get; set; }
        event global::Windows.Foundation.TypedEventHandler<ConnectedAnimation, object> Completed;
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("E848379D-7E25-5976-BFB3-086BAC4E8849")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.IConnectedAnimationConfiguration))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IConnectedAnimationConfiguration
    {
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("71008845-4A12-5A1A-969C-4152B5174922")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.IConnectedAnimationConfigurationFactory))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IConnectedAnimationConfigurationFactory
    {
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("85F72163-C3C8-586A-91FE-3E0315A3A4FC")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.IConnectedAnimationService))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IConnectedAnimationService
    {
        ConnectedAnimation PrepareToAnimate(string key, global::Microsoft.UI.Xaml.UIElement source);
        ConnectedAnimation GetAnimation(string key);
        global::System.TimeSpan DefaultDuration { get; set; }
        global::Microsoft.UI.Composition.CompositionEasingFunction DefaultEasingFunction { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("F30AD68D-3426-5564-92C6-288B819E652A")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.IConnectedAnimationServiceStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IConnectedAnimationServiceStatics
    {
        ConnectedAnimationService GetForCurrentView();
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("DFF47071-CC51-556C-A3FE-8BBB4CBA6195")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.IContentThemeTransition))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IContentThemeTransition
    {
        double HorizontalOffset { get; set; }
        double VerticalOffset { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("95CDA8B1-6667-56E3-BE40-866EEF53663C")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.IContentThemeTransitionStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IContentThemeTransitionStatics
    {
        global::Microsoft.UI.Xaml.DependencyProperty HorizontalOffsetProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty VerticalOffsetProperty { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("C55DA70F-FF2A-5FC3-81C5-9670F4D78752")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.IContinuumNavigationTransitionInfo))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IContinuumNavigationTransitionInfo
    {
        global::Microsoft.UI.Xaml.UIElement ExitElement { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("CA9006FD-F513-5F34-AD7F-49F9D7A99432")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.IContinuumNavigationTransitionInfoStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IContinuumNavigationTransitionInfoStatics
    {
        bool GetIsEntranceElement(global::Microsoft.UI.Xaml.UIElement element);
        void SetIsEntranceElement(global::Microsoft.UI.Xaml.UIElement element, bool value);
        bool GetIsExitElement(global::Microsoft.UI.Xaml.UIElement element);
        void SetIsExitElement(global::Microsoft.UI.Xaml.UIElement element, bool value);
        bool GetExitElementContainer(global::Microsoft.UI.Xaml.Controls.ListViewBase element);
        void SetExitElementContainer(global::Microsoft.UI.Xaml.Controls.ListViewBase element, bool value);
        global::Microsoft.UI.Xaml.DependencyProperty ExitElementContainerProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty ExitElementProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty IsEntranceElementProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty IsExitElementProperty { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("01A218B4-EB7E-54F9-BFB6-C6EE128013D2")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.ICubicEase))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface ICubicEase
    {
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("44F192EB-CC11-545E-8FA2-1F0EC9C4438A")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.IDirectConnectedAnimationConfiguration))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IDirectConnectedAnimationConfiguration
    {
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("604ABA9B-4EB8-5310-91DC-30962E25AB00")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.IDirectConnectedAnimationConfigurationFactory))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IDirectConnectedAnimationConfigurationFactory
    {
        DirectConnectedAnimationConfiguration CreateInstance(object baseInterface, out object innerInterface);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("9B3D88A7-31D3-5912-8646-641A8A565CA1")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.IDiscreteColorKeyFrame))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IDiscreteColorKeyFrame
    {
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("EC16A555-C083-5A18-805B-A14B90BC80E2")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.IDiscreteDoubleKeyFrame))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IDiscreteDoubleKeyFrame
    {
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("542FA813-6892-559D-9F69-1F2AC666AF13")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.IDiscreteObjectKeyFrame))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IDiscreteObjectKeyFrame
    {
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("2255A291-007E-57CE-AA53-97D1E4A0D7E2")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.IDiscretePointKeyFrame))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IDiscretePointKeyFrame
    {
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("651EC97E-E483-5985-AA0B-49CFB07432DD")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.IDoubleAnimation))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IDoubleAnimation
    {
        global::System.Nullable<double> By { get; set; }
        EasingFunctionBase EasingFunction { get; set; }
        bool EnableDependentAnimation { get; set; }
        global::System.Nullable<double> From { get; set; }
        global::System.Nullable<double> To { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("4E098387-ADC6-5549-AD21-633E4FA244C2")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.IDoubleAnimationStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IDoubleAnimationStatics
    {
        global::Microsoft.UI.Xaml.DependencyProperty ByProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty EasingFunctionProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty EnableDependentAnimationProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty FromProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty ToProperty { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("815437D5-63CF-54A5-AEA5-24B84708D12D")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.IDoubleAnimationUsingKeyFrames))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IDoubleAnimationUsingKeyFrames
    {
        bool EnableDependentAnimation { get; set; }
        DoubleKeyFrameCollection KeyFrames { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("4C1C9BF1-3A03-5689-B18F-6C44251E13D9")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.IDoubleAnimationUsingKeyFramesStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IDoubleAnimationUsingKeyFramesStatics
    {
        global::Microsoft.UI.Xaml.DependencyProperty EnableDependentAnimationProperty { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("94C82AE6-CA62-5F52-934C-3E427E75D69A")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.IDoubleKeyFrame))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IDoubleKeyFrame
    {
        KeyTime KeyTime { get; set; }
        double Value { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("2D492CB3-F488-5D30-B00C-B6F2547D0EFE")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.IDoubleKeyFrameFactory))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IDoubleKeyFrameFactory
    {
        DoubleKeyFrame CreateInstance(object baseInterface, out object innerInterface);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("0E56914C-B430-538F-BB66-0B8E83AB3DB6")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.IDoubleKeyFrameStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IDoubleKeyFrameStatics
    {
        global::Microsoft.UI.Xaml.DependencyProperty KeyTimeProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty ValueProperty { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("648E690E-A2C0-58CA-B15D-DB6FCCC663F2")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.IDragItemThemeAnimation))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IDragItemThemeAnimation
    {
        string TargetName { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("CDBDB41A-CE84-50A1-8B96-96599CD9619D")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.IDragItemThemeAnimationStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IDragItemThemeAnimationStatics
    {
        global::Microsoft.UI.Xaml.DependencyProperty TargetNameProperty { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("633CD3C0-71AF-52FD-993E-504E3E6F56D4")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.IDragOverThemeAnimation))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IDragOverThemeAnimation
    {
        global::Microsoft.UI.Xaml.Controls.Primitives.AnimationDirection Direction { get; set; }
        string TargetName { get; set; }
        double ToOffset { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("8301AFD2-68B2-5C6C-AADF-9A98D620E8D2")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.IDragOverThemeAnimationStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IDragOverThemeAnimationStatics
    {
        global::Microsoft.UI.Xaml.DependencyProperty DirectionProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty TargetNameProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty ToOffsetProperty { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("5D5863D6-4BBF-5B30-94FA-034531CFA2AA")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.IDrillInNavigationTransitionInfo))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IDrillInNavigationTransitionInfo
    {
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("097577E0-3027-5F24-AF8C-976D9FAED830")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.IDrillInThemeAnimation))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IDrillInThemeAnimation
    {
        global::Microsoft.UI.Xaml.DependencyObject EntranceTarget { get; set; }
        string EntranceTargetName { get; set; }
        global::Microsoft.UI.Xaml.DependencyObject ExitTarget { get; set; }
        string ExitTargetName { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("BA24258E-3A8E-5804-915A-7670893DBEA4")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.IDrillInThemeAnimationStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IDrillInThemeAnimationStatics
    {
        global::Microsoft.UI.Xaml.DependencyProperty EntranceTargetNameProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty EntranceTargetProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty ExitTargetNameProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty ExitTargetProperty { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("9A93B9CC-925F-525A-9EAC-55D39DB3D314")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.IDrillOutThemeAnimation))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IDrillOutThemeAnimation
    {
        global::Microsoft.UI.Xaml.DependencyObject EntranceTarget { get; set; }
        string EntranceTargetName { get; set; }
        global::Microsoft.UI.Xaml.DependencyObject ExitTarget { get; set; }
        string ExitTargetName { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("6EB9693B-C0D0-5BAE-9CD2-10D80B8D3867")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.IDrillOutThemeAnimationStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IDrillOutThemeAnimationStatics
    {
        global::Microsoft.UI.Xaml.DependencyProperty EntranceTargetNameProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty EntranceTargetProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty ExitTargetNameProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty ExitTargetProperty { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("B97F19C0-F1E2-5705-A252-2DB05D2E5A54")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.IDropTargetItemThemeAnimation))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IDropTargetItemThemeAnimation
    {
        string TargetName { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("A0CE9E16-AE12-55FC-A9E5-29DC94A713BD")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.IDropTargetItemThemeAnimationStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IDropTargetItemThemeAnimationStatics
    {
        global::Microsoft.UI.Xaml.DependencyProperty TargetNameProperty { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("A137A710-DA3C-5426-A1A2-3A5A672A4264")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.IEasingColorKeyFrame))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IEasingColorKeyFrame
    {
        EasingFunctionBase EasingFunction { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("C57818C0-3361-587D-B381-620B69251BCF")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.IEasingColorKeyFrameStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IEasingColorKeyFrameStatics
    {
        global::Microsoft.UI.Xaml.DependencyProperty EasingFunctionProperty { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("935D9B7E-DA61-5BB2-A574-7D2E53B60561")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.IEasingDoubleKeyFrame))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IEasingDoubleKeyFrame
    {
        EasingFunctionBase EasingFunction { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("8CC08735-4221-5127-AB2F-1E7E3DF95FB9")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.IEasingDoubleKeyFrameStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IEasingDoubleKeyFrameStatics
    {
        global::Microsoft.UI.Xaml.DependencyProperty EasingFunctionProperty { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("4FAB519A-A93D-5D28-AF18-84532BD32EFE")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.IEasingFunctionBase))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IEasingFunctionBase
    {
        double Ease(double normalizedTime);
        EasingMode EasingMode { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("B1B92F4C-5EC7-5CDA-B1D4-FD159595CA47")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.IEasingFunctionBaseFactory))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IEasingFunctionBaseFactory
    {
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("09032445-967C-52B8-B712-15F066B32821")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.IEasingFunctionBaseStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IEasingFunctionBaseStatics
    {
        global::Microsoft.UI.Xaml.DependencyProperty EasingModeProperty { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("9406EE8E-3641-54FE-A424-83420EA45CD3")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.IEasingPointKeyFrame))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IEasingPointKeyFrame
    {
        EasingFunctionBase EasingFunction { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("AC727659-92A3-52EA-8949-B609E48C233D")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.IEasingPointKeyFrameStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IEasingPointKeyFrameStatics
    {
        global::Microsoft.UI.Xaml.DependencyProperty EasingFunctionProperty { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("57089964-E358-5FE2-84E7-15E82BBA9C06")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.IEdgeUIThemeTransition))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IEdgeUIThemeTransition
    {
        global::Microsoft.UI.Xaml.Controls.Primitives.EdgeTransitionLocation Edge { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("316AF8D4-D2A0-5D27-9AF6-747797965D46")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.IEdgeUIThemeTransitionStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IEdgeUIThemeTransitionStatics
    {
        global::Microsoft.UI.Xaml.DependencyProperty EdgeProperty { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("2B18D50B-4D34-509B-915C-61B1AA6F83D8")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.IElasticEase))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IElasticEase
    {
        int Oscillations { get; set; }
        double Springiness { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("95FD9290-D279-5857-9F50-3F299A2D02F4")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.IElasticEaseStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IElasticEaseStatics
    {
        global::Microsoft.UI.Xaml.DependencyProperty OscillationsProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty SpringinessProperty { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("DEC74921-0ED7-54E1-8C1D-30B8CCCC4B8D")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.IEntranceNavigationTransitionInfo))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IEntranceNavigationTransitionInfo
    {
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("F1096DE1-1F79-5D38-A4D6-16F3BDAAB7F0")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.IEntranceNavigationTransitionInfoStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IEntranceNavigationTransitionInfoStatics
    {
        bool GetIsTargetElement(global::Microsoft.UI.Xaml.UIElement element);
        void SetIsTargetElement(global::Microsoft.UI.Xaml.UIElement element, bool value);
        global::Microsoft.UI.Xaml.DependencyProperty IsTargetElementProperty { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("8EB681FA-1629-5E29-AC1E-70F3639329F8")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.IEntranceThemeTransition))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IEntranceThemeTransition
    {
        double FromHorizontalOffset { get; set; }
        double FromVerticalOffset { get; set; }
        bool IsStaggeringEnabled { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("C99E5435-FACC-50AF-B96C-63B14FE7156E")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.IEntranceThemeTransitionStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IEntranceThemeTransitionStatics
    {
        global::Microsoft.UI.Xaml.DependencyProperty FromHorizontalOffsetProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty FromVerticalOffsetProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty IsStaggeringEnabledProperty { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("4D289262-E832-5FBC-A98B-87A6ECB3B6CC")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.IExponentialEase))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IExponentialEase
    {
        double Exponent { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("8394AB8F-DDF1-55D0-ACF1-07FEDD929BB5")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.IExponentialEaseStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IExponentialEaseStatics
    {
        global::Microsoft.UI.Xaml.DependencyProperty ExponentProperty { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("0DCA074A-31CC-5E70-8B6B-8DBD7FFF01F6")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.IFadeInThemeAnimation))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IFadeInThemeAnimation
    {
        string TargetName { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("5D74A6A6-92C6-5E49-865F-676087247179")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.IFadeInThemeAnimationStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IFadeInThemeAnimationStatics
    {
        global::Microsoft.UI.Xaml.DependencyProperty TargetNameProperty { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("114024D6-5D67-5C9C-83C5-54A8BD7B671A")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.IFadeOutThemeAnimation))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IFadeOutThemeAnimation
    {
        string TargetName { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("0277BEA1-A0A5-5E26-9B56-6A4208862738")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.IFadeOutThemeAnimationStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IFadeOutThemeAnimationStatics
    {
        global::Microsoft.UI.Xaml.DependencyProperty TargetNameProperty { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("04C8B276-CFF3-5A55-9229-33DC66C99E20")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.IGravityConnectedAnimationConfiguration))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IGravityConnectedAnimationConfiguration
    {
        bool IsShadowEnabled { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("BC7A71B5-7CDA-5BB7-967E-D6A031285A9C")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.IGravityConnectedAnimationConfigurationFactory))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IGravityConnectedAnimationConfigurationFactory
    {
        GravityConnectedAnimationConfiguration CreateInstance(object baseInterface, out object innerInterface);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("130D8B2B-0B52-5253-881B-36AB48592E6B")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.IKeySpline))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IKeySpline
    {
        global::Windows.Foundation.Point ControlPoint1 { get; set; }
        global::Windows.Foundation.Point ControlPoint2 { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("0BCE4CD6-3A80-5F2F-932E-619A8546D0BD")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.ILinearColorKeyFrame))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface ILinearColorKeyFrame
    {
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("38A635B9-F613-55E0-AAEC-9D4E097EFF91")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.ILinearDoubleKeyFrame))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface ILinearDoubleKeyFrame
    {
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("4EC22493-BACB-5105-AC16-8EA5418AB76E")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.ILinearPointKeyFrame))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface ILinearPointKeyFrame
    {
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("D7CFBD3B-0D27-5EA1-BEB7-F6B847520DC6")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.INavigationThemeTransition))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface INavigationThemeTransition
    {
        NavigationTransitionInfo DefaultNavigationTransitionInfo { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("78323EFF-D543-551D-B2C7-94E93A16065B")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.INavigationThemeTransitionStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface INavigationThemeTransitionStatics
    {
        global::Microsoft.UI.Xaml.DependencyProperty DefaultNavigationTransitionInfoProperty { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("25BB17FB-6E15-514E-B278-197537A4D990")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.INavigationTransitionInfo))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface INavigationTransitionInfo
    {
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("C514B6FF-F6ED-572E-8392-3EA17BC7D4C4")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.INavigationTransitionInfoFactory))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface INavigationTransitionInfoFactory
    {
        NavigationTransitionInfo CreateInstance(object baseInterface, out object innerInterface);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("3D6AF190-5A56-513D-AFF9-631925D0FA43")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.INavigationTransitionInfoOverrides))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface INavigationTransitionInfoOverrides
    {
        string GetNavigationStateCore();
        void SetNavigationStateCore(string navigationState);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("AA08DC4C-0B03-5C0A-B084-D95D272B2F0D")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.IObjectAnimationUsingKeyFrames))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IObjectAnimationUsingKeyFrames
    {
        bool EnableDependentAnimation { get; set; }
        ObjectKeyFrameCollection KeyFrames { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("411A09B0-9AB4-54B9-99B9-54F955A6754E")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.IObjectAnimationUsingKeyFramesStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IObjectAnimationUsingKeyFramesStatics
    {
        global::Microsoft.UI.Xaml.DependencyProperty EnableDependentAnimationProperty { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("C5A9F65B-FC69-5A88-A797-34F46D761381")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.IObjectKeyFrame))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IObjectKeyFrame
    {
        KeyTime KeyTime { get; set; }
        object Value { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("DC59DA6E-82B9-55F7-A358-BA2A07665AA9")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.IObjectKeyFrameFactory))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IObjectKeyFrameFactory
    {
        ObjectKeyFrame CreateInstance(object baseInterface, out object innerInterface);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("39E59CEB-2859-5A5F-ACD8-BC491D49C4B6")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.IObjectKeyFrameStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IObjectKeyFrameStatics
    {
        global::Microsoft.UI.Xaml.DependencyProperty KeyTimeProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty ValueProperty { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("321BCD80-157C-5E10-B0FE-6440BD92529A")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.IPaneThemeTransition))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IPaneThemeTransition
    {
        global::Microsoft.UI.Xaml.Controls.Primitives.EdgeTransitionLocation Edge { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("47E01752-5264-5FB1-8946-AB49FE6AF8FD")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.IPaneThemeTransitionStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IPaneThemeTransitionStatics
    {
        global::Microsoft.UI.Xaml.DependencyProperty EdgeProperty { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("A0737CC4-2EAB-5C13-A5D7-78361DF1000E")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.IPointAnimation))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IPointAnimation
    {
        global::System.Nullable<global::Windows.Foundation.Point> By { get; set; }
        EasingFunctionBase EasingFunction { get; set; }
        bool EnableDependentAnimation { get; set; }
        global::System.Nullable<global::Windows.Foundation.Point> From { get; set; }
        global::System.Nullable<global::Windows.Foundation.Point> To { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("71CFB43B-BADA-554B-8FCA-B558D623BBC0")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.IPointAnimationStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IPointAnimationStatics
    {
        global::Microsoft.UI.Xaml.DependencyProperty ByProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty EasingFunctionProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty EnableDependentAnimationProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty FromProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty ToProperty { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("BDD63992-DF13-5514-8611-4952F722F6D0")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.IPointAnimationUsingKeyFrames))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IPointAnimationUsingKeyFrames
    {
        bool EnableDependentAnimation { get; set; }
        PointKeyFrameCollection KeyFrames { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("04152B3B-F0DA-5B28-877D-9AC96D334A77")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.IPointAnimationUsingKeyFramesStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IPointAnimationUsingKeyFramesStatics
    {
        global::Microsoft.UI.Xaml.DependencyProperty EnableDependentAnimationProperty { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("59D5C07D-A3A7-5450-9DFB-4B7E77D58F93")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.IPointKeyFrame))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IPointKeyFrame
    {
        KeyTime KeyTime { get; set; }
        global::Windows.Foundation.Point Value { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("C52EE293-F10E-5252-BC08-A28659740F0E")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.IPointKeyFrameFactory))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IPointKeyFrameFactory
    {
        PointKeyFrame CreateInstance(object baseInterface, out object innerInterface);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("96CD72FD-D834-5B23-9A17-1548961DC348")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.IPointKeyFrameStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IPointKeyFrameStatics
    {
        global::Microsoft.UI.Xaml.DependencyProperty KeyTimeProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty ValueProperty { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("ABDD1ACC-40DF-595D-BE68-0362FE681B91")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.IPointerDownThemeAnimation))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IPointerDownThemeAnimation
    {
        string TargetName { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("12268B39-FB7D-53DA-8CCC-5967DC06BCE9")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.IPointerDownThemeAnimationStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IPointerDownThemeAnimationStatics
    {
        global::Microsoft.UI.Xaml.DependencyProperty TargetNameProperty { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("94896D1C-C938-5D68-84DA-552BDE815810")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.IPointerUpThemeAnimation))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IPointerUpThemeAnimation
    {
        string TargetName { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("51A3117E-C6FA-5DC5-8DB8-73F060003AE4")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.IPointerUpThemeAnimationStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IPointerUpThemeAnimationStatics
    {
        global::Microsoft.UI.Xaml.DependencyProperty TargetNameProperty { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("20136388-B4E4-5CBB-9CB2-DF2EA7E6C44B")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.IPopInThemeAnimation))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IPopInThemeAnimation
    {
        double FromHorizontalOffset { get; set; }
        double FromVerticalOffset { get; set; }
        string TargetName { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("8C9378A9-D276-5A1D-8188-F48F07840A16")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.IPopInThemeAnimationStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IPopInThemeAnimationStatics
    {
        global::Microsoft.UI.Xaml.DependencyProperty FromHorizontalOffsetProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty FromVerticalOffsetProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty TargetNameProperty { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("1BB20DD3-5648-541A-A0C9-37A955DB10A6")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.IPopOutThemeAnimation))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IPopOutThemeAnimation
    {
        string TargetName { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("3F569F96-367E-595C-9732-2FB919388D84")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.IPopOutThemeAnimationStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IPopOutThemeAnimationStatics
    {
        global::Microsoft.UI.Xaml.DependencyProperty TargetNameProperty { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("E1FA6B8A-ADD3-5299-A000-121D6DBACC80")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.IPopupThemeTransition))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IPopupThemeTransition
    {
        double FromHorizontalOffset { get; set; }
        double FromVerticalOffset { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("538B2114-415C-5F99-B74D-A85966DACC54")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.IPopupThemeTransitionStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IPopupThemeTransitionStatics
    {
        global::Microsoft.UI.Xaml.DependencyProperty FromHorizontalOffsetProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty FromVerticalOffsetProperty { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("372DFAD0-5177-5DF9-8E1E-920962468714")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.IPowerEase))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IPowerEase
    {
        double Power { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("8EB72EDB-3E7E-5D40-928B-4505D57C21CE")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.IPowerEaseStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IPowerEaseStatics
    {
        global::Microsoft.UI.Xaml.DependencyProperty PowerProperty { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("DB85FDA1-03B7-57CD-A1EF-8855CBF62191")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.IQuadraticEase))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IQuadraticEase
    {
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("48215273-05F1-58AA-BADE-0B71D7BD0484")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.IQuarticEase))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IQuarticEase
    {
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("DC2F05D5-A3AC-5DCE-9B85-753A0C800FC2")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.IQuinticEase))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IQuinticEase
    {
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("0D5A0874-1DF5-5379-B626-74721759438A")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.IReorderThemeTransition))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IReorderThemeTransition
    {
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("36F7E025-23C1-53DE-8DF9-7DC1E9C788FD")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.IRepositionThemeAnimation))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IRepositionThemeAnimation
    {
        double FromHorizontalOffset { get; set; }
        double FromVerticalOffset { get; set; }
        string TargetName { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("C04118DE-AFF5-5FA9-AEE7-94A621C82618")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.IRepositionThemeAnimationStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IRepositionThemeAnimationStatics
    {
        global::Microsoft.UI.Xaml.DependencyProperty FromHorizontalOffsetProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty FromVerticalOffsetProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty TargetNameProperty { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("7728E3F0-24B1-5484-824A-C0B41C2745D5")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.IRepositionThemeTransition))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IRepositionThemeTransition
    {
        bool IsStaggeringEnabled { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("C70A0F9A-485E-53BB-AD3C-8B41B6788BF9")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.IRepositionThemeTransitionStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IRepositionThemeTransitionStatics
    {
        global::Microsoft.UI.Xaml.DependencyProperty IsStaggeringEnabledProperty { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("6115539B-663D-5131-B7C2-74BB5FDC6A1D")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.ISineEase))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface ISineEase
    {
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("53EADE0E-6B01-511F-A563-6F5724A6C1C1")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.ISlideNavigationTransitionInfo))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface ISlideNavigationTransitionInfo
    {
        SlideNavigationTransitionEffect Effect { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("90BA0C6C-CD45-5A6C-BBB2-88037D43CD79")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.ISlideNavigationTransitionInfoStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface ISlideNavigationTransitionInfoStatics
    {
        global::Microsoft.UI.Xaml.DependencyProperty EffectProperty { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("60C5905F-4343-504D-A2C6-64B8D924B438")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.ISplineColorKeyFrame))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface ISplineColorKeyFrame
    {
        KeySpline KeySpline { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("D89C7062-753D-5652-B215-C195AE2C7A18")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.ISplineColorKeyFrameStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface ISplineColorKeyFrameStatics
    {
        global::Microsoft.UI.Xaml.DependencyProperty KeySplineProperty { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("AEA80957-BB56-59B6-BB7A-6295F94BC961")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.ISplineDoubleKeyFrame))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface ISplineDoubleKeyFrame
    {
        KeySpline KeySpline { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("CA88552E-7237-51F8-A8CA-79952C77883A")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.ISplineDoubleKeyFrameStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface ISplineDoubleKeyFrameStatics
    {
        global::Microsoft.UI.Xaml.DependencyProperty KeySplineProperty { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("2B7EB049-708C-5220-A178-A25DBC14FFBE")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.ISplinePointKeyFrame))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface ISplinePointKeyFrame
    {
        KeySpline KeySpline { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("1E100E36-BED1-5060-8DCF-0D5B32575ED1")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.ISplinePointKeyFrameStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface ISplinePointKeyFrameStatics
    {
        global::Microsoft.UI.Xaml.DependencyProperty KeySplineProperty { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("B0DD1490-F646-5C18-B3EF-02F9B17F57DF")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.ISplitCloseThemeAnimation))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface ISplitCloseThemeAnimation
    {
        double ClosedLength { get; set; }
        global::Microsoft.UI.Xaml.DependencyObject ClosedTarget { get; set; }
        string ClosedTargetName { get; set; }
        global::Microsoft.UI.Xaml.DependencyObject ContentTarget { get; set; }
        string ContentTargetName { get; set; }
        global::Microsoft.UI.Xaml.Controls.Primitives.AnimationDirection ContentTranslationDirection { get; set; }
        double ContentTranslationOffset { get; set; }
        double OffsetFromCenter { get; set; }
        double OpenedLength { get; set; }
        global::Microsoft.UI.Xaml.DependencyObject OpenedTarget { get; set; }
        string OpenedTargetName { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("32345CDD-2A3C-5571-B2EB-2FCABC2E92C6")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.ISplitCloseThemeAnimationStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface ISplitCloseThemeAnimationStatics
    {
        global::Microsoft.UI.Xaml.DependencyProperty ClosedLengthProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty ClosedTargetNameProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty ClosedTargetProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty ContentTargetNameProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty ContentTargetProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty ContentTranslationDirectionProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty ContentTranslationOffsetProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty OffsetFromCenterProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty OpenedLengthProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty OpenedTargetNameProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty OpenedTargetProperty { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("79FDFACA-4245-53F0-B5C7-DA1CE2B0B851")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.ISplitOpenThemeAnimation))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface ISplitOpenThemeAnimation
    {
        double ClosedLength { get; set; }
        global::Microsoft.UI.Xaml.DependencyObject ClosedTarget { get; set; }
        string ClosedTargetName { get; set; }
        global::Microsoft.UI.Xaml.DependencyObject ContentTarget { get; set; }
        string ContentTargetName { get; set; }
        global::Microsoft.UI.Xaml.Controls.Primitives.AnimationDirection ContentTranslationDirection { get; set; }
        double ContentTranslationOffset { get; set; }
        double OffsetFromCenter { get; set; }
        double OpenedLength { get; set; }
        global::Microsoft.UI.Xaml.DependencyObject OpenedTarget { get; set; }
        string OpenedTargetName { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("E5A73B84-A4AE-5C38-84DA-F7ED30FC9B6E")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.ISplitOpenThemeAnimationStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface ISplitOpenThemeAnimationStatics
    {
        global::Microsoft.UI.Xaml.DependencyProperty ClosedLengthProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty ClosedTargetNameProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty ClosedTargetProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty ContentTargetNameProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty ContentTargetProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty ContentTranslationDirectionProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty ContentTranslationOffsetProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty OffsetFromCenterProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty OpenedLengthProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty OpenedTargetNameProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty OpenedTargetProperty { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("04D41BB3-8721-519E-8E53-FB8B34920305")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.IStoryboard))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IStoryboard
    {
        void Seek(global::System.TimeSpan offset);
        void Stop();
        void Begin();
        void Pause();
        void Resume();
        ClockState GetCurrentState();
        global::System.TimeSpan GetCurrentTime();
        void SeekAlignedToLastTick(global::System.TimeSpan offset);
        void SkipToFill();
        TimelineCollection Children { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("DD18519B-D4E4-597D-A0B7-655EBDD35EFA")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.IStoryboardStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IStoryboardStatics
    {
        string GetTargetProperty(Timeline element);
        void SetTargetProperty(Timeline element, string path);
        string GetTargetName(Timeline element);
        void SetTargetName(Timeline element, string name);
        void SetTarget(Timeline timeline, global::Microsoft.UI.Xaml.DependencyObject target);
        global::Microsoft.UI.Xaml.DependencyProperty TargetNameProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty TargetPropertyProperty { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("3ECD2BD1-9805-5F51-BB9E-051FEA8DC355")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.ISuppressNavigationTransitionInfo))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface ISuppressNavigationTransitionInfo
    {
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("F095D058-BC9E-58EE-8877-E084723B4333")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.ISwipeBackThemeAnimation))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface ISwipeBackThemeAnimation
    {
        double FromHorizontalOffset { get; set; }
        double FromVerticalOffset { get; set; }
        string TargetName { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("18A7A588-B9A2-573B-8E2B-38048C4635A7")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.ISwipeBackThemeAnimationStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface ISwipeBackThemeAnimationStatics
    {
        global::Microsoft.UI.Xaml.DependencyProperty FromHorizontalOffsetProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty FromVerticalOffsetProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty TargetNameProperty { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("09DE03D7-4B8A-55E1-AFAD-5F60598733EA")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.ISwipeHintThemeAnimation))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface ISwipeHintThemeAnimation
    {
        string TargetName { get; set; }
        double ToHorizontalOffset { get; set; }
        double ToVerticalOffset { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("F3308304-4F09-54D7-A4D5-CA558BBFE26F")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.ISwipeHintThemeAnimationStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface ISwipeHintThemeAnimationStatics
    {
        global::Microsoft.UI.Xaml.DependencyProperty TargetNameProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty ToHorizontalOffsetProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty ToVerticalOffsetProperty { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("D0F9B330-CC2A-5B05-9786-2DA4C6584581")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.ITimeline))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface ITimeline
    {
        bool AutoReverse { get; set; }
        global::System.Nullable<global::System.TimeSpan> BeginTime { get; set; }
        global::Microsoft.UI.Xaml.Duration Duration { get; set; }
        FillBehavior FillBehavior { get; set; }
        RepeatBehavior RepeatBehavior { get; set; }
        double SpeedRatio { get; set; }
        event global::System.EventHandler<object> Completed;
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("6A635732-A827-5398-9FC8-DFBC3B97E3C1")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.ITimelineFactory))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface ITimelineFactory
    {
        Timeline CreateInstance(object baseInterface, out object innerInterface);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("778B8471-C831-503A-8748-FE6BBC7153B7")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.ITimelineStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface ITimelineStatics
    {
        bool AllowDependentAnimations { get; set; }
        global::Microsoft.UI.Xaml.DependencyProperty AutoReverseProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty BeginTimeProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty DurationProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty FillBehaviorProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty RepeatBehaviorProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty SpeedRatioProperty { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("E5B71956-8E44-5A38-B41E-274D706102BF")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.ITransition))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface ITransition
    {
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("B7023E3B-BCD3-50EC-AACF-8CFCECE25F17")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.ITransitionFactory))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface ITransitionFactory
    {
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][global::System.AttributeUsage(global::System.AttributeTargets.Property, AllowMultiple = false)]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class IndependentlyAnimatableAttribute: Attribute
    {
        public IndependentlyAnimatableAttribute(){}
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.KeySpline))]
    [global::ABI.Microsoft.UI.Xaml.Media.Animation.KeySplineRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IKeySpline))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class KeySpline : global::Microsoft.UI.Xaml.DependencyObject, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<KeySpline>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_IKeySpline => _inner;


        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_KeySpline;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_KeySpline
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_KeySpline;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_KeySpline = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.KeySpline");
                }
            }
        }

        public KeySpline() :base(global::WinRT.DerivedComposed.Instance)
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Xaml_Media_Animation_KeySpline, global::ABI.Microsoft.UI.Xaml.Media.Animation.IKeySplineMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static new KeySpline FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<KeySpline>.FromAbi(thisPtr);
        }

        internal KeySpline(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Media.Animation.IKeySplineMethods.IID);

        }


        public static bool operator ==(KeySpline x, KeySpline y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(KeySpline x, KeySpline y) => !(x == y);
        public bool Equals(KeySpline other) => this == other;
        public override bool Equals(object obj) => obj is KeySpline that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public global::Windows.Foundation.Point ControlPoint1
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Animation.IKeySplineMethods.get_ControlPoint1(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IKeySpline);
            set => global::ABI.Microsoft.UI.Xaml.Media.Animation.IKeySplineMethods.set_ControlPoint1(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IKeySpline, value);
        }

        public global::Windows.Foundation.Point ControlPoint2
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Animation.IKeySplineMethods.get_ControlPoint2(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IKeySpline);
            set => global::ABI.Microsoft.UI.Xaml.Media.Animation.IKeySplineMethods.set_ControlPoint2(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IKeySpline, value);
        }

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.LinearColorKeyFrame))]
    [global::ABI.Microsoft.UI.Xaml.Media.Animation.LinearColorKeyFrameRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ILinearColorKeyFrame))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class LinearColorKeyFrame : ColorKeyFrame, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<LinearColorKeyFrame>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_ILinearColorKeyFrame => _inner;


        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_LinearColorKeyFrame;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_LinearColorKeyFrame
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_LinearColorKeyFrame;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_LinearColorKeyFrame = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.LinearColorKeyFrame");
                }
            }
        }

        public LinearColorKeyFrame() :base(global::WinRT.DerivedComposed.Instance)
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Xaml_Media_Animation_LinearColorKeyFrame, global::ABI.Microsoft.UI.Xaml.Media.Animation.ILinearColorKeyFrameMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static new LinearColorKeyFrame FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<LinearColorKeyFrame>.FromAbi(thisPtr);
        }

        internal LinearColorKeyFrame(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Media.Animation.ILinearColorKeyFrameMethods.IID);

        }


        public static bool operator ==(LinearColorKeyFrame x, LinearColorKeyFrame y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(LinearColorKeyFrame x, LinearColorKeyFrame y) => !(x == y);
        public bool Equals(LinearColorKeyFrame other) => this == other;
        public override bool Equals(object obj) => obj is LinearColorKeyFrame that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.LinearDoubleKeyFrame))]
    [global::ABI.Microsoft.UI.Xaml.Media.Animation.LinearDoubleKeyFrameRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ILinearDoubleKeyFrame))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class LinearDoubleKeyFrame : DoubleKeyFrame, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<LinearDoubleKeyFrame>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_ILinearDoubleKeyFrame => _inner;


        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_LinearDoubleKeyFrame;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_LinearDoubleKeyFrame
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_LinearDoubleKeyFrame;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_LinearDoubleKeyFrame = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.LinearDoubleKeyFrame");
                }
            }
        }

        public LinearDoubleKeyFrame() :base(global::WinRT.DerivedComposed.Instance)
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Xaml_Media_Animation_LinearDoubleKeyFrame, global::ABI.Microsoft.UI.Xaml.Media.Animation.ILinearDoubleKeyFrameMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static new LinearDoubleKeyFrame FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<LinearDoubleKeyFrame>.FromAbi(thisPtr);
        }

        internal LinearDoubleKeyFrame(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Media.Animation.ILinearDoubleKeyFrameMethods.IID);

        }


        public static bool operator ==(LinearDoubleKeyFrame x, LinearDoubleKeyFrame y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(LinearDoubleKeyFrame x, LinearDoubleKeyFrame y) => !(x == y);
        public bool Equals(LinearDoubleKeyFrame other) => this == other;
        public override bool Equals(object obj) => obj is LinearDoubleKeyFrame that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.LinearPointKeyFrame))]
    [global::ABI.Microsoft.UI.Xaml.Media.Animation.LinearPointKeyFrameRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ILinearPointKeyFrame))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class LinearPointKeyFrame : PointKeyFrame, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<LinearPointKeyFrame>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_ILinearPointKeyFrame => _inner;


        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_LinearPointKeyFrame;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_LinearPointKeyFrame
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_LinearPointKeyFrame;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_LinearPointKeyFrame = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.LinearPointKeyFrame");
                }
            }
        }

        public LinearPointKeyFrame() :base(global::WinRT.DerivedComposed.Instance)
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Xaml_Media_Animation_LinearPointKeyFrame, global::ABI.Microsoft.UI.Xaml.Media.Animation.ILinearPointKeyFrameMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static new LinearPointKeyFrame FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<LinearPointKeyFrame>.FromAbi(thisPtr);
        }

        internal LinearPointKeyFrame(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Media.Animation.ILinearPointKeyFrameMethods.IID);

        }


        public static bool operator ==(LinearPointKeyFrame x, LinearPointKeyFrame y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(LinearPointKeyFrame x, LinearPointKeyFrame y) => !(x == y);
        public bool Equals(LinearPointKeyFrame other) => this == other;
        public override bool Equals(object obj) => obj is LinearPointKeyFrame that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.NavigationThemeTransition))]
    [global::ABI.Microsoft.UI.Xaml.Media.Animation.NavigationThemeTransitionRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(INavigationThemeTransition))]
    [global::Microsoft.UI.Xaml.Markup.ContentProperty(Name = @"DefaultNavigationTransitionInfo")]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class NavigationThemeTransition : Transition, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<NavigationThemeTransition>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_INavigationThemeTransition => _inner;


        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_NavigationThemeTransition;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_NavigationThemeTransition
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_NavigationThemeTransition;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_NavigationThemeTransition = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.NavigationThemeTransition");
                }
            }
        }

        public NavigationThemeTransition() :base(global::WinRT.DerivedComposed.Instance)
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Xaml_Media_Animation_NavigationThemeTransition, global::ABI.Microsoft.UI.Xaml.Media.Animation.INavigationThemeTransitionMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static I As<I>() => ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.NavigationThemeTransition").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_INavigationThemeTransitionStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_INavigationThemeTransitionStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_INavigationThemeTransitionStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_INavigationThemeTransitionStatics = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.NavigationThemeTransition", global::ABI.Microsoft.UI.Xaml.Media.Animation.INavigationThemeTransitionStaticsMethods.IID);
                }
            }
        }

        public static global::Microsoft.UI.Xaml.DependencyProperty DefaultNavigationTransitionInfoProperty => global::ABI.Microsoft.UI.Xaml.Media.Animation.INavigationThemeTransitionStaticsMethods.get_DefaultNavigationTransitionInfoProperty(_objRef_global__Microsoft_UI_Xaml_Media_Animation_INavigationThemeTransitionStatics);

        public static new NavigationThemeTransition FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<NavigationThemeTransition>.FromAbi(thisPtr);
        }

        internal NavigationThemeTransition(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Media.Animation.INavigationThemeTransitionMethods.IID);

        }


        public static bool operator ==(NavigationThemeTransition x, NavigationThemeTransition y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(NavigationThemeTransition x, NavigationThemeTransition y) => !(x == y);
        public bool Equals(NavigationThemeTransition other) => this == other;
        public override bool Equals(object obj) => obj is NavigationThemeTransition that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public NavigationTransitionInfo DefaultNavigationTransitionInfo
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Animation.INavigationThemeTransitionMethods.get_DefaultNavigationTransitionInfo(_objRef_global__Microsoft_UI_Xaml_Media_Animation_INavigationThemeTransition);
            set => global::ABI.Microsoft.UI.Xaml.Media.Animation.INavigationThemeTransitionMethods.set_DefaultNavigationTransitionInfo(_objRef_global__Microsoft_UI_Xaml_Media_Animation_INavigationThemeTransition, value);
        }

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.NavigationTransitionInfo))]
    [global::ABI.Microsoft.UI.Xaml.Media.Animation.NavigationTransitionInfoRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(INavigationTransitionInfo))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public class NavigationTransitionInfo : global::Microsoft.UI.Xaml.DependencyObject, INavigationTransitionInfoOverrides, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<NavigationTransitionInfo>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_INavigationTransitionInfo;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_Media_Animation_INavigationTransitionInfo()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_Media_Animation_INavigationTransitionInfo, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.Media.Animation.INavigationTransitionInfoMethods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_INavigationTransitionInfo;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_INavigationTransitionInfo => ___objRef_global__Microsoft_UI_Xaml_Media_Animation_INavigationTransitionInfo ?? Make___objRef_global__Microsoft_UI_Xaml_Media_Animation_INavigationTransitionInfo();

        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_INavigationTransitionInfoOverrides;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_Media_Animation_INavigationTransitionInfoOverrides()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_Media_Animation_INavigationTransitionInfoOverrides, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.Media.Animation.INavigationTransitionInfoOverridesMethods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_INavigationTransitionInfoOverrides;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_INavigationTransitionInfoOverrides => ___objRef_global__Microsoft_UI_Xaml_Media_Animation_INavigationTransitionInfoOverrides ?? Make___objRef_global__Microsoft_UI_Xaml_Media_Animation_INavigationTransitionInfoOverrides();



        private static class _INavigationTransitionInfoFactoryMethods
        {
            public static unsafe IntPtr CreateInstance(IObjectReference _obj, object baseInterface, out IntPtr innerInterface)
            {
                var ThisPtr = _obj.ThisPtr;

                ObjectReferenceValue __baseInterface = default;
                IntPtr __innerInterface = default;
                IntPtr __retval = default;
                try
                {
                    __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                    global::System.GC.KeepAlive(_obj);
                    innerInterface = __innerInterface;
                    return __retval;
                }
                finally
                {
                    MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                }
            }
        }

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_INavigationTransitionInfoFactory;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_INavigationTransitionInfoFactory
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_INavigationTransitionInfoFactory;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_INavigationTransitionInfoFactory = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.NavigationTransitionInfo", global::ABI.Microsoft.UI.Xaml.Media.Animation.INavigationTransitionInfoFactoryMethods.IID);
                }
            }
        }

        protected NavigationTransitionInfo():base(global::WinRT.DerivedComposed.Instance)
        {
            bool isAggregation = this.GetType() != typeof(NavigationTransitionInfo);
            object baseInspectable = isAggregation ? this : null;
            IntPtr composed = _INavigationTransitionInfoFactoryMethods.CreateInstance(_objRef_global__Microsoft_UI_Xaml_Media_Animation_INavigationTransitionInfoFactory,  baseInspectable, out IntPtr inner);
            try
            {
                ComWrappersHelper.Init(isAggregation, this, composed, inner, global::ABI.Microsoft.UI.Xaml.Media.Animation.INavigationTransitionInfoMethods.IID, out _inner);

            }
            finally
            {
                Marshal.Release(inner);   
            }
        }

        public static new NavigationTransitionInfo FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<NavigationTransitionInfo>.FromAbi(thisPtr);
        }

        protected internal NavigationTransitionInfo(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Media.Animation.INavigationTransitionInfoMethods.IID);

        }


        public static bool operator ==(NavigationTransitionInfo x, NavigationTransitionInfo y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(NavigationTransitionInfo x, NavigationTransitionInfo y) => !(x == y);
        public bool Equals(NavigationTransitionInfo other) => this == other;
        public override bool Equals(object obj) => obj is NavigationTransitionInfo that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        protected NavigationTransitionInfo(global::WinRT.DerivedComposed _):base(_)
        {

        }
        bool IWinRTObject.HasUnwrappableNativeObject => this.GetType() == typeof(NavigationTransitionInfo);
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        protected virtual string GetNavigationStateCore() => global::ABI.Microsoft.UI.Xaml.Media.Animation.INavigationTransitionInfoOverridesMethods.GetNavigationStateCore(_objRef_global__Microsoft_UI_Xaml_Media_Animation_INavigationTransitionInfoOverrides);

        string INavigationTransitionInfoOverrides.GetNavigationStateCore() => GetNavigationStateCore();
        protected virtual void SetNavigationStateCore(string navigationState) => global::ABI.Microsoft.UI.Xaml.Media.Animation.INavigationTransitionInfoOverridesMethods.SetNavigationStateCore(_objRef_global__Microsoft_UI_Xaml_Media_Animation_INavigationTransitionInfoOverrides, navigationState);

        void INavigationTransitionInfoOverrides.SetNavigationStateCore(string navigationState) => SetNavigationStateCore(navigationState);
        protected override bool IsOverridableInterface(Guid iid) => global::ABI.Microsoft.UI.Xaml.Media.Animation.INavigationTransitionInfoOverridesMethods.IID == iid || base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.ObjectAnimationUsingKeyFrames))]
    [global::ABI.Microsoft.UI.Xaml.Media.Animation.ObjectAnimationUsingKeyFramesRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IObjectAnimationUsingKeyFrames))]
    [global::Microsoft.UI.Xaml.Markup.ContentProperty(Name = @"KeyFrames")]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class ObjectAnimationUsingKeyFrames : Timeline, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<ObjectAnimationUsingKeyFrames>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_IObjectAnimationUsingKeyFrames => _inner;


        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_ObjectAnimationUsingKeyFrames;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_ObjectAnimationUsingKeyFrames
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_ObjectAnimationUsingKeyFrames;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_ObjectAnimationUsingKeyFrames = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.ObjectAnimationUsingKeyFrames");
                }
            }
        }

        public ObjectAnimationUsingKeyFrames() :base(global::WinRT.DerivedComposed.Instance)
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ObjectAnimationUsingKeyFrames, global::ABI.Microsoft.UI.Xaml.Media.Animation.IObjectAnimationUsingKeyFramesMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static new I As<I>() => ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.ObjectAnimationUsingKeyFrames").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IObjectAnimationUsingKeyFramesStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_IObjectAnimationUsingKeyFramesStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IObjectAnimationUsingKeyFramesStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IObjectAnimationUsingKeyFramesStatics = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.ObjectAnimationUsingKeyFrames", global::ABI.Microsoft.UI.Xaml.Media.Animation.IObjectAnimationUsingKeyFramesStaticsMethods.IID);
                }
            }
        }

        public static global::Microsoft.UI.Xaml.DependencyProperty EnableDependentAnimationProperty => global::ABI.Microsoft.UI.Xaml.Media.Animation.IObjectAnimationUsingKeyFramesStaticsMethods.get_EnableDependentAnimationProperty(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IObjectAnimationUsingKeyFramesStatics);

        public static new ObjectAnimationUsingKeyFrames FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<ObjectAnimationUsingKeyFrames>.FromAbi(thisPtr);
        }

        internal ObjectAnimationUsingKeyFrames(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Media.Animation.IObjectAnimationUsingKeyFramesMethods.IID);

        }


        public static bool operator ==(ObjectAnimationUsingKeyFrames x, ObjectAnimationUsingKeyFrames y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(ObjectAnimationUsingKeyFrames x, ObjectAnimationUsingKeyFrames y) => !(x == y);
        public bool Equals(ObjectAnimationUsingKeyFrames other) => this == other;
        public override bool Equals(object obj) => obj is ObjectAnimationUsingKeyFrames that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public bool EnableDependentAnimation
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Animation.IObjectAnimationUsingKeyFramesMethods.get_EnableDependentAnimation(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IObjectAnimationUsingKeyFrames);
            set => global::ABI.Microsoft.UI.Xaml.Media.Animation.IObjectAnimationUsingKeyFramesMethods.set_EnableDependentAnimation(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IObjectAnimationUsingKeyFrames, value);
        }

        public ObjectKeyFrameCollection KeyFrames => global::ABI.Microsoft.UI.Xaml.Media.Animation.IObjectAnimationUsingKeyFramesMethods.get_KeyFrames(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IObjectAnimationUsingKeyFrames);

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.ObjectKeyFrame))]
    [global::ABI.Microsoft.UI.Xaml.Media.Animation.ObjectKeyFrameRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IObjectKeyFrame))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public class ObjectKeyFrame : global::Microsoft.UI.Xaml.DependencyObject, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<ObjectKeyFrame>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IObjectKeyFrame;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_Media_Animation_IObjectKeyFrame()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IObjectKeyFrame, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.Media.Animation.IObjectKeyFrameMethods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IObjectKeyFrame;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_IObjectKeyFrame => ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IObjectKeyFrame ?? Make___objRef_global__Microsoft_UI_Xaml_Media_Animation_IObjectKeyFrame();



        private static class _IObjectKeyFrameFactoryMethods
        {
            public static unsafe IntPtr CreateInstance(IObjectReference _obj, object baseInterface, out IntPtr innerInterface)
            {
                var ThisPtr = _obj.ThisPtr;

                ObjectReferenceValue __baseInterface = default;
                IntPtr __innerInterface = default;
                IntPtr __retval = default;
                try
                {
                    __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                    global::System.GC.KeepAlive(_obj);
                    innerInterface = __innerInterface;
                    return __retval;
                }
                finally
                {
                    MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                }
            }
        }

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IObjectKeyFrameFactory;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_IObjectKeyFrameFactory
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IObjectKeyFrameFactory;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IObjectKeyFrameFactory = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.ObjectKeyFrame", global::ABI.Microsoft.UI.Xaml.Media.Animation.IObjectKeyFrameFactoryMethods.IID);
                }
            }
        }

        protected ObjectKeyFrame():base(global::WinRT.DerivedComposed.Instance)
        {
            bool isAggregation = this.GetType() != typeof(ObjectKeyFrame);
            object baseInspectable = isAggregation ? this : null;
            IntPtr composed = _IObjectKeyFrameFactoryMethods.CreateInstance(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IObjectKeyFrameFactory,  baseInspectable, out IntPtr inner);
            try
            {
                ComWrappersHelper.Init(isAggregation, this, composed, inner, global::ABI.Microsoft.UI.Xaml.Media.Animation.IObjectKeyFrameMethods.IID, out _inner);

            }
            finally
            {
                Marshal.Release(inner);   
            }
        }

        public static I As<I>() => ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.ObjectKeyFrame").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IObjectKeyFrameStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_IObjectKeyFrameStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IObjectKeyFrameStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IObjectKeyFrameStatics = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.ObjectKeyFrame", global::ABI.Microsoft.UI.Xaml.Media.Animation.IObjectKeyFrameStaticsMethods.IID);
                }
            }
        }

        public static global::Microsoft.UI.Xaml.DependencyProperty KeyTimeProperty => global::ABI.Microsoft.UI.Xaml.Media.Animation.IObjectKeyFrameStaticsMethods.get_KeyTimeProperty(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IObjectKeyFrameStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty ValueProperty => global::ABI.Microsoft.UI.Xaml.Media.Animation.IObjectKeyFrameStaticsMethods.get_ValueProperty(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IObjectKeyFrameStatics);

        public static new ObjectKeyFrame FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<ObjectKeyFrame>.FromAbi(thisPtr);
        }

        protected internal ObjectKeyFrame(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Media.Animation.IObjectKeyFrameMethods.IID);

        }


        public static bool operator ==(ObjectKeyFrame x, ObjectKeyFrame y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(ObjectKeyFrame x, ObjectKeyFrame y) => !(x == y);
        public bool Equals(ObjectKeyFrame other) => this == other;
        public override bool Equals(object obj) => obj is ObjectKeyFrame that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        protected ObjectKeyFrame(global::WinRT.DerivedComposed _):base(_)
        {

        }
        bool IWinRTObject.HasUnwrappableNativeObject => this.GetType() == typeof(ObjectKeyFrame);
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public KeyTime KeyTime
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Animation.IObjectKeyFrameMethods.get_KeyTime(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IObjectKeyFrame);
            set => global::ABI.Microsoft.UI.Xaml.Media.Animation.IObjectKeyFrameMethods.set_KeyTime(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IObjectKeyFrame, value);
        }

        public object Value
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Animation.IObjectKeyFrameMethods.get_Value(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IObjectKeyFrame);
            set => global::ABI.Microsoft.UI.Xaml.Media.Animation.IObjectKeyFrameMethods.set_Value(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IObjectKeyFrame, value);
        }

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.ObjectKeyFrameCollection))]
    [global::ABI.Microsoft.UI.Xaml.Media.Animation.ObjectKeyFrameCollectionRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(global::System.Collections.Generic.IList<ObjectKeyFrame>))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class ObjectKeyFrameCollection : global::System.Collections.Generic.IList<ObjectKeyFrame>, global::System.Collections.Generic.IEnumerable<ObjectKeyFrame>, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<ObjectKeyFrameCollection>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__System_Collections_Generic_IList_ObjectKeyFrame_;
        private IObjectReference Make___objRef_global__System_Collections_Generic_IList_ObjectKeyFrame_()
        {
            _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IVector_1_Microsoft_UI_Xaml_Media_Animation_ObjectKeyFrame.EnsureInitialized();
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__System_Collections_Generic_IList_ObjectKeyFrame_, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.System.Collections.Generic.IListMethods<ObjectKeyFrame>.IID), null);
            return ___objRef_global__System_Collections_Generic_IList_ObjectKeyFrame_;
        }
        private IObjectReference _objRef_global__System_Collections_Generic_IList_ObjectKeyFrame_ => ___objRef_global__System_Collections_Generic_IList_ObjectKeyFrame_ ?? Make___objRef_global__System_Collections_Generic_IList_ObjectKeyFrame_();

        private volatile IObjectReference ___objRef_global__System_Collections_Generic_IEnumerable_ObjectKeyFrame_;
        private IObjectReference Make___objRef_global__System_Collections_Generic_IEnumerable_ObjectKeyFrame_()
        {
            _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IIterable_1_Microsoft_UI_Xaml_Media_Animation_ObjectKeyFrame.EnsureInitialized();
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__System_Collections_Generic_IEnumerable_ObjectKeyFrame_, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.System.Collections.Generic.IEnumerableMethods<ObjectKeyFrame>.IID), null);
            return ___objRef_global__System_Collections_Generic_IEnumerable_ObjectKeyFrame_;
        }
        private IObjectReference _objRef_global__System_Collections_Generic_IEnumerable_ObjectKeyFrame_ => ___objRef_global__System_Collections_Generic_IEnumerable_ObjectKeyFrame_ ?? Make___objRef_global__System_Collections_Generic_IEnumerable_ObjectKeyFrame_();



        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_ObjectKeyFrameCollection;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_ObjectKeyFrameCollection
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_ObjectKeyFrameCollection;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_ObjectKeyFrameCollection = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.ObjectKeyFrameCollection");
                }
            }
        }

        public ObjectKeyFrameCollection() 
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ObjectKeyFrameCollection, global::ABI.System.Collections.Generic.IListMethods<ObjectKeyFrame>.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static ObjectKeyFrameCollection FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<ObjectKeyFrameCollection>.FromAbi(thisPtr);
        }

        internal ObjectKeyFrameCollection(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.System.Collections.Generic.IListMethods<ObjectKeyFrame>.IID);

        }


        public static bool operator ==(ObjectKeyFrameCollection x, ObjectKeyFrameCollection y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(ObjectKeyFrameCollection x, ObjectKeyFrameCollection y) => !(x == y);
        public bool Equals(ObjectKeyFrameCollection other) => this == other;
        public override bool Equals(object obj) => obj is ObjectKeyFrameCollection that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public int Count => global::ABI.System.Collections.Generic.IListMethods<ObjectKeyFrame>.get_Count(_objRef_global__System_Collections_Generic_IList_ObjectKeyFrame_);
        public bool IsReadOnly => global::ABI.System.Collections.Generic.IListMethods<ObjectKeyFrame>.get_IsReadOnly(_objRef_global__System_Collections_Generic_IList_ObjectKeyFrame_);
        [global::System.Runtime.CompilerServices.IndexerName("ListItem")]
        public ObjectKeyFrame this[int index] 
        {
            get => global::ABI.System.Collections.Generic.IListMethods<ObjectKeyFrame>.Indexer_Get(_objRef_global__System_Collections_Generic_IList_ObjectKeyFrame_, index);
            set => global::ABI.System.Collections.Generic.IListMethods<ObjectKeyFrame>.Indexer_Set(_objRef_global__System_Collections_Generic_IList_ObjectKeyFrame_, index, value);
        }
        public int IndexOf(ObjectKeyFrame item) => global::ABI.System.Collections.Generic.IListMethods<ObjectKeyFrame>.IndexOf(_objRef_global__System_Collections_Generic_IList_ObjectKeyFrame_, item);
        public void Insert(int index, ObjectKeyFrame item) => global::ABI.System.Collections.Generic.IListMethods<ObjectKeyFrame>.Insert(_objRef_global__System_Collections_Generic_IList_ObjectKeyFrame_, index, item);
        public void RemoveAt(int index) => global::ABI.System.Collections.Generic.IListMethods<ObjectKeyFrame>.RemoveAt(_objRef_global__System_Collections_Generic_IList_ObjectKeyFrame_, index);
        public void Add(ObjectKeyFrame item) => global::ABI.System.Collections.Generic.IListMethods<ObjectKeyFrame>.Add(_objRef_global__System_Collections_Generic_IList_ObjectKeyFrame_, item);
        public void Clear() => global::ABI.System.Collections.Generic.IListMethods<ObjectKeyFrame>.Clear(_objRef_global__System_Collections_Generic_IList_ObjectKeyFrame_);
        public bool Contains(ObjectKeyFrame item) => global::ABI.System.Collections.Generic.IListMethods<ObjectKeyFrame>.Contains(_objRef_global__System_Collections_Generic_IList_ObjectKeyFrame_, item);
        public void CopyTo(ObjectKeyFrame[] array, int arrayIndex) => global::ABI.System.Collections.Generic.IListMethods<ObjectKeyFrame>.CopyTo(_objRef_global__System_Collections_Generic_IList_ObjectKeyFrame_, array, arrayIndex);
        public bool Remove(ObjectKeyFrame item) => global::ABI.System.Collections.Generic.IListMethods<ObjectKeyFrame>.Remove(_objRef_global__System_Collections_Generic_IList_ObjectKeyFrame_, item);

        public IEnumerator<ObjectKeyFrame> GetEnumerator() => global::ABI.System.Collections.Generic.IEnumerableMethods<ObjectKeyFrame>.GetEnumerator(_objRef_global__System_Collections_Generic_IEnumerable_ObjectKeyFrame_);

        IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.PaneThemeTransition))]
    [global::ABI.Microsoft.UI.Xaml.Media.Animation.PaneThemeTransitionRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IPaneThemeTransition))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class PaneThemeTransition : Transition, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<PaneThemeTransition>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_IPaneThemeTransition => _inner;


        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_PaneThemeTransition;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_PaneThemeTransition
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_PaneThemeTransition;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_PaneThemeTransition = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.PaneThemeTransition");
                }
            }
        }

        public PaneThemeTransition() :base(global::WinRT.DerivedComposed.Instance)
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Xaml_Media_Animation_PaneThemeTransition, global::ABI.Microsoft.UI.Xaml.Media.Animation.IPaneThemeTransitionMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static I As<I>() => ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.PaneThemeTransition").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IPaneThemeTransitionStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_IPaneThemeTransitionStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IPaneThemeTransitionStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IPaneThemeTransitionStatics = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.PaneThemeTransition", global::ABI.Microsoft.UI.Xaml.Media.Animation.IPaneThemeTransitionStaticsMethods.IID);
                }
            }
        }

        public static global::Microsoft.UI.Xaml.DependencyProperty EdgeProperty => global::ABI.Microsoft.UI.Xaml.Media.Animation.IPaneThemeTransitionStaticsMethods.get_EdgeProperty(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IPaneThemeTransitionStatics);

        public static new PaneThemeTransition FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<PaneThemeTransition>.FromAbi(thisPtr);
        }

        internal PaneThemeTransition(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Media.Animation.IPaneThemeTransitionMethods.IID);

        }


        public static bool operator ==(PaneThemeTransition x, PaneThemeTransition y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(PaneThemeTransition x, PaneThemeTransition y) => !(x == y);
        public bool Equals(PaneThemeTransition other) => this == other;
        public override bool Equals(object obj) => obj is PaneThemeTransition that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public global::Microsoft.UI.Xaml.Controls.Primitives.EdgeTransitionLocation Edge
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Animation.IPaneThemeTransitionMethods.get_Edge(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IPaneThemeTransition);
            set => global::ABI.Microsoft.UI.Xaml.Media.Animation.IPaneThemeTransitionMethods.set_Edge(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IPaneThemeTransition, value);
        }

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.PointAnimation))]
    [global::ABI.Microsoft.UI.Xaml.Media.Animation.PointAnimationRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IPointAnimation))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class PointAnimation : Timeline, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<PointAnimation>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_IPointAnimation => _inner;


        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_PointAnimation;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_PointAnimation
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_PointAnimation;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_PointAnimation = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.PointAnimation");
                }
            }
        }

        public PointAnimation() :base(global::WinRT.DerivedComposed.Instance)
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Xaml_Media_Animation_PointAnimation, global::ABI.Microsoft.UI.Xaml.Media.Animation.IPointAnimationMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static new I As<I>() => ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.PointAnimation").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IPointAnimationStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_IPointAnimationStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IPointAnimationStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IPointAnimationStatics = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.PointAnimation", global::ABI.Microsoft.UI.Xaml.Media.Animation.IPointAnimationStaticsMethods.IID);
                }
            }
        }

        public static global::Microsoft.UI.Xaml.DependencyProperty ByProperty => global::ABI.Microsoft.UI.Xaml.Media.Animation.IPointAnimationStaticsMethods.get_ByProperty(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IPointAnimationStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty EasingFunctionProperty => global::ABI.Microsoft.UI.Xaml.Media.Animation.IPointAnimationStaticsMethods.get_EasingFunctionProperty(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IPointAnimationStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty EnableDependentAnimationProperty => global::ABI.Microsoft.UI.Xaml.Media.Animation.IPointAnimationStaticsMethods.get_EnableDependentAnimationProperty(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IPointAnimationStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty FromProperty => global::ABI.Microsoft.UI.Xaml.Media.Animation.IPointAnimationStaticsMethods.get_FromProperty(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IPointAnimationStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty ToProperty => global::ABI.Microsoft.UI.Xaml.Media.Animation.IPointAnimationStaticsMethods.get_ToProperty(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IPointAnimationStatics);

        public static new PointAnimation FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<PointAnimation>.FromAbi(thisPtr);
        }

        internal PointAnimation(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Media.Animation.IPointAnimationMethods.IID);

        }


        public static bool operator ==(PointAnimation x, PointAnimation y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(PointAnimation x, PointAnimation y) => !(x == y);
        public bool Equals(PointAnimation other) => this == other;
        public override bool Equals(object obj) => obj is PointAnimation that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public global::System.Nullable<global::Windows.Foundation.Point> By
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Animation.IPointAnimationMethods.get_By(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IPointAnimation);
            set => global::ABI.Microsoft.UI.Xaml.Media.Animation.IPointAnimationMethods.set_By(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IPointAnimation, value);
        }

        public EasingFunctionBase EasingFunction
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Animation.IPointAnimationMethods.get_EasingFunction(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IPointAnimation);
            set => global::ABI.Microsoft.UI.Xaml.Media.Animation.IPointAnimationMethods.set_EasingFunction(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IPointAnimation, value);
        }

        public bool EnableDependentAnimation
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Animation.IPointAnimationMethods.get_EnableDependentAnimation(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IPointAnimation);
            set => global::ABI.Microsoft.UI.Xaml.Media.Animation.IPointAnimationMethods.set_EnableDependentAnimation(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IPointAnimation, value);
        }

        public global::System.Nullable<global::Windows.Foundation.Point> From
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Animation.IPointAnimationMethods.get_From(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IPointAnimation);
            set => global::ABI.Microsoft.UI.Xaml.Media.Animation.IPointAnimationMethods.set_From(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IPointAnimation, value);
        }

        public global::System.Nullable<global::Windows.Foundation.Point> To
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Animation.IPointAnimationMethods.get_To(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IPointAnimation);
            set => global::ABI.Microsoft.UI.Xaml.Media.Animation.IPointAnimationMethods.set_To(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IPointAnimation, value);
        }

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.PointAnimationUsingKeyFrames))]
    [global::ABI.Microsoft.UI.Xaml.Media.Animation.PointAnimationUsingKeyFramesRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IPointAnimationUsingKeyFrames))]
    [global::Microsoft.UI.Xaml.Markup.ContentProperty(Name = @"KeyFrames")]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class PointAnimationUsingKeyFrames : Timeline, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<PointAnimationUsingKeyFrames>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_IPointAnimationUsingKeyFrames => _inner;


        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_PointAnimationUsingKeyFrames;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_PointAnimationUsingKeyFrames
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_PointAnimationUsingKeyFrames;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_PointAnimationUsingKeyFrames = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.PointAnimationUsingKeyFrames");
                }
            }
        }

        public PointAnimationUsingKeyFrames() :base(global::WinRT.DerivedComposed.Instance)
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Xaml_Media_Animation_PointAnimationUsingKeyFrames, global::ABI.Microsoft.UI.Xaml.Media.Animation.IPointAnimationUsingKeyFramesMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static new I As<I>() => ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.PointAnimationUsingKeyFrames").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IPointAnimationUsingKeyFramesStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_IPointAnimationUsingKeyFramesStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IPointAnimationUsingKeyFramesStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IPointAnimationUsingKeyFramesStatics = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.PointAnimationUsingKeyFrames", global::ABI.Microsoft.UI.Xaml.Media.Animation.IPointAnimationUsingKeyFramesStaticsMethods.IID);
                }
            }
        }

        public static global::Microsoft.UI.Xaml.DependencyProperty EnableDependentAnimationProperty => global::ABI.Microsoft.UI.Xaml.Media.Animation.IPointAnimationUsingKeyFramesStaticsMethods.get_EnableDependentAnimationProperty(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IPointAnimationUsingKeyFramesStatics);

        public static new PointAnimationUsingKeyFrames FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<PointAnimationUsingKeyFrames>.FromAbi(thisPtr);
        }

        internal PointAnimationUsingKeyFrames(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Media.Animation.IPointAnimationUsingKeyFramesMethods.IID);

        }


        public static bool operator ==(PointAnimationUsingKeyFrames x, PointAnimationUsingKeyFrames y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(PointAnimationUsingKeyFrames x, PointAnimationUsingKeyFrames y) => !(x == y);
        public bool Equals(PointAnimationUsingKeyFrames other) => this == other;
        public override bool Equals(object obj) => obj is PointAnimationUsingKeyFrames that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public bool EnableDependentAnimation
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Animation.IPointAnimationUsingKeyFramesMethods.get_EnableDependentAnimation(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IPointAnimationUsingKeyFrames);
            set => global::ABI.Microsoft.UI.Xaml.Media.Animation.IPointAnimationUsingKeyFramesMethods.set_EnableDependentAnimation(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IPointAnimationUsingKeyFrames, value);
        }

        public PointKeyFrameCollection KeyFrames => global::ABI.Microsoft.UI.Xaml.Media.Animation.IPointAnimationUsingKeyFramesMethods.get_KeyFrames(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IPointAnimationUsingKeyFrames);

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.PointKeyFrame))]
    [global::ABI.Microsoft.UI.Xaml.Media.Animation.PointKeyFrameRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IPointKeyFrame))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public class PointKeyFrame : global::Microsoft.UI.Xaml.DependencyObject, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<PointKeyFrame>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IPointKeyFrame;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_Media_Animation_IPointKeyFrame()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IPointKeyFrame, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.Media.Animation.IPointKeyFrameMethods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IPointKeyFrame;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_IPointKeyFrame => ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IPointKeyFrame ?? Make___objRef_global__Microsoft_UI_Xaml_Media_Animation_IPointKeyFrame();



        private static class _IPointKeyFrameFactoryMethods
        {
            public static unsafe IntPtr CreateInstance(IObjectReference _obj, object baseInterface, out IntPtr innerInterface)
            {
                var ThisPtr = _obj.ThisPtr;

                ObjectReferenceValue __baseInterface = default;
                IntPtr __innerInterface = default;
                IntPtr __retval = default;
                try
                {
                    __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                    global::System.GC.KeepAlive(_obj);
                    innerInterface = __innerInterface;
                    return __retval;
                }
                finally
                {
                    MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                }
            }
        }

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IPointKeyFrameFactory;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_IPointKeyFrameFactory
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IPointKeyFrameFactory;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IPointKeyFrameFactory = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.PointKeyFrame", global::ABI.Microsoft.UI.Xaml.Media.Animation.IPointKeyFrameFactoryMethods.IID);
                }
            }
        }

        protected PointKeyFrame():base(global::WinRT.DerivedComposed.Instance)
        {
            bool isAggregation = this.GetType() != typeof(PointKeyFrame);
            object baseInspectable = isAggregation ? this : null;
            IntPtr composed = _IPointKeyFrameFactoryMethods.CreateInstance(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IPointKeyFrameFactory,  baseInspectable, out IntPtr inner);
            try
            {
                ComWrappersHelper.Init(isAggregation, this, composed, inner, global::ABI.Microsoft.UI.Xaml.Media.Animation.IPointKeyFrameMethods.IID, out _inner);

            }
            finally
            {
                Marshal.Release(inner);   
            }
        }

        public static I As<I>() => ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.PointKeyFrame").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IPointKeyFrameStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_IPointKeyFrameStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IPointKeyFrameStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IPointKeyFrameStatics = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.PointKeyFrame", global::ABI.Microsoft.UI.Xaml.Media.Animation.IPointKeyFrameStaticsMethods.IID);
                }
            }
        }

        public static global::Microsoft.UI.Xaml.DependencyProperty KeyTimeProperty => global::ABI.Microsoft.UI.Xaml.Media.Animation.IPointKeyFrameStaticsMethods.get_KeyTimeProperty(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IPointKeyFrameStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty ValueProperty => global::ABI.Microsoft.UI.Xaml.Media.Animation.IPointKeyFrameStaticsMethods.get_ValueProperty(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IPointKeyFrameStatics);

        public static new PointKeyFrame FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<PointKeyFrame>.FromAbi(thisPtr);
        }

        protected internal PointKeyFrame(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Media.Animation.IPointKeyFrameMethods.IID);

        }


        public static bool operator ==(PointKeyFrame x, PointKeyFrame y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(PointKeyFrame x, PointKeyFrame y) => !(x == y);
        public bool Equals(PointKeyFrame other) => this == other;
        public override bool Equals(object obj) => obj is PointKeyFrame that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        protected PointKeyFrame(global::WinRT.DerivedComposed _):base(_)
        {

        }
        bool IWinRTObject.HasUnwrappableNativeObject => this.GetType() == typeof(PointKeyFrame);
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public KeyTime KeyTime
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Animation.IPointKeyFrameMethods.get_KeyTime(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IPointKeyFrame);
            set => global::ABI.Microsoft.UI.Xaml.Media.Animation.IPointKeyFrameMethods.set_KeyTime(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IPointKeyFrame, value);
        }

        public global::Windows.Foundation.Point Value
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Animation.IPointKeyFrameMethods.get_Value(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IPointKeyFrame);
            set => global::ABI.Microsoft.UI.Xaml.Media.Animation.IPointKeyFrameMethods.set_Value(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IPointKeyFrame, value);
        }

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.PointKeyFrameCollection))]
    [global::ABI.Microsoft.UI.Xaml.Media.Animation.PointKeyFrameCollectionRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(global::System.Collections.Generic.IList<PointKeyFrame>))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class PointKeyFrameCollection : global::System.Collections.Generic.IList<PointKeyFrame>, global::System.Collections.Generic.IEnumerable<PointKeyFrame>, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<PointKeyFrameCollection>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__System_Collections_Generic_IList_PointKeyFrame_;
        private IObjectReference Make___objRef_global__System_Collections_Generic_IList_PointKeyFrame_()
        {
            _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IVector_1_Microsoft_UI_Xaml_Media_Animation_PointKeyFrame.EnsureInitialized();
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__System_Collections_Generic_IList_PointKeyFrame_, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.System.Collections.Generic.IListMethods<PointKeyFrame>.IID), null);
            return ___objRef_global__System_Collections_Generic_IList_PointKeyFrame_;
        }
        private IObjectReference _objRef_global__System_Collections_Generic_IList_PointKeyFrame_ => ___objRef_global__System_Collections_Generic_IList_PointKeyFrame_ ?? Make___objRef_global__System_Collections_Generic_IList_PointKeyFrame_();

        private volatile IObjectReference ___objRef_global__System_Collections_Generic_IEnumerable_PointKeyFrame_;
        private IObjectReference Make___objRef_global__System_Collections_Generic_IEnumerable_PointKeyFrame_()
        {
            _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IIterable_1_Microsoft_UI_Xaml_Media_Animation_PointKeyFrame.EnsureInitialized();
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__System_Collections_Generic_IEnumerable_PointKeyFrame_, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.System.Collections.Generic.IEnumerableMethods<PointKeyFrame>.IID), null);
            return ___objRef_global__System_Collections_Generic_IEnumerable_PointKeyFrame_;
        }
        private IObjectReference _objRef_global__System_Collections_Generic_IEnumerable_PointKeyFrame_ => ___objRef_global__System_Collections_Generic_IEnumerable_PointKeyFrame_ ?? Make___objRef_global__System_Collections_Generic_IEnumerable_PointKeyFrame_();



        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_PointKeyFrameCollection;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_PointKeyFrameCollection
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_PointKeyFrameCollection;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_PointKeyFrameCollection = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.PointKeyFrameCollection");
                }
            }
        }

        public PointKeyFrameCollection() 
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Xaml_Media_Animation_PointKeyFrameCollection, global::ABI.System.Collections.Generic.IListMethods<PointKeyFrame>.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static PointKeyFrameCollection FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<PointKeyFrameCollection>.FromAbi(thisPtr);
        }

        internal PointKeyFrameCollection(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.System.Collections.Generic.IListMethods<PointKeyFrame>.IID);

        }


        public static bool operator ==(PointKeyFrameCollection x, PointKeyFrameCollection y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(PointKeyFrameCollection x, PointKeyFrameCollection y) => !(x == y);
        public bool Equals(PointKeyFrameCollection other) => this == other;
        public override bool Equals(object obj) => obj is PointKeyFrameCollection that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public int Count => global::ABI.System.Collections.Generic.IListMethods<PointKeyFrame>.get_Count(_objRef_global__System_Collections_Generic_IList_PointKeyFrame_);
        public bool IsReadOnly => global::ABI.System.Collections.Generic.IListMethods<PointKeyFrame>.get_IsReadOnly(_objRef_global__System_Collections_Generic_IList_PointKeyFrame_);
        [global::System.Runtime.CompilerServices.IndexerName("ListItem")]
        public PointKeyFrame this[int index] 
        {
            get => global::ABI.System.Collections.Generic.IListMethods<PointKeyFrame>.Indexer_Get(_objRef_global__System_Collections_Generic_IList_PointKeyFrame_, index);
            set => global::ABI.System.Collections.Generic.IListMethods<PointKeyFrame>.Indexer_Set(_objRef_global__System_Collections_Generic_IList_PointKeyFrame_, index, value);
        }
        public int IndexOf(PointKeyFrame item) => global::ABI.System.Collections.Generic.IListMethods<PointKeyFrame>.IndexOf(_objRef_global__System_Collections_Generic_IList_PointKeyFrame_, item);
        public void Insert(int index, PointKeyFrame item) => global::ABI.System.Collections.Generic.IListMethods<PointKeyFrame>.Insert(_objRef_global__System_Collections_Generic_IList_PointKeyFrame_, index, item);
        public void RemoveAt(int index) => global::ABI.System.Collections.Generic.IListMethods<PointKeyFrame>.RemoveAt(_objRef_global__System_Collections_Generic_IList_PointKeyFrame_, index);
        public void Add(PointKeyFrame item) => global::ABI.System.Collections.Generic.IListMethods<PointKeyFrame>.Add(_objRef_global__System_Collections_Generic_IList_PointKeyFrame_, item);
        public void Clear() => global::ABI.System.Collections.Generic.IListMethods<PointKeyFrame>.Clear(_objRef_global__System_Collections_Generic_IList_PointKeyFrame_);
        public bool Contains(PointKeyFrame item) => global::ABI.System.Collections.Generic.IListMethods<PointKeyFrame>.Contains(_objRef_global__System_Collections_Generic_IList_PointKeyFrame_, item);
        public void CopyTo(PointKeyFrame[] array, int arrayIndex) => global::ABI.System.Collections.Generic.IListMethods<PointKeyFrame>.CopyTo(_objRef_global__System_Collections_Generic_IList_PointKeyFrame_, array, arrayIndex);
        public bool Remove(PointKeyFrame item) => global::ABI.System.Collections.Generic.IListMethods<PointKeyFrame>.Remove(_objRef_global__System_Collections_Generic_IList_PointKeyFrame_, item);

        public IEnumerator<PointKeyFrame> GetEnumerator() => global::ABI.System.Collections.Generic.IEnumerableMethods<PointKeyFrame>.GetEnumerator(_objRef_global__System_Collections_Generic_IEnumerable_PointKeyFrame_);

        IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.PointerDownThemeAnimation))]
    [global::ABI.Microsoft.UI.Xaml.Media.Animation.PointerDownThemeAnimationRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IPointerDownThemeAnimation))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class PointerDownThemeAnimation : Timeline, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<PointerDownThemeAnimation>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_IPointerDownThemeAnimation => _inner;


        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_PointerDownThemeAnimation;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_PointerDownThemeAnimation
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_PointerDownThemeAnimation;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_PointerDownThemeAnimation = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.PointerDownThemeAnimation");
                }
            }
        }

        public PointerDownThemeAnimation() :base(global::WinRT.DerivedComposed.Instance)
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Xaml_Media_Animation_PointerDownThemeAnimation, global::ABI.Microsoft.UI.Xaml.Media.Animation.IPointerDownThemeAnimationMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static new I As<I>() => ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.PointerDownThemeAnimation").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IPointerDownThemeAnimationStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_IPointerDownThemeAnimationStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IPointerDownThemeAnimationStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IPointerDownThemeAnimationStatics = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.PointerDownThemeAnimation", global::ABI.Microsoft.UI.Xaml.Media.Animation.IPointerDownThemeAnimationStaticsMethods.IID);
                }
            }
        }

        public static global::Microsoft.UI.Xaml.DependencyProperty TargetNameProperty => global::ABI.Microsoft.UI.Xaml.Media.Animation.IPointerDownThemeAnimationStaticsMethods.get_TargetNameProperty(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IPointerDownThemeAnimationStatics);

        public static new PointerDownThemeAnimation FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<PointerDownThemeAnimation>.FromAbi(thisPtr);
        }

        internal PointerDownThemeAnimation(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Media.Animation.IPointerDownThemeAnimationMethods.IID);

        }


        public static bool operator ==(PointerDownThemeAnimation x, PointerDownThemeAnimation y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(PointerDownThemeAnimation x, PointerDownThemeAnimation y) => !(x == y);
        public bool Equals(PointerDownThemeAnimation other) => this == other;
        public override bool Equals(object obj) => obj is PointerDownThemeAnimation that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public string TargetName
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Animation.IPointerDownThemeAnimationMethods.get_TargetName(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IPointerDownThemeAnimation);
            set => global::ABI.Microsoft.UI.Xaml.Media.Animation.IPointerDownThemeAnimationMethods.set_TargetName(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IPointerDownThemeAnimation, value);
        }

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.PointerUpThemeAnimation))]
    [global::ABI.Microsoft.UI.Xaml.Media.Animation.PointerUpThemeAnimationRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IPointerUpThemeAnimation))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class PointerUpThemeAnimation : Timeline, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<PointerUpThemeAnimation>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_IPointerUpThemeAnimation => _inner;


        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_PointerUpThemeAnimation;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_PointerUpThemeAnimation
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_PointerUpThemeAnimation;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_PointerUpThemeAnimation = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.PointerUpThemeAnimation");
                }
            }
        }

        public PointerUpThemeAnimation() :base(global::WinRT.DerivedComposed.Instance)
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Xaml_Media_Animation_PointerUpThemeAnimation, global::ABI.Microsoft.UI.Xaml.Media.Animation.IPointerUpThemeAnimationMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static new I As<I>() => ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.PointerUpThemeAnimation").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IPointerUpThemeAnimationStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_IPointerUpThemeAnimationStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IPointerUpThemeAnimationStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IPointerUpThemeAnimationStatics = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.PointerUpThemeAnimation", global::ABI.Microsoft.UI.Xaml.Media.Animation.IPointerUpThemeAnimationStaticsMethods.IID);
                }
            }
        }

        public static global::Microsoft.UI.Xaml.DependencyProperty TargetNameProperty => global::ABI.Microsoft.UI.Xaml.Media.Animation.IPointerUpThemeAnimationStaticsMethods.get_TargetNameProperty(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IPointerUpThemeAnimationStatics);

        public static new PointerUpThemeAnimation FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<PointerUpThemeAnimation>.FromAbi(thisPtr);
        }

        internal PointerUpThemeAnimation(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Media.Animation.IPointerUpThemeAnimationMethods.IID);

        }


        public static bool operator ==(PointerUpThemeAnimation x, PointerUpThemeAnimation y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(PointerUpThemeAnimation x, PointerUpThemeAnimation y) => !(x == y);
        public bool Equals(PointerUpThemeAnimation other) => this == other;
        public override bool Equals(object obj) => obj is PointerUpThemeAnimation that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public string TargetName
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Animation.IPointerUpThemeAnimationMethods.get_TargetName(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IPointerUpThemeAnimation);
            set => global::ABI.Microsoft.UI.Xaml.Media.Animation.IPointerUpThemeAnimationMethods.set_TargetName(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IPointerUpThemeAnimation, value);
        }

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.PopInThemeAnimation))]
    [global::ABI.Microsoft.UI.Xaml.Media.Animation.PopInThemeAnimationRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IPopInThemeAnimation))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class PopInThemeAnimation : Timeline, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<PopInThemeAnimation>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_IPopInThemeAnimation => _inner;


        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_PopInThemeAnimation;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_PopInThemeAnimation
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_PopInThemeAnimation;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_PopInThemeAnimation = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.PopInThemeAnimation");
                }
            }
        }

        public PopInThemeAnimation() :base(global::WinRT.DerivedComposed.Instance)
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Xaml_Media_Animation_PopInThemeAnimation, global::ABI.Microsoft.UI.Xaml.Media.Animation.IPopInThemeAnimationMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static new I As<I>() => ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.PopInThemeAnimation").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IPopInThemeAnimationStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_IPopInThemeAnimationStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IPopInThemeAnimationStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IPopInThemeAnimationStatics = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.PopInThemeAnimation", global::ABI.Microsoft.UI.Xaml.Media.Animation.IPopInThemeAnimationStaticsMethods.IID);
                }
            }
        }

        public static global::Microsoft.UI.Xaml.DependencyProperty FromHorizontalOffsetProperty => global::ABI.Microsoft.UI.Xaml.Media.Animation.IPopInThemeAnimationStaticsMethods.get_FromHorizontalOffsetProperty(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IPopInThemeAnimationStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty FromVerticalOffsetProperty => global::ABI.Microsoft.UI.Xaml.Media.Animation.IPopInThemeAnimationStaticsMethods.get_FromVerticalOffsetProperty(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IPopInThemeAnimationStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty TargetNameProperty => global::ABI.Microsoft.UI.Xaml.Media.Animation.IPopInThemeAnimationStaticsMethods.get_TargetNameProperty(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IPopInThemeAnimationStatics);

        public static new PopInThemeAnimation FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<PopInThemeAnimation>.FromAbi(thisPtr);
        }

        internal PopInThemeAnimation(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Media.Animation.IPopInThemeAnimationMethods.IID);

        }


        public static bool operator ==(PopInThemeAnimation x, PopInThemeAnimation y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(PopInThemeAnimation x, PopInThemeAnimation y) => !(x == y);
        public bool Equals(PopInThemeAnimation other) => this == other;
        public override bool Equals(object obj) => obj is PopInThemeAnimation that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public double FromHorizontalOffset
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Animation.IPopInThemeAnimationMethods.get_FromHorizontalOffset(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IPopInThemeAnimation);
            set => global::ABI.Microsoft.UI.Xaml.Media.Animation.IPopInThemeAnimationMethods.set_FromHorizontalOffset(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IPopInThemeAnimation, value);
        }

        public double FromVerticalOffset
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Animation.IPopInThemeAnimationMethods.get_FromVerticalOffset(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IPopInThemeAnimation);
            set => global::ABI.Microsoft.UI.Xaml.Media.Animation.IPopInThemeAnimationMethods.set_FromVerticalOffset(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IPopInThemeAnimation, value);
        }

        public string TargetName
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Animation.IPopInThemeAnimationMethods.get_TargetName(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IPopInThemeAnimation);
            set => global::ABI.Microsoft.UI.Xaml.Media.Animation.IPopInThemeAnimationMethods.set_TargetName(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IPopInThemeAnimation, value);
        }

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.PopOutThemeAnimation))]
    [global::ABI.Microsoft.UI.Xaml.Media.Animation.PopOutThemeAnimationRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IPopOutThemeAnimation))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class PopOutThemeAnimation : Timeline, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<PopOutThemeAnimation>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_IPopOutThemeAnimation => _inner;


        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_PopOutThemeAnimation;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_PopOutThemeAnimation
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_PopOutThemeAnimation;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_PopOutThemeAnimation = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.PopOutThemeAnimation");
                }
            }
        }

        public PopOutThemeAnimation() :base(global::WinRT.DerivedComposed.Instance)
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Xaml_Media_Animation_PopOutThemeAnimation, global::ABI.Microsoft.UI.Xaml.Media.Animation.IPopOutThemeAnimationMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static new I As<I>() => ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.PopOutThemeAnimation").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IPopOutThemeAnimationStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_IPopOutThemeAnimationStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IPopOutThemeAnimationStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IPopOutThemeAnimationStatics = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.PopOutThemeAnimation", global::ABI.Microsoft.UI.Xaml.Media.Animation.IPopOutThemeAnimationStaticsMethods.IID);
                }
            }
        }

        public static global::Microsoft.UI.Xaml.DependencyProperty TargetNameProperty => global::ABI.Microsoft.UI.Xaml.Media.Animation.IPopOutThemeAnimationStaticsMethods.get_TargetNameProperty(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IPopOutThemeAnimationStatics);

        public static new PopOutThemeAnimation FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<PopOutThemeAnimation>.FromAbi(thisPtr);
        }

        internal PopOutThemeAnimation(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Media.Animation.IPopOutThemeAnimationMethods.IID);

        }


        public static bool operator ==(PopOutThemeAnimation x, PopOutThemeAnimation y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(PopOutThemeAnimation x, PopOutThemeAnimation y) => !(x == y);
        public bool Equals(PopOutThemeAnimation other) => this == other;
        public override bool Equals(object obj) => obj is PopOutThemeAnimation that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public string TargetName
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Animation.IPopOutThemeAnimationMethods.get_TargetName(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IPopOutThemeAnimation);
            set => global::ABI.Microsoft.UI.Xaml.Media.Animation.IPopOutThemeAnimationMethods.set_TargetName(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IPopOutThemeAnimation, value);
        }

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.PopupThemeTransition))]
    [global::ABI.Microsoft.UI.Xaml.Media.Animation.PopupThemeTransitionRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IPopupThemeTransition))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class PopupThemeTransition : Transition, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<PopupThemeTransition>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_IPopupThemeTransition => _inner;


        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_PopupThemeTransition;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_PopupThemeTransition
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_PopupThemeTransition;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_PopupThemeTransition = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.PopupThemeTransition");
                }
            }
        }

        public PopupThemeTransition() :base(global::WinRT.DerivedComposed.Instance)
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Xaml_Media_Animation_PopupThemeTransition, global::ABI.Microsoft.UI.Xaml.Media.Animation.IPopupThemeTransitionMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static I As<I>() => ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.PopupThemeTransition").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IPopupThemeTransitionStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_IPopupThemeTransitionStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IPopupThemeTransitionStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IPopupThemeTransitionStatics = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.PopupThemeTransition", global::ABI.Microsoft.UI.Xaml.Media.Animation.IPopupThemeTransitionStaticsMethods.IID);
                }
            }
        }

        public static global::Microsoft.UI.Xaml.DependencyProperty FromHorizontalOffsetProperty => global::ABI.Microsoft.UI.Xaml.Media.Animation.IPopupThemeTransitionStaticsMethods.get_FromHorizontalOffsetProperty(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IPopupThemeTransitionStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty FromVerticalOffsetProperty => global::ABI.Microsoft.UI.Xaml.Media.Animation.IPopupThemeTransitionStaticsMethods.get_FromVerticalOffsetProperty(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IPopupThemeTransitionStatics);

        public static new PopupThemeTransition FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<PopupThemeTransition>.FromAbi(thisPtr);
        }

        internal PopupThemeTransition(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Media.Animation.IPopupThemeTransitionMethods.IID);

        }


        public static bool operator ==(PopupThemeTransition x, PopupThemeTransition y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(PopupThemeTransition x, PopupThemeTransition y) => !(x == y);
        public bool Equals(PopupThemeTransition other) => this == other;
        public override bool Equals(object obj) => obj is PopupThemeTransition that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public double FromHorizontalOffset
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Animation.IPopupThemeTransitionMethods.get_FromHorizontalOffset(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IPopupThemeTransition);
            set => global::ABI.Microsoft.UI.Xaml.Media.Animation.IPopupThemeTransitionMethods.set_FromHorizontalOffset(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IPopupThemeTransition, value);
        }

        public double FromVerticalOffset
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Animation.IPopupThemeTransitionMethods.get_FromVerticalOffset(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IPopupThemeTransition);
            set => global::ABI.Microsoft.UI.Xaml.Media.Animation.IPopupThemeTransitionMethods.set_FromVerticalOffset(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IPopupThemeTransition, value);
        }

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.PowerEase))]
    [global::ABI.Microsoft.UI.Xaml.Media.Animation.PowerEaseRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IPowerEase))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class PowerEase : EasingFunctionBase, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<PowerEase>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_IPowerEase => _inner;


        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_PowerEase;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_PowerEase
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_PowerEase;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_PowerEase = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.PowerEase");
                }
            }
        }

        public PowerEase() :base(global::WinRT.DerivedComposed.Instance)
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Xaml_Media_Animation_PowerEase, global::ABI.Microsoft.UI.Xaml.Media.Animation.IPowerEaseMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static new I As<I>() => ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.PowerEase").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IPowerEaseStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_IPowerEaseStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IPowerEaseStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IPowerEaseStatics = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.PowerEase", global::ABI.Microsoft.UI.Xaml.Media.Animation.IPowerEaseStaticsMethods.IID);
                }
            }
        }

        public static global::Microsoft.UI.Xaml.DependencyProperty PowerProperty => global::ABI.Microsoft.UI.Xaml.Media.Animation.IPowerEaseStaticsMethods.get_PowerProperty(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IPowerEaseStatics);

        public static new PowerEase FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<PowerEase>.FromAbi(thisPtr);
        }

        internal PowerEase(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Media.Animation.IPowerEaseMethods.IID);

        }


        public static bool operator ==(PowerEase x, PowerEase y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(PowerEase x, PowerEase y) => !(x == y);
        public bool Equals(PowerEase other) => this == other;
        public override bool Equals(object obj) => obj is PowerEase that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public double Power
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Animation.IPowerEaseMethods.get_Power(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IPowerEase);
            set => global::ABI.Microsoft.UI.Xaml.Media.Animation.IPowerEaseMethods.set_Power(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IPowerEase, value);
        }

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.QuadraticEase))]
    [global::ABI.Microsoft.UI.Xaml.Media.Animation.QuadraticEaseRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IQuadraticEase))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class QuadraticEase : EasingFunctionBase, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<QuadraticEase>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_IQuadraticEase => _inner;


        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_QuadraticEase;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_QuadraticEase
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_QuadraticEase;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_QuadraticEase = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.QuadraticEase");
                }
            }
        }

        public QuadraticEase() :base(global::WinRT.DerivedComposed.Instance)
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Xaml_Media_Animation_QuadraticEase, global::ABI.Microsoft.UI.Xaml.Media.Animation.IQuadraticEaseMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static new QuadraticEase FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<QuadraticEase>.FromAbi(thisPtr);
        }

        internal QuadraticEase(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Media.Animation.IQuadraticEaseMethods.IID);

        }


        public static bool operator ==(QuadraticEase x, QuadraticEase y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(QuadraticEase x, QuadraticEase y) => !(x == y);
        public bool Equals(QuadraticEase other) => this == other;
        public override bool Equals(object obj) => obj is QuadraticEase that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.QuarticEase))]
    [global::ABI.Microsoft.UI.Xaml.Media.Animation.QuarticEaseRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IQuarticEase))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class QuarticEase : EasingFunctionBase, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<QuarticEase>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_IQuarticEase => _inner;


        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_QuarticEase;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_QuarticEase
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_QuarticEase;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_QuarticEase = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.QuarticEase");
                }
            }
        }

        public QuarticEase() :base(global::WinRT.DerivedComposed.Instance)
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Xaml_Media_Animation_QuarticEase, global::ABI.Microsoft.UI.Xaml.Media.Animation.IQuarticEaseMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static new QuarticEase FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<QuarticEase>.FromAbi(thisPtr);
        }

        internal QuarticEase(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Media.Animation.IQuarticEaseMethods.IID);

        }


        public static bool operator ==(QuarticEase x, QuarticEase y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(QuarticEase x, QuarticEase y) => !(x == y);
        public bool Equals(QuarticEase other) => this == other;
        public override bool Equals(object obj) => obj is QuarticEase that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.QuinticEase))]
    [global::ABI.Microsoft.UI.Xaml.Media.Animation.QuinticEaseRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IQuinticEase))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class QuinticEase : EasingFunctionBase, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<QuinticEase>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_IQuinticEase => _inner;


        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_QuinticEase;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_QuinticEase
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_QuinticEase;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_QuinticEase = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.QuinticEase");
                }
            }
        }

        public QuinticEase() :base(global::WinRT.DerivedComposed.Instance)
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Xaml_Media_Animation_QuinticEase, global::ABI.Microsoft.UI.Xaml.Media.Animation.IQuinticEaseMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static new QuinticEase FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<QuinticEase>.FromAbi(thisPtr);
        }

        internal QuinticEase(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Media.Animation.IQuinticEaseMethods.IID);

        }


        public static bool operator ==(QuinticEase x, QuinticEase y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(QuinticEase x, QuinticEase y) => !(x == y);
        public bool Equals(QuinticEase other) => this == other;
        public override bool Equals(object obj) => obj is QuinticEase that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.ReorderThemeTransition))]
    [global::ABI.Microsoft.UI.Xaml.Media.Animation.ReorderThemeTransitionRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IReorderThemeTransition))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class ReorderThemeTransition : Transition, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<ReorderThemeTransition>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_IReorderThemeTransition => _inner;


        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_ReorderThemeTransition;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_ReorderThemeTransition
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_ReorderThemeTransition;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_ReorderThemeTransition = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.ReorderThemeTransition");
                }
            }
        }

        public ReorderThemeTransition() :base(global::WinRT.DerivedComposed.Instance)
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ReorderThemeTransition, global::ABI.Microsoft.UI.Xaml.Media.Animation.IReorderThemeTransitionMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static new ReorderThemeTransition FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<ReorderThemeTransition>.FromAbi(thisPtr);
        }

        internal ReorderThemeTransition(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Media.Animation.IReorderThemeTransitionMethods.IID);

        }


        public static bool operator ==(ReorderThemeTransition x, ReorderThemeTransition y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(ReorderThemeTransition x, ReorderThemeTransition y) => !(x == y);
        public bool Equals(ReorderThemeTransition other) => this == other;
        public override bool Equals(object obj) => obj is ReorderThemeTransition that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.RepositionThemeAnimation))]
    [global::ABI.Microsoft.UI.Xaml.Media.Animation.RepositionThemeAnimationRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IRepositionThemeAnimation))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class RepositionThemeAnimation : Timeline, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<RepositionThemeAnimation>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_IRepositionThemeAnimation => _inner;


        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_RepositionThemeAnimation;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_RepositionThemeAnimation
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_RepositionThemeAnimation;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_RepositionThemeAnimation = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.RepositionThemeAnimation");
                }
            }
        }

        public RepositionThemeAnimation() :base(global::WinRT.DerivedComposed.Instance)
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Xaml_Media_Animation_RepositionThemeAnimation, global::ABI.Microsoft.UI.Xaml.Media.Animation.IRepositionThemeAnimationMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static new I As<I>() => ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.RepositionThemeAnimation").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IRepositionThemeAnimationStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_IRepositionThemeAnimationStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IRepositionThemeAnimationStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IRepositionThemeAnimationStatics = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.RepositionThemeAnimation", global::ABI.Microsoft.UI.Xaml.Media.Animation.IRepositionThemeAnimationStaticsMethods.IID);
                }
            }
        }

        public static global::Microsoft.UI.Xaml.DependencyProperty FromHorizontalOffsetProperty => global::ABI.Microsoft.UI.Xaml.Media.Animation.IRepositionThemeAnimationStaticsMethods.get_FromHorizontalOffsetProperty(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IRepositionThemeAnimationStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty FromVerticalOffsetProperty => global::ABI.Microsoft.UI.Xaml.Media.Animation.IRepositionThemeAnimationStaticsMethods.get_FromVerticalOffsetProperty(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IRepositionThemeAnimationStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty TargetNameProperty => global::ABI.Microsoft.UI.Xaml.Media.Animation.IRepositionThemeAnimationStaticsMethods.get_TargetNameProperty(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IRepositionThemeAnimationStatics);

        public static new RepositionThemeAnimation FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<RepositionThemeAnimation>.FromAbi(thisPtr);
        }

        internal RepositionThemeAnimation(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Media.Animation.IRepositionThemeAnimationMethods.IID);

        }


        public static bool operator ==(RepositionThemeAnimation x, RepositionThemeAnimation y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(RepositionThemeAnimation x, RepositionThemeAnimation y) => !(x == y);
        public bool Equals(RepositionThemeAnimation other) => this == other;
        public override bool Equals(object obj) => obj is RepositionThemeAnimation that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public double FromHorizontalOffset
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Animation.IRepositionThemeAnimationMethods.get_FromHorizontalOffset(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IRepositionThemeAnimation);
            set => global::ABI.Microsoft.UI.Xaml.Media.Animation.IRepositionThemeAnimationMethods.set_FromHorizontalOffset(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IRepositionThemeAnimation, value);
        }

        public double FromVerticalOffset
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Animation.IRepositionThemeAnimationMethods.get_FromVerticalOffset(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IRepositionThemeAnimation);
            set => global::ABI.Microsoft.UI.Xaml.Media.Animation.IRepositionThemeAnimationMethods.set_FromVerticalOffset(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IRepositionThemeAnimation, value);
        }

        public string TargetName
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Animation.IRepositionThemeAnimationMethods.get_TargetName(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IRepositionThemeAnimation);
            set => global::ABI.Microsoft.UI.Xaml.Media.Animation.IRepositionThemeAnimationMethods.set_TargetName(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IRepositionThemeAnimation, value);
        }

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.RepositionThemeTransition))]
    [global::ABI.Microsoft.UI.Xaml.Media.Animation.RepositionThemeTransitionRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IRepositionThemeTransition))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class RepositionThemeTransition : Transition, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<RepositionThemeTransition>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_IRepositionThemeTransition => _inner;


        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_RepositionThemeTransition;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_RepositionThemeTransition
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_RepositionThemeTransition;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_RepositionThemeTransition = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.RepositionThemeTransition");
                }
            }
        }

        public RepositionThemeTransition() :base(global::WinRT.DerivedComposed.Instance)
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Xaml_Media_Animation_RepositionThemeTransition, global::ABI.Microsoft.UI.Xaml.Media.Animation.IRepositionThemeTransitionMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static I As<I>() => ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.RepositionThemeTransition").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IRepositionThemeTransitionStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_IRepositionThemeTransitionStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IRepositionThemeTransitionStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IRepositionThemeTransitionStatics = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.RepositionThemeTransition", global::ABI.Microsoft.UI.Xaml.Media.Animation.IRepositionThemeTransitionStaticsMethods.IID);
                }
            }
        }

        public static global::Microsoft.UI.Xaml.DependencyProperty IsStaggeringEnabledProperty => global::ABI.Microsoft.UI.Xaml.Media.Animation.IRepositionThemeTransitionStaticsMethods.get_IsStaggeringEnabledProperty(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IRepositionThemeTransitionStatics);

        public static new RepositionThemeTransition FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<RepositionThemeTransition>.FromAbi(thisPtr);
        }

        internal RepositionThemeTransition(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Media.Animation.IRepositionThemeTransitionMethods.IID);

        }


        public static bool operator ==(RepositionThemeTransition x, RepositionThemeTransition y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(RepositionThemeTransition x, RepositionThemeTransition y) => !(x == y);
        public bool Equals(RepositionThemeTransition other) => this == other;
        public override bool Equals(object obj) => obj is RepositionThemeTransition that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public bool IsStaggeringEnabled
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Animation.IRepositionThemeTransitionMethods.get_IsStaggeringEnabled(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IRepositionThemeTransition);
            set => global::ABI.Microsoft.UI.Xaml.Media.Animation.IRepositionThemeTransitionMethods.set_IsStaggeringEnabled(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IRepositionThemeTransition, value);
        }

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.SineEase))]
    [global::ABI.Microsoft.UI.Xaml.Media.Animation.SineEaseRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ISineEase))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class SineEase : EasingFunctionBase, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<SineEase>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_ISineEase => _inner;


        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_SineEase;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_SineEase
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_SineEase;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_SineEase = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.SineEase");
                }
            }
        }

        public SineEase() :base(global::WinRT.DerivedComposed.Instance)
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Xaml_Media_Animation_SineEase, global::ABI.Microsoft.UI.Xaml.Media.Animation.ISineEaseMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static new SineEase FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<SineEase>.FromAbi(thisPtr);
        }

        internal SineEase(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Media.Animation.ISineEaseMethods.IID);

        }


        public static bool operator ==(SineEase x, SineEase y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(SineEase x, SineEase y) => !(x == y);
        public bool Equals(SineEase other) => this == other;
        public override bool Equals(object obj) => obj is SineEase that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<SlideNavigationTransitionEffect>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public enum SlideNavigationTransitionEffect : int
    {
        FromBottom = unchecked((int)0),
        FromLeft = unchecked((int)0x1),
        FromRight = unchecked((int)0x2),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.SlideNavigationTransitionInfo))]
    [global::ABI.Microsoft.UI.Xaml.Media.Animation.SlideNavigationTransitionInfoRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ISlideNavigationTransitionInfo))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class SlideNavigationTransitionInfo : NavigationTransitionInfo, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<SlideNavigationTransitionInfo>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_ISlideNavigationTransitionInfo => _inner;


        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_SlideNavigationTransitionInfo;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_SlideNavigationTransitionInfo
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_SlideNavigationTransitionInfo;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_SlideNavigationTransitionInfo = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.SlideNavigationTransitionInfo");
                }
            }
        }

        public SlideNavigationTransitionInfo() :base(global::WinRT.DerivedComposed.Instance)
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Xaml_Media_Animation_SlideNavigationTransitionInfo, global::ABI.Microsoft.UI.Xaml.Media.Animation.ISlideNavigationTransitionInfoMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static I As<I>() => ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.SlideNavigationTransitionInfo").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_ISlideNavigationTransitionInfoStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_ISlideNavigationTransitionInfoStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_ISlideNavigationTransitionInfoStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_ISlideNavigationTransitionInfoStatics = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.SlideNavigationTransitionInfo", global::ABI.Microsoft.UI.Xaml.Media.Animation.ISlideNavigationTransitionInfoStaticsMethods.IID);
                }
            }
        }

        public static global::Microsoft.UI.Xaml.DependencyProperty EffectProperty => global::ABI.Microsoft.UI.Xaml.Media.Animation.ISlideNavigationTransitionInfoStaticsMethods.get_EffectProperty(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ISlideNavigationTransitionInfoStatics);

        public static new SlideNavigationTransitionInfo FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<SlideNavigationTransitionInfo>.FromAbi(thisPtr);
        }

        internal SlideNavigationTransitionInfo(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Media.Animation.ISlideNavigationTransitionInfoMethods.IID);

        }


        public static bool operator ==(SlideNavigationTransitionInfo x, SlideNavigationTransitionInfo y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(SlideNavigationTransitionInfo x, SlideNavigationTransitionInfo y) => !(x == y);
        public bool Equals(SlideNavigationTransitionInfo other) => this == other;
        public override bool Equals(object obj) => obj is SlideNavigationTransitionInfo that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public SlideNavigationTransitionEffect Effect
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Animation.ISlideNavigationTransitionInfoMethods.get_Effect(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ISlideNavigationTransitionInfo);
            set => global::ABI.Microsoft.UI.Xaml.Media.Animation.ISlideNavigationTransitionInfoMethods.set_Effect(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ISlideNavigationTransitionInfo, value);
        }

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.SplineColorKeyFrame))]
    [global::ABI.Microsoft.UI.Xaml.Media.Animation.SplineColorKeyFrameRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ISplineColorKeyFrame))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class SplineColorKeyFrame : ColorKeyFrame, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<SplineColorKeyFrame>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_ISplineColorKeyFrame => _inner;


        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_SplineColorKeyFrame;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_SplineColorKeyFrame
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_SplineColorKeyFrame;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_SplineColorKeyFrame = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.SplineColorKeyFrame");
                }
            }
        }

        public SplineColorKeyFrame() :base(global::WinRT.DerivedComposed.Instance)
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Xaml_Media_Animation_SplineColorKeyFrame, global::ABI.Microsoft.UI.Xaml.Media.Animation.ISplineColorKeyFrameMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static new I As<I>() => ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.SplineColorKeyFrame").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_ISplineColorKeyFrameStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_ISplineColorKeyFrameStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_ISplineColorKeyFrameStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_ISplineColorKeyFrameStatics = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.SplineColorKeyFrame", global::ABI.Microsoft.UI.Xaml.Media.Animation.ISplineColorKeyFrameStaticsMethods.IID);
                }
            }
        }

        public static global::Microsoft.UI.Xaml.DependencyProperty KeySplineProperty => global::ABI.Microsoft.UI.Xaml.Media.Animation.ISplineColorKeyFrameStaticsMethods.get_KeySplineProperty(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ISplineColorKeyFrameStatics);

        public static new SplineColorKeyFrame FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<SplineColorKeyFrame>.FromAbi(thisPtr);
        }

        internal SplineColorKeyFrame(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Media.Animation.ISplineColorKeyFrameMethods.IID);

        }


        public static bool operator ==(SplineColorKeyFrame x, SplineColorKeyFrame y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(SplineColorKeyFrame x, SplineColorKeyFrame y) => !(x == y);
        public bool Equals(SplineColorKeyFrame other) => this == other;
        public override bool Equals(object obj) => obj is SplineColorKeyFrame that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public KeySpline KeySpline
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Animation.ISplineColorKeyFrameMethods.get_KeySpline(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ISplineColorKeyFrame);
            set => global::ABI.Microsoft.UI.Xaml.Media.Animation.ISplineColorKeyFrameMethods.set_KeySpline(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ISplineColorKeyFrame, value);
        }

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.SplineDoubleKeyFrame))]
    [global::ABI.Microsoft.UI.Xaml.Media.Animation.SplineDoubleKeyFrameRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ISplineDoubleKeyFrame))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class SplineDoubleKeyFrame : DoubleKeyFrame, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<SplineDoubleKeyFrame>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_ISplineDoubleKeyFrame => _inner;


        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_SplineDoubleKeyFrame;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_SplineDoubleKeyFrame
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_SplineDoubleKeyFrame;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_SplineDoubleKeyFrame = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.SplineDoubleKeyFrame");
                }
            }
        }

        public SplineDoubleKeyFrame() :base(global::WinRT.DerivedComposed.Instance)
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Xaml_Media_Animation_SplineDoubleKeyFrame, global::ABI.Microsoft.UI.Xaml.Media.Animation.ISplineDoubleKeyFrameMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static new I As<I>() => ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.SplineDoubleKeyFrame").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_ISplineDoubleKeyFrameStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_ISplineDoubleKeyFrameStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_ISplineDoubleKeyFrameStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_ISplineDoubleKeyFrameStatics = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.SplineDoubleKeyFrame", global::ABI.Microsoft.UI.Xaml.Media.Animation.ISplineDoubleKeyFrameStaticsMethods.IID);
                }
            }
        }

        public static global::Microsoft.UI.Xaml.DependencyProperty KeySplineProperty => global::ABI.Microsoft.UI.Xaml.Media.Animation.ISplineDoubleKeyFrameStaticsMethods.get_KeySplineProperty(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ISplineDoubleKeyFrameStatics);

        public static new SplineDoubleKeyFrame FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<SplineDoubleKeyFrame>.FromAbi(thisPtr);
        }

        internal SplineDoubleKeyFrame(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Media.Animation.ISplineDoubleKeyFrameMethods.IID);

        }


        public static bool operator ==(SplineDoubleKeyFrame x, SplineDoubleKeyFrame y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(SplineDoubleKeyFrame x, SplineDoubleKeyFrame y) => !(x == y);
        public bool Equals(SplineDoubleKeyFrame other) => this == other;
        public override bool Equals(object obj) => obj is SplineDoubleKeyFrame that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public KeySpline KeySpline
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Animation.ISplineDoubleKeyFrameMethods.get_KeySpline(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ISplineDoubleKeyFrame);
            set => global::ABI.Microsoft.UI.Xaml.Media.Animation.ISplineDoubleKeyFrameMethods.set_KeySpline(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ISplineDoubleKeyFrame, value);
        }

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.SplinePointKeyFrame))]
    [global::ABI.Microsoft.UI.Xaml.Media.Animation.SplinePointKeyFrameRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ISplinePointKeyFrame))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class SplinePointKeyFrame : PointKeyFrame, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<SplinePointKeyFrame>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_ISplinePointKeyFrame => _inner;


        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_SplinePointKeyFrame;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_SplinePointKeyFrame
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_SplinePointKeyFrame;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_SplinePointKeyFrame = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.SplinePointKeyFrame");
                }
            }
        }

        public SplinePointKeyFrame() :base(global::WinRT.DerivedComposed.Instance)
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Xaml_Media_Animation_SplinePointKeyFrame, global::ABI.Microsoft.UI.Xaml.Media.Animation.ISplinePointKeyFrameMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static new I As<I>() => ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.SplinePointKeyFrame").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_ISplinePointKeyFrameStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_ISplinePointKeyFrameStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_ISplinePointKeyFrameStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_ISplinePointKeyFrameStatics = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.SplinePointKeyFrame", global::ABI.Microsoft.UI.Xaml.Media.Animation.ISplinePointKeyFrameStaticsMethods.IID);
                }
            }
        }

        public static global::Microsoft.UI.Xaml.DependencyProperty KeySplineProperty => global::ABI.Microsoft.UI.Xaml.Media.Animation.ISplinePointKeyFrameStaticsMethods.get_KeySplineProperty(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ISplinePointKeyFrameStatics);

        public static new SplinePointKeyFrame FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<SplinePointKeyFrame>.FromAbi(thisPtr);
        }

        internal SplinePointKeyFrame(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Media.Animation.ISplinePointKeyFrameMethods.IID);

        }


        public static bool operator ==(SplinePointKeyFrame x, SplinePointKeyFrame y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(SplinePointKeyFrame x, SplinePointKeyFrame y) => !(x == y);
        public bool Equals(SplinePointKeyFrame other) => this == other;
        public override bool Equals(object obj) => obj is SplinePointKeyFrame that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public KeySpline KeySpline
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Animation.ISplinePointKeyFrameMethods.get_KeySpline(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ISplinePointKeyFrame);
            set => global::ABI.Microsoft.UI.Xaml.Media.Animation.ISplinePointKeyFrameMethods.set_KeySpline(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ISplinePointKeyFrame, value);
        }

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.SplitCloseThemeAnimation))]
    [global::ABI.Microsoft.UI.Xaml.Media.Animation.SplitCloseThemeAnimationRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ISplitCloseThemeAnimation))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class SplitCloseThemeAnimation : Timeline, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<SplitCloseThemeAnimation>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_ISplitCloseThemeAnimation => _inner;


        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_SplitCloseThemeAnimation;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_SplitCloseThemeAnimation
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_SplitCloseThemeAnimation;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_SplitCloseThemeAnimation = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.SplitCloseThemeAnimation");
                }
            }
        }

        public SplitCloseThemeAnimation() :base(global::WinRT.DerivedComposed.Instance)
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Xaml_Media_Animation_SplitCloseThemeAnimation, global::ABI.Microsoft.UI.Xaml.Media.Animation.ISplitCloseThemeAnimationMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static new I As<I>() => ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.SplitCloseThemeAnimation").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_ISplitCloseThemeAnimationStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_ISplitCloseThemeAnimationStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_ISplitCloseThemeAnimationStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_ISplitCloseThemeAnimationStatics = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.SplitCloseThemeAnimation", global::ABI.Microsoft.UI.Xaml.Media.Animation.ISplitCloseThemeAnimationStaticsMethods.IID);
                }
            }
        }

        public static global::Microsoft.UI.Xaml.DependencyProperty ClosedLengthProperty => global::ABI.Microsoft.UI.Xaml.Media.Animation.ISplitCloseThemeAnimationStaticsMethods.get_ClosedLengthProperty(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ISplitCloseThemeAnimationStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty ClosedTargetNameProperty => global::ABI.Microsoft.UI.Xaml.Media.Animation.ISplitCloseThemeAnimationStaticsMethods.get_ClosedTargetNameProperty(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ISplitCloseThemeAnimationStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty ClosedTargetProperty => global::ABI.Microsoft.UI.Xaml.Media.Animation.ISplitCloseThemeAnimationStaticsMethods.get_ClosedTargetProperty(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ISplitCloseThemeAnimationStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty ContentTargetNameProperty => global::ABI.Microsoft.UI.Xaml.Media.Animation.ISplitCloseThemeAnimationStaticsMethods.get_ContentTargetNameProperty(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ISplitCloseThemeAnimationStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty ContentTargetProperty => global::ABI.Microsoft.UI.Xaml.Media.Animation.ISplitCloseThemeAnimationStaticsMethods.get_ContentTargetProperty(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ISplitCloseThemeAnimationStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty ContentTranslationDirectionProperty => global::ABI.Microsoft.UI.Xaml.Media.Animation.ISplitCloseThemeAnimationStaticsMethods.get_ContentTranslationDirectionProperty(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ISplitCloseThemeAnimationStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty ContentTranslationOffsetProperty => global::ABI.Microsoft.UI.Xaml.Media.Animation.ISplitCloseThemeAnimationStaticsMethods.get_ContentTranslationOffsetProperty(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ISplitCloseThemeAnimationStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty OffsetFromCenterProperty => global::ABI.Microsoft.UI.Xaml.Media.Animation.ISplitCloseThemeAnimationStaticsMethods.get_OffsetFromCenterProperty(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ISplitCloseThemeAnimationStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty OpenedLengthProperty => global::ABI.Microsoft.UI.Xaml.Media.Animation.ISplitCloseThemeAnimationStaticsMethods.get_OpenedLengthProperty(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ISplitCloseThemeAnimationStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty OpenedTargetNameProperty => global::ABI.Microsoft.UI.Xaml.Media.Animation.ISplitCloseThemeAnimationStaticsMethods.get_OpenedTargetNameProperty(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ISplitCloseThemeAnimationStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty OpenedTargetProperty => global::ABI.Microsoft.UI.Xaml.Media.Animation.ISplitCloseThemeAnimationStaticsMethods.get_OpenedTargetProperty(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ISplitCloseThemeAnimationStatics);

        public static new SplitCloseThemeAnimation FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<SplitCloseThemeAnimation>.FromAbi(thisPtr);
        }

        internal SplitCloseThemeAnimation(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Media.Animation.ISplitCloseThemeAnimationMethods.IID);

        }


        public static bool operator ==(SplitCloseThemeAnimation x, SplitCloseThemeAnimation y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(SplitCloseThemeAnimation x, SplitCloseThemeAnimation y) => !(x == y);
        public bool Equals(SplitCloseThemeAnimation other) => this == other;
        public override bool Equals(object obj) => obj is SplitCloseThemeAnimation that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public double ClosedLength
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Animation.ISplitCloseThemeAnimationMethods.get_ClosedLength(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ISplitCloseThemeAnimation);
            set => global::ABI.Microsoft.UI.Xaml.Media.Animation.ISplitCloseThemeAnimationMethods.set_ClosedLength(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ISplitCloseThemeAnimation, value);
        }

        public global::Microsoft.UI.Xaml.DependencyObject ClosedTarget
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Animation.ISplitCloseThemeAnimationMethods.get_ClosedTarget(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ISplitCloseThemeAnimation);
            set => global::ABI.Microsoft.UI.Xaml.Media.Animation.ISplitCloseThemeAnimationMethods.set_ClosedTarget(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ISplitCloseThemeAnimation, value);
        }

        public string ClosedTargetName
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Animation.ISplitCloseThemeAnimationMethods.get_ClosedTargetName(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ISplitCloseThemeAnimation);
            set => global::ABI.Microsoft.UI.Xaml.Media.Animation.ISplitCloseThemeAnimationMethods.set_ClosedTargetName(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ISplitCloseThemeAnimation, value);
        }

        public global::Microsoft.UI.Xaml.DependencyObject ContentTarget
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Animation.ISplitCloseThemeAnimationMethods.get_ContentTarget(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ISplitCloseThemeAnimation);
            set => global::ABI.Microsoft.UI.Xaml.Media.Animation.ISplitCloseThemeAnimationMethods.set_ContentTarget(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ISplitCloseThemeAnimation, value);
        }

        public string ContentTargetName
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Animation.ISplitCloseThemeAnimationMethods.get_ContentTargetName(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ISplitCloseThemeAnimation);
            set => global::ABI.Microsoft.UI.Xaml.Media.Animation.ISplitCloseThemeAnimationMethods.set_ContentTargetName(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ISplitCloseThemeAnimation, value);
        }

        public global::Microsoft.UI.Xaml.Controls.Primitives.AnimationDirection ContentTranslationDirection
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Animation.ISplitCloseThemeAnimationMethods.get_ContentTranslationDirection(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ISplitCloseThemeAnimation);
            set => global::ABI.Microsoft.UI.Xaml.Media.Animation.ISplitCloseThemeAnimationMethods.set_ContentTranslationDirection(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ISplitCloseThemeAnimation, value);
        }

        public double ContentTranslationOffset
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Animation.ISplitCloseThemeAnimationMethods.get_ContentTranslationOffset(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ISplitCloseThemeAnimation);
            set => global::ABI.Microsoft.UI.Xaml.Media.Animation.ISplitCloseThemeAnimationMethods.set_ContentTranslationOffset(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ISplitCloseThemeAnimation, value);
        }

        public double OffsetFromCenter
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Animation.ISplitCloseThemeAnimationMethods.get_OffsetFromCenter(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ISplitCloseThemeAnimation);
            set => global::ABI.Microsoft.UI.Xaml.Media.Animation.ISplitCloseThemeAnimationMethods.set_OffsetFromCenter(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ISplitCloseThemeAnimation, value);
        }

        public double OpenedLength
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Animation.ISplitCloseThemeAnimationMethods.get_OpenedLength(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ISplitCloseThemeAnimation);
            set => global::ABI.Microsoft.UI.Xaml.Media.Animation.ISplitCloseThemeAnimationMethods.set_OpenedLength(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ISplitCloseThemeAnimation, value);
        }

        public global::Microsoft.UI.Xaml.DependencyObject OpenedTarget
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Animation.ISplitCloseThemeAnimationMethods.get_OpenedTarget(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ISplitCloseThemeAnimation);
            set => global::ABI.Microsoft.UI.Xaml.Media.Animation.ISplitCloseThemeAnimationMethods.set_OpenedTarget(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ISplitCloseThemeAnimation, value);
        }

        public string OpenedTargetName
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Animation.ISplitCloseThemeAnimationMethods.get_OpenedTargetName(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ISplitCloseThemeAnimation);
            set => global::ABI.Microsoft.UI.Xaml.Media.Animation.ISplitCloseThemeAnimationMethods.set_OpenedTargetName(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ISplitCloseThemeAnimation, value);
        }

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.SplitOpenThemeAnimation))]
    [global::ABI.Microsoft.UI.Xaml.Media.Animation.SplitOpenThemeAnimationRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ISplitOpenThemeAnimation))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class SplitOpenThemeAnimation : Timeline, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<SplitOpenThemeAnimation>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_ISplitOpenThemeAnimation => _inner;


        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_SplitOpenThemeAnimation;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_SplitOpenThemeAnimation
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_SplitOpenThemeAnimation;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_SplitOpenThemeAnimation = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.SplitOpenThemeAnimation");
                }
            }
        }

        public SplitOpenThemeAnimation() :base(global::WinRT.DerivedComposed.Instance)
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Xaml_Media_Animation_SplitOpenThemeAnimation, global::ABI.Microsoft.UI.Xaml.Media.Animation.ISplitOpenThemeAnimationMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static new I As<I>() => ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.SplitOpenThemeAnimation").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_ISplitOpenThemeAnimationStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_ISplitOpenThemeAnimationStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_ISplitOpenThemeAnimationStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_ISplitOpenThemeAnimationStatics = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.SplitOpenThemeAnimation", global::ABI.Microsoft.UI.Xaml.Media.Animation.ISplitOpenThemeAnimationStaticsMethods.IID);
                }
            }
        }

        public static global::Microsoft.UI.Xaml.DependencyProperty ClosedLengthProperty => global::ABI.Microsoft.UI.Xaml.Media.Animation.ISplitOpenThemeAnimationStaticsMethods.get_ClosedLengthProperty(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ISplitOpenThemeAnimationStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty ClosedTargetNameProperty => global::ABI.Microsoft.UI.Xaml.Media.Animation.ISplitOpenThemeAnimationStaticsMethods.get_ClosedTargetNameProperty(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ISplitOpenThemeAnimationStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty ClosedTargetProperty => global::ABI.Microsoft.UI.Xaml.Media.Animation.ISplitOpenThemeAnimationStaticsMethods.get_ClosedTargetProperty(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ISplitOpenThemeAnimationStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty ContentTargetNameProperty => global::ABI.Microsoft.UI.Xaml.Media.Animation.ISplitOpenThemeAnimationStaticsMethods.get_ContentTargetNameProperty(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ISplitOpenThemeAnimationStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty ContentTargetProperty => global::ABI.Microsoft.UI.Xaml.Media.Animation.ISplitOpenThemeAnimationStaticsMethods.get_ContentTargetProperty(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ISplitOpenThemeAnimationStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty ContentTranslationDirectionProperty => global::ABI.Microsoft.UI.Xaml.Media.Animation.ISplitOpenThemeAnimationStaticsMethods.get_ContentTranslationDirectionProperty(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ISplitOpenThemeAnimationStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty ContentTranslationOffsetProperty => global::ABI.Microsoft.UI.Xaml.Media.Animation.ISplitOpenThemeAnimationStaticsMethods.get_ContentTranslationOffsetProperty(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ISplitOpenThemeAnimationStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty OffsetFromCenterProperty => global::ABI.Microsoft.UI.Xaml.Media.Animation.ISplitOpenThemeAnimationStaticsMethods.get_OffsetFromCenterProperty(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ISplitOpenThemeAnimationStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty OpenedLengthProperty => global::ABI.Microsoft.UI.Xaml.Media.Animation.ISplitOpenThemeAnimationStaticsMethods.get_OpenedLengthProperty(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ISplitOpenThemeAnimationStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty OpenedTargetNameProperty => global::ABI.Microsoft.UI.Xaml.Media.Animation.ISplitOpenThemeAnimationStaticsMethods.get_OpenedTargetNameProperty(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ISplitOpenThemeAnimationStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty OpenedTargetProperty => global::ABI.Microsoft.UI.Xaml.Media.Animation.ISplitOpenThemeAnimationStaticsMethods.get_OpenedTargetProperty(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ISplitOpenThemeAnimationStatics);

        public static new SplitOpenThemeAnimation FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<SplitOpenThemeAnimation>.FromAbi(thisPtr);
        }

        internal SplitOpenThemeAnimation(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Media.Animation.ISplitOpenThemeAnimationMethods.IID);

        }


        public static bool operator ==(SplitOpenThemeAnimation x, SplitOpenThemeAnimation y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(SplitOpenThemeAnimation x, SplitOpenThemeAnimation y) => !(x == y);
        public bool Equals(SplitOpenThemeAnimation other) => this == other;
        public override bool Equals(object obj) => obj is SplitOpenThemeAnimation that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public double ClosedLength
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Animation.ISplitOpenThemeAnimationMethods.get_ClosedLength(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ISplitOpenThemeAnimation);
            set => global::ABI.Microsoft.UI.Xaml.Media.Animation.ISplitOpenThemeAnimationMethods.set_ClosedLength(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ISplitOpenThemeAnimation, value);
        }

        public global::Microsoft.UI.Xaml.DependencyObject ClosedTarget
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Animation.ISplitOpenThemeAnimationMethods.get_ClosedTarget(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ISplitOpenThemeAnimation);
            set => global::ABI.Microsoft.UI.Xaml.Media.Animation.ISplitOpenThemeAnimationMethods.set_ClosedTarget(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ISplitOpenThemeAnimation, value);
        }

        public string ClosedTargetName
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Animation.ISplitOpenThemeAnimationMethods.get_ClosedTargetName(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ISplitOpenThemeAnimation);
            set => global::ABI.Microsoft.UI.Xaml.Media.Animation.ISplitOpenThemeAnimationMethods.set_ClosedTargetName(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ISplitOpenThemeAnimation, value);
        }

        public global::Microsoft.UI.Xaml.DependencyObject ContentTarget
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Animation.ISplitOpenThemeAnimationMethods.get_ContentTarget(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ISplitOpenThemeAnimation);
            set => global::ABI.Microsoft.UI.Xaml.Media.Animation.ISplitOpenThemeAnimationMethods.set_ContentTarget(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ISplitOpenThemeAnimation, value);
        }

        public string ContentTargetName
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Animation.ISplitOpenThemeAnimationMethods.get_ContentTargetName(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ISplitOpenThemeAnimation);
            set => global::ABI.Microsoft.UI.Xaml.Media.Animation.ISplitOpenThemeAnimationMethods.set_ContentTargetName(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ISplitOpenThemeAnimation, value);
        }

        public global::Microsoft.UI.Xaml.Controls.Primitives.AnimationDirection ContentTranslationDirection
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Animation.ISplitOpenThemeAnimationMethods.get_ContentTranslationDirection(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ISplitOpenThemeAnimation);
            set => global::ABI.Microsoft.UI.Xaml.Media.Animation.ISplitOpenThemeAnimationMethods.set_ContentTranslationDirection(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ISplitOpenThemeAnimation, value);
        }

        public double ContentTranslationOffset
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Animation.ISplitOpenThemeAnimationMethods.get_ContentTranslationOffset(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ISplitOpenThemeAnimation);
            set => global::ABI.Microsoft.UI.Xaml.Media.Animation.ISplitOpenThemeAnimationMethods.set_ContentTranslationOffset(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ISplitOpenThemeAnimation, value);
        }

        public double OffsetFromCenter
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Animation.ISplitOpenThemeAnimationMethods.get_OffsetFromCenter(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ISplitOpenThemeAnimation);
            set => global::ABI.Microsoft.UI.Xaml.Media.Animation.ISplitOpenThemeAnimationMethods.set_OffsetFromCenter(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ISplitOpenThemeAnimation, value);
        }

        public double OpenedLength
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Animation.ISplitOpenThemeAnimationMethods.get_OpenedLength(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ISplitOpenThemeAnimation);
            set => global::ABI.Microsoft.UI.Xaml.Media.Animation.ISplitOpenThemeAnimationMethods.set_OpenedLength(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ISplitOpenThemeAnimation, value);
        }

        public global::Microsoft.UI.Xaml.DependencyObject OpenedTarget
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Animation.ISplitOpenThemeAnimationMethods.get_OpenedTarget(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ISplitOpenThemeAnimation);
            set => global::ABI.Microsoft.UI.Xaml.Media.Animation.ISplitOpenThemeAnimationMethods.set_OpenedTarget(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ISplitOpenThemeAnimation, value);
        }

        public string OpenedTargetName
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Animation.ISplitOpenThemeAnimationMethods.get_OpenedTargetName(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ISplitOpenThemeAnimation);
            set => global::ABI.Microsoft.UI.Xaml.Media.Animation.ISplitOpenThemeAnimationMethods.set_OpenedTargetName(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ISplitOpenThemeAnimation, value);
        }

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.Storyboard))]
    [global::ABI.Microsoft.UI.Xaml.Media.Animation.StoryboardRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IStoryboard))]
    [global::Microsoft.UI.Xaml.Markup.ContentProperty(Name = @"Children")]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class Storyboard : Timeline, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<Storyboard>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_IStoryboard => _inner;


        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_Storyboard;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_Storyboard
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_Storyboard;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_Storyboard = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.Storyboard");
                }
            }
        }

        public Storyboard() :base(global::WinRT.DerivedComposed.Instance)
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Xaml_Media_Animation_Storyboard, global::ABI.Microsoft.UI.Xaml.Media.Animation.IStoryboardMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static new I As<I>() => ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.Storyboard").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IStoryboardStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_IStoryboardStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IStoryboardStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_IStoryboardStatics = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.Storyboard", global::ABI.Microsoft.UI.Xaml.Media.Animation.IStoryboardStaticsMethods.IID);
                }
            }
        }

        public static string GetTargetProperty(Timeline element) => global::ABI.Microsoft.UI.Xaml.Media.Animation.IStoryboardStaticsMethods.GetTargetProperty(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IStoryboardStatics, element);

        public static void SetTargetProperty(Timeline element, string path) => global::ABI.Microsoft.UI.Xaml.Media.Animation.IStoryboardStaticsMethods.SetTargetProperty(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IStoryboardStatics, element, path);

        public static string GetTargetName(Timeline element) => global::ABI.Microsoft.UI.Xaml.Media.Animation.IStoryboardStaticsMethods.GetTargetName(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IStoryboardStatics, element);

        public static void SetTargetName(Timeline element, string name) => global::ABI.Microsoft.UI.Xaml.Media.Animation.IStoryboardStaticsMethods.SetTargetName(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IStoryboardStatics, element, name);

        public static void SetTarget(Timeline timeline, global::Microsoft.UI.Xaml.DependencyObject target) => global::ABI.Microsoft.UI.Xaml.Media.Animation.IStoryboardStaticsMethods.SetTarget(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IStoryboardStatics, timeline, target);

        public static global::Microsoft.UI.Xaml.DependencyProperty TargetNameProperty => global::ABI.Microsoft.UI.Xaml.Media.Animation.IStoryboardStaticsMethods.get_TargetNameProperty(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IStoryboardStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty TargetPropertyProperty => global::ABI.Microsoft.UI.Xaml.Media.Animation.IStoryboardStaticsMethods.get_TargetPropertyProperty(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IStoryboardStatics);

        public static new Storyboard FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<Storyboard>.FromAbi(thisPtr);
        }

        internal Storyboard(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Media.Animation.IStoryboardMethods.IID);

        }


        public static bool operator ==(Storyboard x, Storyboard y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(Storyboard x, Storyboard y) => !(x == y);
        public bool Equals(Storyboard other) => this == other;
        public override bool Equals(object obj) => obj is Storyboard that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public void Seek(global::System.TimeSpan offset) => global::ABI.Microsoft.UI.Xaml.Media.Animation.IStoryboardMethods.Seek(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IStoryboard, offset);

        public void Stop() => global::ABI.Microsoft.UI.Xaml.Media.Animation.IStoryboardMethods.Stop(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IStoryboard);

        public void Begin() => global::ABI.Microsoft.UI.Xaml.Media.Animation.IStoryboardMethods.Begin(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IStoryboard);

        public void Pause() => global::ABI.Microsoft.UI.Xaml.Media.Animation.IStoryboardMethods.Pause(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IStoryboard);

        public void Resume() => global::ABI.Microsoft.UI.Xaml.Media.Animation.IStoryboardMethods.Resume(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IStoryboard);

        public ClockState GetCurrentState() => global::ABI.Microsoft.UI.Xaml.Media.Animation.IStoryboardMethods.GetCurrentState(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IStoryboard);

        public global::System.TimeSpan GetCurrentTime() => global::ABI.Microsoft.UI.Xaml.Media.Animation.IStoryboardMethods.GetCurrentTime(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IStoryboard);

        public void SeekAlignedToLastTick(global::System.TimeSpan offset) => global::ABI.Microsoft.UI.Xaml.Media.Animation.IStoryboardMethods.SeekAlignedToLastTick(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IStoryboard, offset);

        public void SkipToFill() => global::ABI.Microsoft.UI.Xaml.Media.Animation.IStoryboardMethods.SkipToFill(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IStoryboard);

        public TimelineCollection Children => global::ABI.Microsoft.UI.Xaml.Media.Animation.IStoryboardMethods.get_Children(_objRef_global__Microsoft_UI_Xaml_Media_Animation_IStoryboard);

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.SuppressNavigationTransitionInfo))]
    [global::ABI.Microsoft.UI.Xaml.Media.Animation.SuppressNavigationTransitionInfoRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ISuppressNavigationTransitionInfo))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class SuppressNavigationTransitionInfo : NavigationTransitionInfo, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<SuppressNavigationTransitionInfo>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_ISuppressNavigationTransitionInfo => _inner;


        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_SuppressNavigationTransitionInfo;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_SuppressNavigationTransitionInfo
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_SuppressNavigationTransitionInfo;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_SuppressNavigationTransitionInfo = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.SuppressNavigationTransitionInfo");
                }
            }
        }

        public SuppressNavigationTransitionInfo() :base(global::WinRT.DerivedComposed.Instance)
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Xaml_Media_Animation_SuppressNavigationTransitionInfo, global::ABI.Microsoft.UI.Xaml.Media.Animation.ISuppressNavigationTransitionInfoMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static new SuppressNavigationTransitionInfo FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<SuppressNavigationTransitionInfo>.FromAbi(thisPtr);
        }

        internal SuppressNavigationTransitionInfo(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Media.Animation.ISuppressNavigationTransitionInfoMethods.IID);

        }


        public static bool operator ==(SuppressNavigationTransitionInfo x, SuppressNavigationTransitionInfo y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(SuppressNavigationTransitionInfo x, SuppressNavigationTransitionInfo y) => !(x == y);
        public bool Equals(SuppressNavigationTransitionInfo other) => this == other;
        public override bool Equals(object obj) => obj is SuppressNavigationTransitionInfo that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.SwipeBackThemeAnimation))]
    [global::ABI.Microsoft.UI.Xaml.Media.Animation.SwipeBackThemeAnimationRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ISwipeBackThemeAnimation))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class SwipeBackThemeAnimation : Timeline, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<SwipeBackThemeAnimation>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_ISwipeBackThemeAnimation => _inner;


        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_SwipeBackThemeAnimation;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_SwipeBackThemeAnimation
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_SwipeBackThemeAnimation;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_SwipeBackThemeAnimation = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.SwipeBackThemeAnimation");
                }
            }
        }

        public SwipeBackThemeAnimation() :base(global::WinRT.DerivedComposed.Instance)
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Xaml_Media_Animation_SwipeBackThemeAnimation, global::ABI.Microsoft.UI.Xaml.Media.Animation.ISwipeBackThemeAnimationMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static new I As<I>() => ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.SwipeBackThemeAnimation").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_ISwipeBackThemeAnimationStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_ISwipeBackThemeAnimationStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_ISwipeBackThemeAnimationStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_ISwipeBackThemeAnimationStatics = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.SwipeBackThemeAnimation", global::ABI.Microsoft.UI.Xaml.Media.Animation.ISwipeBackThemeAnimationStaticsMethods.IID);
                }
            }
        }

        public static global::Microsoft.UI.Xaml.DependencyProperty FromHorizontalOffsetProperty => global::ABI.Microsoft.UI.Xaml.Media.Animation.ISwipeBackThemeAnimationStaticsMethods.get_FromHorizontalOffsetProperty(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ISwipeBackThemeAnimationStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty FromVerticalOffsetProperty => global::ABI.Microsoft.UI.Xaml.Media.Animation.ISwipeBackThemeAnimationStaticsMethods.get_FromVerticalOffsetProperty(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ISwipeBackThemeAnimationStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty TargetNameProperty => global::ABI.Microsoft.UI.Xaml.Media.Animation.ISwipeBackThemeAnimationStaticsMethods.get_TargetNameProperty(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ISwipeBackThemeAnimationStatics);

        public static new SwipeBackThemeAnimation FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<SwipeBackThemeAnimation>.FromAbi(thisPtr);
        }

        internal SwipeBackThemeAnimation(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Media.Animation.ISwipeBackThemeAnimationMethods.IID);

        }


        public static bool operator ==(SwipeBackThemeAnimation x, SwipeBackThemeAnimation y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(SwipeBackThemeAnimation x, SwipeBackThemeAnimation y) => !(x == y);
        public bool Equals(SwipeBackThemeAnimation other) => this == other;
        public override bool Equals(object obj) => obj is SwipeBackThemeAnimation that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public double FromHorizontalOffset
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Animation.ISwipeBackThemeAnimationMethods.get_FromHorizontalOffset(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ISwipeBackThemeAnimation);
            set => global::ABI.Microsoft.UI.Xaml.Media.Animation.ISwipeBackThemeAnimationMethods.set_FromHorizontalOffset(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ISwipeBackThemeAnimation, value);
        }

        public double FromVerticalOffset
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Animation.ISwipeBackThemeAnimationMethods.get_FromVerticalOffset(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ISwipeBackThemeAnimation);
            set => global::ABI.Microsoft.UI.Xaml.Media.Animation.ISwipeBackThemeAnimationMethods.set_FromVerticalOffset(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ISwipeBackThemeAnimation, value);
        }

        public string TargetName
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Animation.ISwipeBackThemeAnimationMethods.get_TargetName(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ISwipeBackThemeAnimation);
            set => global::ABI.Microsoft.UI.Xaml.Media.Animation.ISwipeBackThemeAnimationMethods.set_TargetName(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ISwipeBackThemeAnimation, value);
        }

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.SwipeHintThemeAnimation))]
    [global::ABI.Microsoft.UI.Xaml.Media.Animation.SwipeHintThemeAnimationRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ISwipeHintThemeAnimation))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class SwipeHintThemeAnimation : Timeline, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<SwipeHintThemeAnimation>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_ISwipeHintThemeAnimation => _inner;


        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_SwipeHintThemeAnimation;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_SwipeHintThemeAnimation
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_SwipeHintThemeAnimation;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_SwipeHintThemeAnimation = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.SwipeHintThemeAnimation");
                }
            }
        }

        public SwipeHintThemeAnimation() :base(global::WinRT.DerivedComposed.Instance)
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Xaml_Media_Animation_SwipeHintThemeAnimation, global::ABI.Microsoft.UI.Xaml.Media.Animation.ISwipeHintThemeAnimationMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static new I As<I>() => ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.SwipeHintThemeAnimation").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_ISwipeHintThemeAnimationStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_ISwipeHintThemeAnimationStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_ISwipeHintThemeAnimationStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_ISwipeHintThemeAnimationStatics = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.SwipeHintThemeAnimation", global::ABI.Microsoft.UI.Xaml.Media.Animation.ISwipeHintThemeAnimationStaticsMethods.IID);
                }
            }
        }

        public static global::Microsoft.UI.Xaml.DependencyProperty TargetNameProperty => global::ABI.Microsoft.UI.Xaml.Media.Animation.ISwipeHintThemeAnimationStaticsMethods.get_TargetNameProperty(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ISwipeHintThemeAnimationStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty ToHorizontalOffsetProperty => global::ABI.Microsoft.UI.Xaml.Media.Animation.ISwipeHintThemeAnimationStaticsMethods.get_ToHorizontalOffsetProperty(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ISwipeHintThemeAnimationStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty ToVerticalOffsetProperty => global::ABI.Microsoft.UI.Xaml.Media.Animation.ISwipeHintThemeAnimationStaticsMethods.get_ToVerticalOffsetProperty(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ISwipeHintThemeAnimationStatics);

        public static new SwipeHintThemeAnimation FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<SwipeHintThemeAnimation>.FromAbi(thisPtr);
        }

        internal SwipeHintThemeAnimation(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Media.Animation.ISwipeHintThemeAnimationMethods.IID);

        }


        public static bool operator ==(SwipeHintThemeAnimation x, SwipeHintThemeAnimation y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(SwipeHintThemeAnimation x, SwipeHintThemeAnimation y) => !(x == y);
        public bool Equals(SwipeHintThemeAnimation other) => this == other;
        public override bool Equals(object obj) => obj is SwipeHintThemeAnimation that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public string TargetName
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Animation.ISwipeHintThemeAnimationMethods.get_TargetName(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ISwipeHintThemeAnimation);
            set => global::ABI.Microsoft.UI.Xaml.Media.Animation.ISwipeHintThemeAnimationMethods.set_TargetName(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ISwipeHintThemeAnimation, value);
        }

        public double ToHorizontalOffset
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Animation.ISwipeHintThemeAnimationMethods.get_ToHorizontalOffset(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ISwipeHintThemeAnimation);
            set => global::ABI.Microsoft.UI.Xaml.Media.Animation.ISwipeHintThemeAnimationMethods.set_ToHorizontalOffset(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ISwipeHintThemeAnimation, value);
        }

        public double ToVerticalOffset
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Animation.ISwipeHintThemeAnimationMethods.get_ToVerticalOffset(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ISwipeHintThemeAnimation);
            set => global::ABI.Microsoft.UI.Xaml.Media.Animation.ISwipeHintThemeAnimationMethods.set_ToVerticalOffset(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ISwipeHintThemeAnimation, value);
        }

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.Timeline))]
    [global::ABI.Microsoft.UI.Xaml.Media.Animation.TimelineRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ITimeline))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public class Timeline : global::Microsoft.UI.Xaml.DependencyObject, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<Timeline>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_ITimeline;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_Media_Animation_ITimeline()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_Media_Animation_ITimeline, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.Media.Animation.ITimelineMethods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_ITimeline;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_ITimeline => ___objRef_global__Microsoft_UI_Xaml_Media_Animation_ITimeline ?? Make___objRef_global__Microsoft_UI_Xaml_Media_Animation_ITimeline();



        private static class _ITimelineFactoryMethods
        {
            public static unsafe IntPtr CreateInstance(IObjectReference _obj, object baseInterface, out IntPtr innerInterface)
            {
                var ThisPtr = _obj.ThisPtr;

                ObjectReferenceValue __baseInterface = default;
                IntPtr __innerInterface = default;
                IntPtr __retval = default;
                try
                {
                    __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                    global::System.GC.KeepAlive(_obj);
                    innerInterface = __innerInterface;
                    return __retval;
                }
                finally
                {
                    MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                }
            }
        }

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_ITimelineFactory;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_ITimelineFactory
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_ITimelineFactory;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_ITimelineFactory = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.Timeline", global::ABI.Microsoft.UI.Xaml.Media.Animation.ITimelineFactoryMethods.IID);
                }
            }
        }

        protected Timeline():base(global::WinRT.DerivedComposed.Instance)
        {
            bool isAggregation = this.GetType() != typeof(Timeline);
            object baseInspectable = isAggregation ? this : null;
            IntPtr composed = _ITimelineFactoryMethods.CreateInstance(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ITimelineFactory,  baseInspectable, out IntPtr inner);
            try
            {
                ComWrappersHelper.Init(isAggregation, this, composed, inner, global::ABI.Microsoft.UI.Xaml.Media.Animation.ITimelineMethods.IID, out _inner);

            }
            finally
            {
                Marshal.Release(inner);   
            }
        }

        public static I As<I>() => ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.Timeline").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_ITimelineStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_ITimelineStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_ITimelineStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_ITimelineStatics = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.Timeline", global::ABI.Microsoft.UI.Xaml.Media.Animation.ITimelineStaticsMethods.IID);
                }
            }
        }

        public static bool AllowDependentAnimations
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Animation.ITimelineStaticsMethods.get_AllowDependentAnimations(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ITimelineStatics);
            set => global::ABI.Microsoft.UI.Xaml.Media.Animation.ITimelineStaticsMethods.set_AllowDependentAnimations(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ITimelineStatics, value);
        }

        public static global::Microsoft.UI.Xaml.DependencyProperty AutoReverseProperty => global::ABI.Microsoft.UI.Xaml.Media.Animation.ITimelineStaticsMethods.get_AutoReverseProperty(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ITimelineStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty BeginTimeProperty => global::ABI.Microsoft.UI.Xaml.Media.Animation.ITimelineStaticsMethods.get_BeginTimeProperty(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ITimelineStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty DurationProperty => global::ABI.Microsoft.UI.Xaml.Media.Animation.ITimelineStaticsMethods.get_DurationProperty(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ITimelineStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty FillBehaviorProperty => global::ABI.Microsoft.UI.Xaml.Media.Animation.ITimelineStaticsMethods.get_FillBehaviorProperty(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ITimelineStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty RepeatBehaviorProperty => global::ABI.Microsoft.UI.Xaml.Media.Animation.ITimelineStaticsMethods.get_RepeatBehaviorProperty(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ITimelineStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty SpeedRatioProperty => global::ABI.Microsoft.UI.Xaml.Media.Animation.ITimelineStaticsMethods.get_SpeedRatioProperty(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ITimelineStatics);

        public static new Timeline FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<Timeline>.FromAbi(thisPtr);
        }

        protected internal Timeline(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Media.Animation.ITimelineMethods.IID);

        }


        public static bool operator ==(Timeline x, Timeline y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(Timeline x, Timeline y) => !(x == y);
        public bool Equals(Timeline other) => this == other;
        public override bool Equals(object obj) => obj is Timeline that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        protected Timeline(global::WinRT.DerivedComposed _):base(_)
        {

        }
        bool IWinRTObject.HasUnwrappableNativeObject => this.GetType() == typeof(Timeline);
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public event global::System.EventHandler<object> Completed
        {
            add => global::ABI.Microsoft.UI.Xaml.Media.Animation.ITimelineMethods.Get_Completed2(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ITimeline, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Xaml.Media.Animation.ITimelineMethods.Get_Completed2(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ITimeline, (IWinRTObject)this).Unsubscribe(value);
        }

        public bool AutoReverse
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Animation.ITimelineMethods.get_AutoReverse(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ITimeline);
            set => global::ABI.Microsoft.UI.Xaml.Media.Animation.ITimelineMethods.set_AutoReverse(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ITimeline, value);
        }

        public global::System.Nullable<global::System.TimeSpan> BeginTime
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Animation.ITimelineMethods.get_BeginTime(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ITimeline);
            set => global::ABI.Microsoft.UI.Xaml.Media.Animation.ITimelineMethods.set_BeginTime(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ITimeline, value);
        }

        public global::Microsoft.UI.Xaml.Duration Duration
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Animation.ITimelineMethods.get_Duration(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ITimeline);
            set => global::ABI.Microsoft.UI.Xaml.Media.Animation.ITimelineMethods.set_Duration(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ITimeline, value);
        }

        public FillBehavior FillBehavior
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Animation.ITimelineMethods.get_FillBehavior(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ITimeline);
            set => global::ABI.Microsoft.UI.Xaml.Media.Animation.ITimelineMethods.set_FillBehavior(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ITimeline, value);
        }

        public RepeatBehavior RepeatBehavior
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Animation.ITimelineMethods.get_RepeatBehavior(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ITimeline);
            set => global::ABI.Microsoft.UI.Xaml.Media.Animation.ITimelineMethods.set_RepeatBehavior(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ITimeline, value);
        }

        public double SpeedRatio
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Animation.ITimelineMethods.get_SpeedRatio(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ITimeline);
            set => global::ABI.Microsoft.UI.Xaml.Media.Animation.ITimelineMethods.set_SpeedRatio(_objRef_global__Microsoft_UI_Xaml_Media_Animation_ITimeline, value);
        }

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.TimelineCollection))]
    [global::ABI.Microsoft.UI.Xaml.Media.Animation.TimelineCollectionRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(global::System.Collections.Generic.IList<Timeline>))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class TimelineCollection : global::System.Collections.Generic.IList<Timeline>, global::System.Collections.Generic.IEnumerable<Timeline>, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<TimelineCollection>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__System_Collections_Generic_IList_Timeline_;
        private IObjectReference Make___objRef_global__System_Collections_Generic_IList_Timeline_()
        {
            _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IVector_1_Microsoft_UI_Xaml_Media_Animation_Timeline.EnsureInitialized();
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__System_Collections_Generic_IList_Timeline_, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.System.Collections.Generic.IListMethods<Timeline>.IID), null);
            return ___objRef_global__System_Collections_Generic_IList_Timeline_;
        }
        private IObjectReference _objRef_global__System_Collections_Generic_IList_Timeline_ => ___objRef_global__System_Collections_Generic_IList_Timeline_ ?? Make___objRef_global__System_Collections_Generic_IList_Timeline_();

        private volatile IObjectReference ___objRef_global__System_Collections_Generic_IEnumerable_Timeline_;
        private IObjectReference Make___objRef_global__System_Collections_Generic_IEnumerable_Timeline_()
        {
            _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IIterable_1_Microsoft_UI_Xaml_Media_Animation_Timeline.EnsureInitialized();
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__System_Collections_Generic_IEnumerable_Timeline_, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.System.Collections.Generic.IEnumerableMethods<Timeline>.IID), null);
            return ___objRef_global__System_Collections_Generic_IEnumerable_Timeline_;
        }
        private IObjectReference _objRef_global__System_Collections_Generic_IEnumerable_Timeline_ => ___objRef_global__System_Collections_Generic_IEnumerable_Timeline_ ?? Make___objRef_global__System_Collections_Generic_IEnumerable_Timeline_();



        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_TimelineCollection;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_TimelineCollection
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_TimelineCollection;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_TimelineCollection = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.TimelineCollection");
                }
            }
        }

        public TimelineCollection() 
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Xaml_Media_Animation_TimelineCollection, global::ABI.System.Collections.Generic.IListMethods<Timeline>.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static TimelineCollection FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<TimelineCollection>.FromAbi(thisPtr);
        }

        internal TimelineCollection(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.System.Collections.Generic.IListMethods<Timeline>.IID);

        }


        public static bool operator ==(TimelineCollection x, TimelineCollection y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(TimelineCollection x, TimelineCollection y) => !(x == y);
        public bool Equals(TimelineCollection other) => this == other;
        public override bool Equals(object obj) => obj is TimelineCollection that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public int Count => global::ABI.System.Collections.Generic.IListMethods<Timeline>.get_Count(_objRef_global__System_Collections_Generic_IList_Timeline_);
        public bool IsReadOnly => global::ABI.System.Collections.Generic.IListMethods<Timeline>.get_IsReadOnly(_objRef_global__System_Collections_Generic_IList_Timeline_);
        [global::System.Runtime.CompilerServices.IndexerName("ListItem")]
        public Timeline this[int index] 
        {
            get => global::ABI.System.Collections.Generic.IListMethods<Timeline>.Indexer_Get(_objRef_global__System_Collections_Generic_IList_Timeline_, index);
            set => global::ABI.System.Collections.Generic.IListMethods<Timeline>.Indexer_Set(_objRef_global__System_Collections_Generic_IList_Timeline_, index, value);
        }
        public int IndexOf(Timeline item) => global::ABI.System.Collections.Generic.IListMethods<Timeline>.IndexOf(_objRef_global__System_Collections_Generic_IList_Timeline_, item);
        public void Insert(int index, Timeline item) => global::ABI.System.Collections.Generic.IListMethods<Timeline>.Insert(_objRef_global__System_Collections_Generic_IList_Timeline_, index, item);
        public void RemoveAt(int index) => global::ABI.System.Collections.Generic.IListMethods<Timeline>.RemoveAt(_objRef_global__System_Collections_Generic_IList_Timeline_, index);
        public void Add(Timeline item) => global::ABI.System.Collections.Generic.IListMethods<Timeline>.Add(_objRef_global__System_Collections_Generic_IList_Timeline_, item);
        public void Clear() => global::ABI.System.Collections.Generic.IListMethods<Timeline>.Clear(_objRef_global__System_Collections_Generic_IList_Timeline_);
        public bool Contains(Timeline item) => global::ABI.System.Collections.Generic.IListMethods<Timeline>.Contains(_objRef_global__System_Collections_Generic_IList_Timeline_, item);
        public void CopyTo(Timeline[] array, int arrayIndex) => global::ABI.System.Collections.Generic.IListMethods<Timeline>.CopyTo(_objRef_global__System_Collections_Generic_IList_Timeline_, array, arrayIndex);
        public bool Remove(Timeline item) => global::ABI.System.Collections.Generic.IListMethods<Timeline>.Remove(_objRef_global__System_Collections_Generic_IList_Timeline_, item);

        public IEnumerator<Timeline> GetEnumerator() => global::ABI.System.Collections.Generic.IEnumerableMethods<Timeline>.GetEnumerator(_objRef_global__System_Collections_Generic_IEnumerable_Timeline_);

        IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.Transition))]
    [global::ABI.Microsoft.UI.Xaml.Media.Animation.TransitionRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ITransition))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public class Transition : global::Microsoft.UI.Xaml.DependencyObject, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<Transition>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_ITransition;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_Media_Animation_ITransition()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_Media_Animation_ITransition, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.Media.Animation.ITransitionMethods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_ITransition;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_ITransition => ___objRef_global__Microsoft_UI_Xaml_Media_Animation_ITransition ?? Make___objRef_global__Microsoft_UI_Xaml_Media_Animation_ITransition();



        private static class _ITransitionFactoryMethods
        {}

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_ITransitionFactory;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_ITransitionFactory
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_ITransitionFactory;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_ITransitionFactory = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.Transition", global::ABI.Microsoft.UI.Xaml.Media.Animation.ITransitionFactoryMethods.IID);
                }
            }
        }

        public static new Transition FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<Transition>.FromAbi(thisPtr);
        }

        protected internal Transition(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Media.Animation.ITransitionMethods.IID);

        }


        public static bool operator ==(Transition x, Transition y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(Transition x, Transition y) => !(x == y);
        public bool Equals(Transition other) => this == other;
        public override bool Equals(object obj) => obj is Transition that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        protected Transition(global::WinRT.DerivedComposed _):base(_)
        {

        }
        bool IWinRTObject.HasUnwrappableNativeObject => this.GetType() == typeof(Transition);
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.TransitionCollection))]
    [global::ABI.Microsoft.UI.Xaml.Media.Animation.TransitionCollectionRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(global::System.Collections.Generic.IList<Transition>))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class TransitionCollection : global::System.Collections.Generic.IList<Transition>, global::System.Collections.Generic.IEnumerable<Transition>, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<TransitionCollection>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__System_Collections_Generic_IList_Transition_;
        private IObjectReference Make___objRef_global__System_Collections_Generic_IList_Transition_()
        {
            _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IVector_1_Microsoft_UI_Xaml_Media_Animation_Transition.EnsureInitialized();
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__System_Collections_Generic_IList_Transition_, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.System.Collections.Generic.IListMethods<Transition>.IID), null);
            return ___objRef_global__System_Collections_Generic_IList_Transition_;
        }
        private IObjectReference _objRef_global__System_Collections_Generic_IList_Transition_ => ___objRef_global__System_Collections_Generic_IList_Transition_ ?? Make___objRef_global__System_Collections_Generic_IList_Transition_();

        private volatile IObjectReference ___objRef_global__System_Collections_Generic_IEnumerable_Transition_;
        private IObjectReference Make___objRef_global__System_Collections_Generic_IEnumerable_Transition_()
        {
            _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IIterable_1_Microsoft_UI_Xaml_Media_Animation_Transition.EnsureInitialized();
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__System_Collections_Generic_IEnumerable_Transition_, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.System.Collections.Generic.IEnumerableMethods<Transition>.IID), null);
            return ___objRef_global__System_Collections_Generic_IEnumerable_Transition_;
        }
        private IObjectReference _objRef_global__System_Collections_Generic_IEnumerable_Transition_ => ___objRef_global__System_Collections_Generic_IEnumerable_Transition_ ?? Make___objRef_global__System_Collections_Generic_IEnumerable_Transition_();



        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Animation_TransitionCollection;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Animation_TransitionCollection
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Animation_TransitionCollection;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Animation_TransitionCollection = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Animation.TransitionCollection");
                }
            }
        }

        public TransitionCollection() 
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Xaml_Media_Animation_TransitionCollection, global::ABI.System.Collections.Generic.IListMethods<Transition>.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static TransitionCollection FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<TransitionCollection>.FromAbi(thisPtr);
        }

        internal TransitionCollection(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.System.Collections.Generic.IListMethods<Transition>.IID);

        }


        public static bool operator ==(TransitionCollection x, TransitionCollection y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(TransitionCollection x, TransitionCollection y) => !(x == y);
        public bool Equals(TransitionCollection other) => this == other;
        public override bool Equals(object obj) => obj is TransitionCollection that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public int Count => global::ABI.System.Collections.Generic.IListMethods<Transition>.get_Count(_objRef_global__System_Collections_Generic_IList_Transition_);
        public bool IsReadOnly => global::ABI.System.Collections.Generic.IListMethods<Transition>.get_IsReadOnly(_objRef_global__System_Collections_Generic_IList_Transition_);
        [global::System.Runtime.CompilerServices.IndexerName("ListItem")]
        public Transition this[int index] 
        {
            get => global::ABI.System.Collections.Generic.IListMethods<Transition>.Indexer_Get(_objRef_global__System_Collections_Generic_IList_Transition_, index);
            set => global::ABI.System.Collections.Generic.IListMethods<Transition>.Indexer_Set(_objRef_global__System_Collections_Generic_IList_Transition_, index, value);
        }
        public int IndexOf(Transition item) => global::ABI.System.Collections.Generic.IListMethods<Transition>.IndexOf(_objRef_global__System_Collections_Generic_IList_Transition_, item);
        public void Insert(int index, Transition item) => global::ABI.System.Collections.Generic.IListMethods<Transition>.Insert(_objRef_global__System_Collections_Generic_IList_Transition_, index, item);
        public void RemoveAt(int index) => global::ABI.System.Collections.Generic.IListMethods<Transition>.RemoveAt(_objRef_global__System_Collections_Generic_IList_Transition_, index);
        public void Add(Transition item) => global::ABI.System.Collections.Generic.IListMethods<Transition>.Add(_objRef_global__System_Collections_Generic_IList_Transition_, item);
        public void Clear() => global::ABI.System.Collections.Generic.IListMethods<Transition>.Clear(_objRef_global__System_Collections_Generic_IList_Transition_);
        public bool Contains(Transition item) => global::ABI.System.Collections.Generic.IListMethods<Transition>.Contains(_objRef_global__System_Collections_Generic_IList_Transition_, item);
        public void CopyTo(Transition[] array, int arrayIndex) => global::ABI.System.Collections.Generic.IListMethods<Transition>.CopyTo(_objRef_global__System_Collections_Generic_IList_Transition_, array, arrayIndex);
        public bool Remove(Transition item) => global::ABI.System.Collections.Generic.IListMethods<Transition>.Remove(_objRef_global__System_Collections_Generic_IList_Transition_, item);

        public IEnumerator<Transition> GetEnumerator() => global::ABI.System.Collections.Generic.IEnumerableMethods<Transition>.GetEnumerator(_objRef_global__System_Collections_Generic_IEnumerable_Transition_);

        IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
}

#pragma warning disable CA1416
namespace ABI.Microsoft.UI.Xaml.Media.Animation
{
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct AddDeleteThemeTransition
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Media.Animation.AddDeleteThemeTransition obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Media.Animation.AddDeleteThemeTransition>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.IAddDeleteThemeTransitionMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Media.Animation.AddDeleteThemeTransition obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.IAddDeleteThemeTransitionMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Media.Animation.AddDeleteThemeTransition FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Media.Animation.AddDeleteThemeTransition.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Media.Animation.AddDeleteThemeTransition obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.AddDeleteThemeTransition>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Media.Animation.AddDeleteThemeTransition[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.AddDeleteThemeTransition>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.AddDeleteThemeTransition>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Media.Animation.AddDeleteThemeTransition[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.AddDeleteThemeTransition>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Media.Animation.AddDeleteThemeTransition[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.AddDeleteThemeTransition>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Media.Animation.AddDeleteThemeTransition[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.AddDeleteThemeTransition>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.AddDeleteThemeTransition>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.AddDeleteThemeTransition>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class AddDeleteThemeTransitionRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Media.Animation.AddDeleteThemeTransition(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct BackEase
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Media.Animation.BackEase obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Media.Animation.BackEase>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.IBackEaseMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Media.Animation.BackEase obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.IBackEaseMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Media.Animation.BackEase FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Media.Animation.BackEase.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Media.Animation.BackEase obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.BackEase>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Media.Animation.BackEase[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.BackEase>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.BackEase>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Media.Animation.BackEase[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.BackEase>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Media.Animation.BackEase[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.BackEase>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Media.Animation.BackEase[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.BackEase>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.BackEase>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.BackEase>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class BackEaseRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Media.Animation.BackEase(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct BasicConnectedAnimationConfiguration
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Media.Animation.BasicConnectedAnimationConfiguration obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Media.Animation.BasicConnectedAnimationConfiguration>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.IBasicConnectedAnimationConfigurationMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Media.Animation.BasicConnectedAnimationConfiguration obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.IBasicConnectedAnimationConfigurationMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Media.Animation.BasicConnectedAnimationConfiguration FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Media.Animation.BasicConnectedAnimationConfiguration.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Media.Animation.BasicConnectedAnimationConfiguration obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.BasicConnectedAnimationConfiguration>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Media.Animation.BasicConnectedAnimationConfiguration[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.BasicConnectedAnimationConfiguration>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.BasicConnectedAnimationConfiguration>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Media.Animation.BasicConnectedAnimationConfiguration[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.BasicConnectedAnimationConfiguration>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Media.Animation.BasicConnectedAnimationConfiguration[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.BasicConnectedAnimationConfiguration>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Media.Animation.BasicConnectedAnimationConfiguration[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.BasicConnectedAnimationConfiguration>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.BasicConnectedAnimationConfiguration>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.BasicConnectedAnimationConfiguration>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class BasicConnectedAnimationConfigurationRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Media.Animation.BasicConnectedAnimationConfiguration(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct BeginStoryboard
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Media.Animation.BeginStoryboard obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Media.Animation.BeginStoryboard>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.IBeginStoryboardMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Media.Animation.BeginStoryboard obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.IBeginStoryboardMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Media.Animation.BeginStoryboard FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Media.Animation.BeginStoryboard.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Media.Animation.BeginStoryboard obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.BeginStoryboard>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Media.Animation.BeginStoryboard[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.BeginStoryboard>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.BeginStoryboard>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Media.Animation.BeginStoryboard[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.BeginStoryboard>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Media.Animation.BeginStoryboard[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.BeginStoryboard>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Media.Animation.BeginStoryboard[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.BeginStoryboard>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.BeginStoryboard>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.BeginStoryboard>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class BeginStoryboardRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Media.Animation.BeginStoryboard(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct BounceEase
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Media.Animation.BounceEase obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Media.Animation.BounceEase>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.IBounceEaseMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Media.Animation.BounceEase obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.IBounceEaseMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Media.Animation.BounceEase FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Media.Animation.BounceEase.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Media.Animation.BounceEase obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.BounceEase>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Media.Animation.BounceEase[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.BounceEase>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.BounceEase>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Media.Animation.BounceEase[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.BounceEase>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Media.Animation.BounceEase[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.BounceEase>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Media.Animation.BounceEase[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.BounceEase>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.BounceEase>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.BounceEase>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class BounceEaseRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Media.Animation.BounceEase(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct CircleEase
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Media.Animation.CircleEase obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Media.Animation.CircleEase>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.ICircleEaseMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Media.Animation.CircleEase obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.ICircleEaseMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Media.Animation.CircleEase FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Media.Animation.CircleEase.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Media.Animation.CircleEase obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.CircleEase>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Media.Animation.CircleEase[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.CircleEase>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.CircleEase>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Media.Animation.CircleEase[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.CircleEase>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Media.Animation.CircleEase[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.CircleEase>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Media.Animation.CircleEase[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.CircleEase>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.CircleEase>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.CircleEase>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class CircleEaseRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Media.Animation.CircleEase(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct ColorAnimation
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Media.Animation.ColorAnimation obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Media.Animation.ColorAnimation>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.IColorAnimationMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Media.Animation.ColorAnimation obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.IColorAnimationMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Media.Animation.ColorAnimation FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Media.Animation.ColorAnimation.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Media.Animation.ColorAnimation obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.ColorAnimation>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Media.Animation.ColorAnimation[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.ColorAnimation>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.ColorAnimation>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Media.Animation.ColorAnimation[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.ColorAnimation>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Media.Animation.ColorAnimation[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.ColorAnimation>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Media.Animation.ColorAnimation[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.ColorAnimation>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.ColorAnimation>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.ColorAnimation>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class ColorAnimationRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Media.Animation.ColorAnimation(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct ColorAnimationUsingKeyFrames
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Media.Animation.ColorAnimationUsingKeyFrames obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Media.Animation.ColorAnimationUsingKeyFrames>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.IColorAnimationUsingKeyFramesMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Media.Animation.ColorAnimationUsingKeyFrames obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.IColorAnimationUsingKeyFramesMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Media.Animation.ColorAnimationUsingKeyFrames FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Media.Animation.ColorAnimationUsingKeyFrames.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Media.Animation.ColorAnimationUsingKeyFrames obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.ColorAnimationUsingKeyFrames>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Media.Animation.ColorAnimationUsingKeyFrames[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.ColorAnimationUsingKeyFrames>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.ColorAnimationUsingKeyFrames>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Media.Animation.ColorAnimationUsingKeyFrames[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.ColorAnimationUsingKeyFrames>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Media.Animation.ColorAnimationUsingKeyFrames[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.ColorAnimationUsingKeyFrames>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Media.Animation.ColorAnimationUsingKeyFrames[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.ColorAnimationUsingKeyFrames>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.ColorAnimationUsingKeyFrames>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.ColorAnimationUsingKeyFrames>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class ColorAnimationUsingKeyFramesRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Media.Animation.ColorAnimationUsingKeyFrames(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct ColorKeyFrame
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Media.Animation.ColorKeyFrame obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Media.Animation.ColorKeyFrame>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.IColorKeyFrameMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Media.Animation.ColorKeyFrame obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.IColorKeyFrameMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Media.Animation.ColorKeyFrame FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Media.Animation.ColorKeyFrame.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Media.Animation.ColorKeyFrame obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.ColorKeyFrame>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Media.Animation.ColorKeyFrame[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.ColorKeyFrame>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.ColorKeyFrame>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Media.Animation.ColorKeyFrame[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.ColorKeyFrame>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Media.Animation.ColorKeyFrame[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.ColorKeyFrame>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Media.Animation.ColorKeyFrame[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.ColorKeyFrame>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.ColorKeyFrame>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.ColorKeyFrame>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class ColorKeyFrameRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Media.Animation.ColorKeyFrame(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct ColorKeyFrameCollection
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Media.Animation.ColorKeyFrameCollection obj) => obj is null ? null : MarshalInterface<global::System.Collections.Generic.IList<global::Microsoft.UI.Xaml.Media.Animation.ColorKeyFrame>>.CreateMarshaler(obj);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Media.Animation.ColorKeyFrameCollection obj) => MarshalInterface<global::System.Collections.Generic.IList<global::Microsoft.UI.Xaml.Media.Animation.ColorKeyFrame>>.CreateMarshaler2(obj, global::ABI.System.Collections.Generic.IListMethods<global::Microsoft.UI.Xaml.Media.Animation.ColorKeyFrame>.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Media.Animation.ColorKeyFrameCollection FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Media.Animation.ColorKeyFrameCollection.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Media.Animation.ColorKeyFrameCollection obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.ColorKeyFrameCollection>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Media.Animation.ColorKeyFrameCollection[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.ColorKeyFrameCollection>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.ColorKeyFrameCollection>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Media.Animation.ColorKeyFrameCollection[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.ColorKeyFrameCollection>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Media.Animation.ColorKeyFrameCollection[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.ColorKeyFrameCollection>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Media.Animation.ColorKeyFrameCollection[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.ColorKeyFrameCollection>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.ColorKeyFrameCollection>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.ColorKeyFrameCollection>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class ColorKeyFrameCollectionRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Media.Animation.ColorKeyFrameCollection(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct CommonNavigationTransitionInfo
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Media.Animation.CommonNavigationTransitionInfo obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Media.Animation.CommonNavigationTransitionInfo>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.ICommonNavigationTransitionInfoMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Media.Animation.CommonNavigationTransitionInfo obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.ICommonNavigationTransitionInfoMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Media.Animation.CommonNavigationTransitionInfo FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Media.Animation.CommonNavigationTransitionInfo.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Media.Animation.CommonNavigationTransitionInfo obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.CommonNavigationTransitionInfo>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Media.Animation.CommonNavigationTransitionInfo[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.CommonNavigationTransitionInfo>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.CommonNavigationTransitionInfo>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Media.Animation.CommonNavigationTransitionInfo[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.CommonNavigationTransitionInfo>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Media.Animation.CommonNavigationTransitionInfo[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.CommonNavigationTransitionInfo>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Media.Animation.CommonNavigationTransitionInfo[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.CommonNavigationTransitionInfo>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.CommonNavigationTransitionInfo>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.CommonNavigationTransitionInfo>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class CommonNavigationTransitionInfoRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Media.Animation.CommonNavigationTransitionInfo(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct ConnectedAnimation
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Media.Animation.ConnectedAnimation obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Media.Animation.ConnectedAnimation>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.IConnectedAnimationMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Media.Animation.ConnectedAnimation obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.IConnectedAnimationMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Media.Animation.ConnectedAnimation FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Media.Animation.ConnectedAnimation.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Media.Animation.ConnectedAnimation obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.ConnectedAnimation>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Media.Animation.ConnectedAnimation[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.ConnectedAnimation>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.ConnectedAnimation>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Media.Animation.ConnectedAnimation[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.ConnectedAnimation>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Media.Animation.ConnectedAnimation[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.ConnectedAnimation>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Media.Animation.ConnectedAnimation[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.ConnectedAnimation>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.ConnectedAnimation>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.ConnectedAnimation>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class ConnectedAnimationRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Media.Animation.ConnectedAnimation(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct ConnectedAnimationConfiguration
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Media.Animation.ConnectedAnimationConfiguration obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Media.Animation.ConnectedAnimationConfiguration>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.IConnectedAnimationConfigurationMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Media.Animation.ConnectedAnimationConfiguration obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.IConnectedAnimationConfigurationMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Media.Animation.ConnectedAnimationConfiguration FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Media.Animation.ConnectedAnimationConfiguration.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Media.Animation.ConnectedAnimationConfiguration obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.ConnectedAnimationConfiguration>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Media.Animation.ConnectedAnimationConfiguration[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.ConnectedAnimationConfiguration>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.ConnectedAnimationConfiguration>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Media.Animation.ConnectedAnimationConfiguration[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.ConnectedAnimationConfiguration>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Media.Animation.ConnectedAnimationConfiguration[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.ConnectedAnimationConfiguration>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Media.Animation.ConnectedAnimationConfiguration[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.ConnectedAnimationConfiguration>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.ConnectedAnimationConfiguration>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.ConnectedAnimationConfiguration>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class ConnectedAnimationConfigurationRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Media.Animation.ConnectedAnimationConfiguration(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct ConnectedAnimationService
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Media.Animation.ConnectedAnimationService obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Media.Animation.ConnectedAnimationService>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.IConnectedAnimationServiceMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Media.Animation.ConnectedAnimationService obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.IConnectedAnimationServiceMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Media.Animation.ConnectedAnimationService FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Media.Animation.ConnectedAnimationService.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Media.Animation.ConnectedAnimationService obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.ConnectedAnimationService>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Media.Animation.ConnectedAnimationService[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.ConnectedAnimationService>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.ConnectedAnimationService>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Media.Animation.ConnectedAnimationService[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.ConnectedAnimationService>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Media.Animation.ConnectedAnimationService[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.ConnectedAnimationService>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Media.Animation.ConnectedAnimationService[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.ConnectedAnimationService>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.ConnectedAnimationService>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.ConnectedAnimationService>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class ConnectedAnimationServiceRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Media.Animation.ConnectedAnimationService(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct ContentThemeTransition
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Media.Animation.ContentThemeTransition obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Media.Animation.ContentThemeTransition>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.IContentThemeTransitionMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Media.Animation.ContentThemeTransition obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.IContentThemeTransitionMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Media.Animation.ContentThemeTransition FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Media.Animation.ContentThemeTransition.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Media.Animation.ContentThemeTransition obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.ContentThemeTransition>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Media.Animation.ContentThemeTransition[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.ContentThemeTransition>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.ContentThemeTransition>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Media.Animation.ContentThemeTransition[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.ContentThemeTransition>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Media.Animation.ContentThemeTransition[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.ContentThemeTransition>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Media.Animation.ContentThemeTransition[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.ContentThemeTransition>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.ContentThemeTransition>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.ContentThemeTransition>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class ContentThemeTransitionRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Media.Animation.ContentThemeTransition(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct ContinuumNavigationTransitionInfo
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Media.Animation.ContinuumNavigationTransitionInfo obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Media.Animation.ContinuumNavigationTransitionInfo>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.IContinuumNavigationTransitionInfoMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Media.Animation.ContinuumNavigationTransitionInfo obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.IContinuumNavigationTransitionInfoMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Media.Animation.ContinuumNavigationTransitionInfo FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Media.Animation.ContinuumNavigationTransitionInfo.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Media.Animation.ContinuumNavigationTransitionInfo obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.ContinuumNavigationTransitionInfo>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Media.Animation.ContinuumNavigationTransitionInfo[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.ContinuumNavigationTransitionInfo>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.ContinuumNavigationTransitionInfo>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Media.Animation.ContinuumNavigationTransitionInfo[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.ContinuumNavigationTransitionInfo>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Media.Animation.ContinuumNavigationTransitionInfo[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.ContinuumNavigationTransitionInfo>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Media.Animation.ContinuumNavigationTransitionInfo[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.ContinuumNavigationTransitionInfo>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.ContinuumNavigationTransitionInfo>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.ContinuumNavigationTransitionInfo>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class ContinuumNavigationTransitionInfoRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Media.Animation.ContinuumNavigationTransitionInfo(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct CubicEase
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Media.Animation.CubicEase obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Media.Animation.CubicEase>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.ICubicEaseMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Media.Animation.CubicEase obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.ICubicEaseMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Media.Animation.CubicEase FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Media.Animation.CubicEase.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Media.Animation.CubicEase obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.CubicEase>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Media.Animation.CubicEase[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.CubicEase>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.CubicEase>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Media.Animation.CubicEase[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.CubicEase>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Media.Animation.CubicEase[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.CubicEase>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Media.Animation.CubicEase[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.CubicEase>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.CubicEase>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.CubicEase>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class CubicEaseRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Media.Animation.CubicEase(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct DirectConnectedAnimationConfiguration
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Media.Animation.DirectConnectedAnimationConfiguration obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Media.Animation.DirectConnectedAnimationConfiguration>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.IDirectConnectedAnimationConfigurationMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Media.Animation.DirectConnectedAnimationConfiguration obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.IDirectConnectedAnimationConfigurationMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Media.Animation.DirectConnectedAnimationConfiguration FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Media.Animation.DirectConnectedAnimationConfiguration.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Media.Animation.DirectConnectedAnimationConfiguration obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.DirectConnectedAnimationConfiguration>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Media.Animation.DirectConnectedAnimationConfiguration[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.DirectConnectedAnimationConfiguration>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.DirectConnectedAnimationConfiguration>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Media.Animation.DirectConnectedAnimationConfiguration[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.DirectConnectedAnimationConfiguration>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Media.Animation.DirectConnectedAnimationConfiguration[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.DirectConnectedAnimationConfiguration>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Media.Animation.DirectConnectedAnimationConfiguration[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.DirectConnectedAnimationConfiguration>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.DirectConnectedAnimationConfiguration>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.DirectConnectedAnimationConfiguration>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class DirectConnectedAnimationConfigurationRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Media.Animation.DirectConnectedAnimationConfiguration(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct DiscreteColorKeyFrame
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Media.Animation.DiscreteColorKeyFrame obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Media.Animation.DiscreteColorKeyFrame>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.IDiscreteColorKeyFrameMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Media.Animation.DiscreteColorKeyFrame obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.IDiscreteColorKeyFrameMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Media.Animation.DiscreteColorKeyFrame FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Media.Animation.DiscreteColorKeyFrame.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Media.Animation.DiscreteColorKeyFrame obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.DiscreteColorKeyFrame>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Media.Animation.DiscreteColorKeyFrame[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.DiscreteColorKeyFrame>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.DiscreteColorKeyFrame>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Media.Animation.DiscreteColorKeyFrame[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.DiscreteColorKeyFrame>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Media.Animation.DiscreteColorKeyFrame[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.DiscreteColorKeyFrame>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Media.Animation.DiscreteColorKeyFrame[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.DiscreteColorKeyFrame>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.DiscreteColorKeyFrame>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.DiscreteColorKeyFrame>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class DiscreteColorKeyFrameRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Media.Animation.DiscreteColorKeyFrame(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct DiscreteDoubleKeyFrame
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Media.Animation.DiscreteDoubleKeyFrame obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Media.Animation.DiscreteDoubleKeyFrame>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.IDiscreteDoubleKeyFrameMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Media.Animation.DiscreteDoubleKeyFrame obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.IDiscreteDoubleKeyFrameMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Media.Animation.DiscreteDoubleKeyFrame FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Media.Animation.DiscreteDoubleKeyFrame.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Media.Animation.DiscreteDoubleKeyFrame obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.DiscreteDoubleKeyFrame>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Media.Animation.DiscreteDoubleKeyFrame[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.DiscreteDoubleKeyFrame>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.DiscreteDoubleKeyFrame>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Media.Animation.DiscreteDoubleKeyFrame[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.DiscreteDoubleKeyFrame>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Media.Animation.DiscreteDoubleKeyFrame[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.DiscreteDoubleKeyFrame>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Media.Animation.DiscreteDoubleKeyFrame[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.DiscreteDoubleKeyFrame>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.DiscreteDoubleKeyFrame>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.DiscreteDoubleKeyFrame>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class DiscreteDoubleKeyFrameRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Media.Animation.DiscreteDoubleKeyFrame(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct DiscreteObjectKeyFrame
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Media.Animation.DiscreteObjectKeyFrame obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Media.Animation.DiscreteObjectKeyFrame>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.IDiscreteObjectKeyFrameMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Media.Animation.DiscreteObjectKeyFrame obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.IDiscreteObjectKeyFrameMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Media.Animation.DiscreteObjectKeyFrame FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Media.Animation.DiscreteObjectKeyFrame.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Media.Animation.DiscreteObjectKeyFrame obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.DiscreteObjectKeyFrame>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Media.Animation.DiscreteObjectKeyFrame[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.DiscreteObjectKeyFrame>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.DiscreteObjectKeyFrame>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Media.Animation.DiscreteObjectKeyFrame[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.DiscreteObjectKeyFrame>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Media.Animation.DiscreteObjectKeyFrame[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.DiscreteObjectKeyFrame>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Media.Animation.DiscreteObjectKeyFrame[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.DiscreteObjectKeyFrame>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.DiscreteObjectKeyFrame>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.DiscreteObjectKeyFrame>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class DiscreteObjectKeyFrameRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Media.Animation.DiscreteObjectKeyFrame(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct DiscretePointKeyFrame
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Media.Animation.DiscretePointKeyFrame obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Media.Animation.DiscretePointKeyFrame>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.IDiscretePointKeyFrameMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Media.Animation.DiscretePointKeyFrame obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.IDiscretePointKeyFrameMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Media.Animation.DiscretePointKeyFrame FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Media.Animation.DiscretePointKeyFrame.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Media.Animation.DiscretePointKeyFrame obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.DiscretePointKeyFrame>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Media.Animation.DiscretePointKeyFrame[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.DiscretePointKeyFrame>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.DiscretePointKeyFrame>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Media.Animation.DiscretePointKeyFrame[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.DiscretePointKeyFrame>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Media.Animation.DiscretePointKeyFrame[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.DiscretePointKeyFrame>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Media.Animation.DiscretePointKeyFrame[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.DiscretePointKeyFrame>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.DiscretePointKeyFrame>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.DiscretePointKeyFrame>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class DiscretePointKeyFrameRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Media.Animation.DiscretePointKeyFrame(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct DoubleAnimation
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Media.Animation.DoubleAnimation obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Media.Animation.DoubleAnimation>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.IDoubleAnimationMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Media.Animation.DoubleAnimation obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.IDoubleAnimationMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Media.Animation.DoubleAnimation FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Media.Animation.DoubleAnimation.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Media.Animation.DoubleAnimation obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.DoubleAnimation>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Media.Animation.DoubleAnimation[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.DoubleAnimation>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.DoubleAnimation>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Media.Animation.DoubleAnimation[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.DoubleAnimation>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Media.Animation.DoubleAnimation[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.DoubleAnimation>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Media.Animation.DoubleAnimation[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.DoubleAnimation>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.DoubleAnimation>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.DoubleAnimation>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class DoubleAnimationRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Media.Animation.DoubleAnimation(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct DoubleAnimationUsingKeyFrames
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Media.Animation.DoubleAnimationUsingKeyFrames obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Media.Animation.DoubleAnimationUsingKeyFrames>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.IDoubleAnimationUsingKeyFramesMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Media.Animation.DoubleAnimationUsingKeyFrames obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.IDoubleAnimationUsingKeyFramesMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Media.Animation.DoubleAnimationUsingKeyFrames FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Media.Animation.DoubleAnimationUsingKeyFrames.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Media.Animation.DoubleAnimationUsingKeyFrames obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.DoubleAnimationUsingKeyFrames>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Media.Animation.DoubleAnimationUsingKeyFrames[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.DoubleAnimationUsingKeyFrames>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.DoubleAnimationUsingKeyFrames>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Media.Animation.DoubleAnimationUsingKeyFrames[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.DoubleAnimationUsingKeyFrames>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Media.Animation.DoubleAnimationUsingKeyFrames[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.DoubleAnimationUsingKeyFrames>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Media.Animation.DoubleAnimationUsingKeyFrames[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.DoubleAnimationUsingKeyFrames>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.DoubleAnimationUsingKeyFrames>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.DoubleAnimationUsingKeyFrames>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class DoubleAnimationUsingKeyFramesRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Media.Animation.DoubleAnimationUsingKeyFrames(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct DoubleKeyFrame
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Media.Animation.DoubleKeyFrame obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Media.Animation.DoubleKeyFrame>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.IDoubleKeyFrameMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Media.Animation.DoubleKeyFrame obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.IDoubleKeyFrameMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Media.Animation.DoubleKeyFrame FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Media.Animation.DoubleKeyFrame.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Media.Animation.DoubleKeyFrame obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.DoubleKeyFrame>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Media.Animation.DoubleKeyFrame[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.DoubleKeyFrame>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.DoubleKeyFrame>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Media.Animation.DoubleKeyFrame[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.DoubleKeyFrame>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Media.Animation.DoubleKeyFrame[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.DoubleKeyFrame>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Media.Animation.DoubleKeyFrame[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.DoubleKeyFrame>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.DoubleKeyFrame>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.DoubleKeyFrame>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class DoubleKeyFrameRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Media.Animation.DoubleKeyFrame(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct DoubleKeyFrameCollection
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Media.Animation.DoubleKeyFrameCollection obj) => obj is null ? null : MarshalInterface<global::System.Collections.Generic.IList<global::Microsoft.UI.Xaml.Media.Animation.DoubleKeyFrame>>.CreateMarshaler(obj);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Media.Animation.DoubleKeyFrameCollection obj) => MarshalInterface<global::System.Collections.Generic.IList<global::Microsoft.UI.Xaml.Media.Animation.DoubleKeyFrame>>.CreateMarshaler2(obj, global::ABI.System.Collections.Generic.IListMethods<global::Microsoft.UI.Xaml.Media.Animation.DoubleKeyFrame>.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Media.Animation.DoubleKeyFrameCollection FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Media.Animation.DoubleKeyFrameCollection.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Media.Animation.DoubleKeyFrameCollection obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.DoubleKeyFrameCollection>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Media.Animation.DoubleKeyFrameCollection[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.DoubleKeyFrameCollection>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.DoubleKeyFrameCollection>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Media.Animation.DoubleKeyFrameCollection[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.DoubleKeyFrameCollection>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Media.Animation.DoubleKeyFrameCollection[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.DoubleKeyFrameCollection>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Media.Animation.DoubleKeyFrameCollection[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.DoubleKeyFrameCollection>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.DoubleKeyFrameCollection>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.DoubleKeyFrameCollection>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class DoubleKeyFrameCollectionRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Media.Animation.DoubleKeyFrameCollection(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct DragItemThemeAnimation
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Media.Animation.DragItemThemeAnimation obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Media.Animation.DragItemThemeAnimation>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.IDragItemThemeAnimationMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Media.Animation.DragItemThemeAnimation obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.IDragItemThemeAnimationMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Media.Animation.DragItemThemeAnimation FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Media.Animation.DragItemThemeAnimation.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Media.Animation.DragItemThemeAnimation obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.DragItemThemeAnimation>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Media.Animation.DragItemThemeAnimation[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.DragItemThemeAnimation>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.DragItemThemeAnimation>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Media.Animation.DragItemThemeAnimation[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.DragItemThemeAnimation>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Media.Animation.DragItemThemeAnimation[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.DragItemThemeAnimation>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Media.Animation.DragItemThemeAnimation[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.DragItemThemeAnimation>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.DragItemThemeAnimation>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.DragItemThemeAnimation>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class DragItemThemeAnimationRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Media.Animation.DragItemThemeAnimation(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct DragOverThemeAnimation
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Media.Animation.DragOverThemeAnimation obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Media.Animation.DragOverThemeAnimation>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.IDragOverThemeAnimationMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Media.Animation.DragOverThemeAnimation obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.IDragOverThemeAnimationMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Media.Animation.DragOverThemeAnimation FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Media.Animation.DragOverThemeAnimation.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Media.Animation.DragOverThemeAnimation obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.DragOverThemeAnimation>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Media.Animation.DragOverThemeAnimation[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.DragOverThemeAnimation>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.DragOverThemeAnimation>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Media.Animation.DragOverThemeAnimation[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.DragOverThemeAnimation>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Media.Animation.DragOverThemeAnimation[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.DragOverThemeAnimation>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Media.Animation.DragOverThemeAnimation[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.DragOverThemeAnimation>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.DragOverThemeAnimation>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.DragOverThemeAnimation>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class DragOverThemeAnimationRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Media.Animation.DragOverThemeAnimation(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct DrillInNavigationTransitionInfo
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Media.Animation.DrillInNavigationTransitionInfo obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Media.Animation.DrillInNavigationTransitionInfo>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.IDrillInNavigationTransitionInfoMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Media.Animation.DrillInNavigationTransitionInfo obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.IDrillInNavigationTransitionInfoMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Media.Animation.DrillInNavigationTransitionInfo FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Media.Animation.DrillInNavigationTransitionInfo.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Media.Animation.DrillInNavigationTransitionInfo obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.DrillInNavigationTransitionInfo>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Media.Animation.DrillInNavigationTransitionInfo[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.DrillInNavigationTransitionInfo>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.DrillInNavigationTransitionInfo>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Media.Animation.DrillInNavigationTransitionInfo[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.DrillInNavigationTransitionInfo>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Media.Animation.DrillInNavigationTransitionInfo[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.DrillInNavigationTransitionInfo>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Media.Animation.DrillInNavigationTransitionInfo[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.DrillInNavigationTransitionInfo>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.DrillInNavigationTransitionInfo>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.DrillInNavigationTransitionInfo>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class DrillInNavigationTransitionInfoRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Media.Animation.DrillInNavigationTransitionInfo(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct DrillInThemeAnimation
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Media.Animation.DrillInThemeAnimation obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Media.Animation.DrillInThemeAnimation>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.IDrillInThemeAnimationMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Media.Animation.DrillInThemeAnimation obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.IDrillInThemeAnimationMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Media.Animation.DrillInThemeAnimation FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Media.Animation.DrillInThemeAnimation.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Media.Animation.DrillInThemeAnimation obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.DrillInThemeAnimation>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Media.Animation.DrillInThemeAnimation[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.DrillInThemeAnimation>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.DrillInThemeAnimation>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Media.Animation.DrillInThemeAnimation[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.DrillInThemeAnimation>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Media.Animation.DrillInThemeAnimation[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.DrillInThemeAnimation>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Media.Animation.DrillInThemeAnimation[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.DrillInThemeAnimation>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.DrillInThemeAnimation>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.DrillInThemeAnimation>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class DrillInThemeAnimationRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Media.Animation.DrillInThemeAnimation(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct DrillOutThemeAnimation
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Media.Animation.DrillOutThemeAnimation obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Media.Animation.DrillOutThemeAnimation>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.IDrillOutThemeAnimationMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Media.Animation.DrillOutThemeAnimation obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.IDrillOutThemeAnimationMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Media.Animation.DrillOutThemeAnimation FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Media.Animation.DrillOutThemeAnimation.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Media.Animation.DrillOutThemeAnimation obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.DrillOutThemeAnimation>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Media.Animation.DrillOutThemeAnimation[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.DrillOutThemeAnimation>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.DrillOutThemeAnimation>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Media.Animation.DrillOutThemeAnimation[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.DrillOutThemeAnimation>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Media.Animation.DrillOutThemeAnimation[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.DrillOutThemeAnimation>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Media.Animation.DrillOutThemeAnimation[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.DrillOutThemeAnimation>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.DrillOutThemeAnimation>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.DrillOutThemeAnimation>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class DrillOutThemeAnimationRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Media.Animation.DrillOutThemeAnimation(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct DropTargetItemThemeAnimation
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Media.Animation.DropTargetItemThemeAnimation obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Media.Animation.DropTargetItemThemeAnimation>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.IDropTargetItemThemeAnimationMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Media.Animation.DropTargetItemThemeAnimation obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.IDropTargetItemThemeAnimationMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Media.Animation.DropTargetItemThemeAnimation FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Media.Animation.DropTargetItemThemeAnimation.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Media.Animation.DropTargetItemThemeAnimation obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.DropTargetItemThemeAnimation>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Media.Animation.DropTargetItemThemeAnimation[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.DropTargetItemThemeAnimation>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.DropTargetItemThemeAnimation>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Media.Animation.DropTargetItemThemeAnimation[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.DropTargetItemThemeAnimation>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Media.Animation.DropTargetItemThemeAnimation[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.DropTargetItemThemeAnimation>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Media.Animation.DropTargetItemThemeAnimation[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.DropTargetItemThemeAnimation>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.DropTargetItemThemeAnimation>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.DropTargetItemThemeAnimation>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class DropTargetItemThemeAnimationRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Media.Animation.DropTargetItemThemeAnimation(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct EasingColorKeyFrame
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Media.Animation.EasingColorKeyFrame obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Media.Animation.EasingColorKeyFrame>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.IEasingColorKeyFrameMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Media.Animation.EasingColorKeyFrame obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.IEasingColorKeyFrameMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Media.Animation.EasingColorKeyFrame FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Media.Animation.EasingColorKeyFrame.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Media.Animation.EasingColorKeyFrame obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.EasingColorKeyFrame>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Media.Animation.EasingColorKeyFrame[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.EasingColorKeyFrame>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.EasingColorKeyFrame>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Media.Animation.EasingColorKeyFrame[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.EasingColorKeyFrame>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Media.Animation.EasingColorKeyFrame[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.EasingColorKeyFrame>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Media.Animation.EasingColorKeyFrame[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.EasingColorKeyFrame>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.EasingColorKeyFrame>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.EasingColorKeyFrame>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class EasingColorKeyFrameRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Media.Animation.EasingColorKeyFrame(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct EasingDoubleKeyFrame
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Media.Animation.EasingDoubleKeyFrame obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Media.Animation.EasingDoubleKeyFrame>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.IEasingDoubleKeyFrameMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Media.Animation.EasingDoubleKeyFrame obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.IEasingDoubleKeyFrameMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Media.Animation.EasingDoubleKeyFrame FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Media.Animation.EasingDoubleKeyFrame.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Media.Animation.EasingDoubleKeyFrame obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.EasingDoubleKeyFrame>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Media.Animation.EasingDoubleKeyFrame[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.EasingDoubleKeyFrame>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.EasingDoubleKeyFrame>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Media.Animation.EasingDoubleKeyFrame[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.EasingDoubleKeyFrame>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Media.Animation.EasingDoubleKeyFrame[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.EasingDoubleKeyFrame>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Media.Animation.EasingDoubleKeyFrame[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.EasingDoubleKeyFrame>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.EasingDoubleKeyFrame>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.EasingDoubleKeyFrame>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class EasingDoubleKeyFrameRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Media.Animation.EasingDoubleKeyFrame(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct EasingFunctionBase
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Media.Animation.EasingFunctionBase obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Media.Animation.EasingFunctionBase>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.IEasingFunctionBaseMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Media.Animation.EasingFunctionBase obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.IEasingFunctionBaseMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Media.Animation.EasingFunctionBase FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Media.Animation.EasingFunctionBase.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Media.Animation.EasingFunctionBase obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.EasingFunctionBase>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Media.Animation.EasingFunctionBase[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.EasingFunctionBase>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.EasingFunctionBase>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Media.Animation.EasingFunctionBase[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.EasingFunctionBase>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Media.Animation.EasingFunctionBase[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.EasingFunctionBase>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Media.Animation.EasingFunctionBase[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.EasingFunctionBase>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.EasingFunctionBase>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.EasingFunctionBase>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class EasingFunctionBaseRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Media.Animation.EasingFunctionBase(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct EasingPointKeyFrame
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Media.Animation.EasingPointKeyFrame obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Media.Animation.EasingPointKeyFrame>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.IEasingPointKeyFrameMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Media.Animation.EasingPointKeyFrame obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.IEasingPointKeyFrameMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Media.Animation.EasingPointKeyFrame FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Media.Animation.EasingPointKeyFrame.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Media.Animation.EasingPointKeyFrame obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.EasingPointKeyFrame>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Media.Animation.EasingPointKeyFrame[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.EasingPointKeyFrame>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.EasingPointKeyFrame>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Media.Animation.EasingPointKeyFrame[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.EasingPointKeyFrame>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Media.Animation.EasingPointKeyFrame[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.EasingPointKeyFrame>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Media.Animation.EasingPointKeyFrame[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.EasingPointKeyFrame>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.EasingPointKeyFrame>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.EasingPointKeyFrame>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class EasingPointKeyFrameRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Media.Animation.EasingPointKeyFrame(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct EdgeUIThemeTransition
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Media.Animation.EdgeUIThemeTransition obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Media.Animation.EdgeUIThemeTransition>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.IEdgeUIThemeTransitionMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Media.Animation.EdgeUIThemeTransition obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.IEdgeUIThemeTransitionMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Media.Animation.EdgeUIThemeTransition FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Media.Animation.EdgeUIThemeTransition.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Media.Animation.EdgeUIThemeTransition obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.EdgeUIThemeTransition>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Media.Animation.EdgeUIThemeTransition[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.EdgeUIThemeTransition>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.EdgeUIThemeTransition>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Media.Animation.EdgeUIThemeTransition[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.EdgeUIThemeTransition>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Media.Animation.EdgeUIThemeTransition[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.EdgeUIThemeTransition>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Media.Animation.EdgeUIThemeTransition[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.EdgeUIThemeTransition>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.EdgeUIThemeTransition>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.EdgeUIThemeTransition>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class EdgeUIThemeTransitionRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Media.Animation.EdgeUIThemeTransition(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct ElasticEase
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Media.Animation.ElasticEase obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Media.Animation.ElasticEase>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.IElasticEaseMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Media.Animation.ElasticEase obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.IElasticEaseMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Media.Animation.ElasticEase FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Media.Animation.ElasticEase.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Media.Animation.ElasticEase obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.ElasticEase>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Media.Animation.ElasticEase[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.ElasticEase>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.ElasticEase>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Media.Animation.ElasticEase[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.ElasticEase>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Media.Animation.ElasticEase[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.ElasticEase>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Media.Animation.ElasticEase[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.ElasticEase>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.ElasticEase>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.ElasticEase>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class ElasticEaseRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Media.Animation.ElasticEase(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct EntranceNavigationTransitionInfo
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Media.Animation.EntranceNavigationTransitionInfo obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Media.Animation.EntranceNavigationTransitionInfo>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.IEntranceNavigationTransitionInfoMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Media.Animation.EntranceNavigationTransitionInfo obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.IEntranceNavigationTransitionInfoMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Media.Animation.EntranceNavigationTransitionInfo FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Media.Animation.EntranceNavigationTransitionInfo.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Media.Animation.EntranceNavigationTransitionInfo obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.EntranceNavigationTransitionInfo>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Media.Animation.EntranceNavigationTransitionInfo[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.EntranceNavigationTransitionInfo>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.EntranceNavigationTransitionInfo>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Media.Animation.EntranceNavigationTransitionInfo[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.EntranceNavigationTransitionInfo>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Media.Animation.EntranceNavigationTransitionInfo[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.EntranceNavigationTransitionInfo>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Media.Animation.EntranceNavigationTransitionInfo[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.EntranceNavigationTransitionInfo>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.EntranceNavigationTransitionInfo>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.EntranceNavigationTransitionInfo>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class EntranceNavigationTransitionInfoRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Media.Animation.EntranceNavigationTransitionInfo(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct EntranceThemeTransition
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Media.Animation.EntranceThemeTransition obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Media.Animation.EntranceThemeTransition>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.IEntranceThemeTransitionMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Media.Animation.EntranceThemeTransition obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.IEntranceThemeTransitionMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Media.Animation.EntranceThemeTransition FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Media.Animation.EntranceThemeTransition.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Media.Animation.EntranceThemeTransition obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.EntranceThemeTransition>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Media.Animation.EntranceThemeTransition[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.EntranceThemeTransition>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.EntranceThemeTransition>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Media.Animation.EntranceThemeTransition[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.EntranceThemeTransition>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Media.Animation.EntranceThemeTransition[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.EntranceThemeTransition>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Media.Animation.EntranceThemeTransition[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.EntranceThemeTransition>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.EntranceThemeTransition>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.EntranceThemeTransition>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class EntranceThemeTransitionRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Media.Animation.EntranceThemeTransition(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct ExponentialEase
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Media.Animation.ExponentialEase obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Media.Animation.ExponentialEase>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.IExponentialEaseMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Media.Animation.ExponentialEase obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.IExponentialEaseMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Media.Animation.ExponentialEase FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Media.Animation.ExponentialEase.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Media.Animation.ExponentialEase obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.ExponentialEase>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Media.Animation.ExponentialEase[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.ExponentialEase>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.ExponentialEase>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Media.Animation.ExponentialEase[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.ExponentialEase>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Media.Animation.ExponentialEase[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.ExponentialEase>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Media.Animation.ExponentialEase[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.ExponentialEase>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.ExponentialEase>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.ExponentialEase>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class ExponentialEaseRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Media.Animation.ExponentialEase(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct FadeInThemeAnimation
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Media.Animation.FadeInThemeAnimation obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Media.Animation.FadeInThemeAnimation>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.IFadeInThemeAnimationMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Media.Animation.FadeInThemeAnimation obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.IFadeInThemeAnimationMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Media.Animation.FadeInThemeAnimation FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Media.Animation.FadeInThemeAnimation.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Media.Animation.FadeInThemeAnimation obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.FadeInThemeAnimation>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Media.Animation.FadeInThemeAnimation[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.FadeInThemeAnimation>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.FadeInThemeAnimation>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Media.Animation.FadeInThemeAnimation[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.FadeInThemeAnimation>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Media.Animation.FadeInThemeAnimation[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.FadeInThemeAnimation>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Media.Animation.FadeInThemeAnimation[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.FadeInThemeAnimation>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.FadeInThemeAnimation>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.FadeInThemeAnimation>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class FadeInThemeAnimationRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Media.Animation.FadeInThemeAnimation(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct FadeOutThemeAnimation
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Media.Animation.FadeOutThemeAnimation obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Media.Animation.FadeOutThemeAnimation>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.IFadeOutThemeAnimationMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Media.Animation.FadeOutThemeAnimation obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.IFadeOutThemeAnimationMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Media.Animation.FadeOutThemeAnimation FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Media.Animation.FadeOutThemeAnimation.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Media.Animation.FadeOutThemeAnimation obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.FadeOutThemeAnimation>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Media.Animation.FadeOutThemeAnimation[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.FadeOutThemeAnimation>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.FadeOutThemeAnimation>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Media.Animation.FadeOutThemeAnimation[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.FadeOutThemeAnimation>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Media.Animation.FadeOutThemeAnimation[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.FadeOutThemeAnimation>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Media.Animation.FadeOutThemeAnimation[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.FadeOutThemeAnimation>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.FadeOutThemeAnimation>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.FadeOutThemeAnimation>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class FadeOutThemeAnimationRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Media.Animation.FadeOutThemeAnimation(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct GravityConnectedAnimationConfiguration
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Media.Animation.GravityConnectedAnimationConfiguration obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Media.Animation.GravityConnectedAnimationConfiguration>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.IGravityConnectedAnimationConfigurationMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Media.Animation.GravityConnectedAnimationConfiguration obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.IGravityConnectedAnimationConfigurationMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Media.Animation.GravityConnectedAnimationConfiguration FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Media.Animation.GravityConnectedAnimationConfiguration.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Media.Animation.GravityConnectedAnimationConfiguration obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.GravityConnectedAnimationConfiguration>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Media.Animation.GravityConnectedAnimationConfiguration[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.GravityConnectedAnimationConfiguration>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.GravityConnectedAnimationConfiguration>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Media.Animation.GravityConnectedAnimationConfiguration[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.GravityConnectedAnimationConfiguration>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Media.Animation.GravityConnectedAnimationConfiguration[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.GravityConnectedAnimationConfiguration>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Media.Animation.GravityConnectedAnimationConfiguration[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.GravityConnectedAnimationConfiguration>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.GravityConnectedAnimationConfiguration>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.GravityConnectedAnimationConfiguration>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class GravityConnectedAnimationConfigurationRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Media.Animation.GravityConnectedAnimationConfiguration(inspectable.ObjRef);
    }
    internal static class IAddDeleteThemeTransitionMethods
    {



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x5E, 0x59, 0x28, 0x37, 0xA2, 0xE, 0x4B, 0x52, 0x93, 0x48, 0x86, 0xCF, 0xB8, 0x60, 0xA0, 0xFF };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("3728595E-0EA2-524B-9348-86CFB860A0FF")]
    internal interface IAddDeleteThemeTransition : global::Microsoft.UI.Xaml.Media.Animation.IAddDeleteThemeTransition
    {
    }
    internal static class IBackEaseMethods
    {

        internal static unsafe double get_Amplitude(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_Amplitude(IObjectReference _obj, double value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, int>**)ThisPtr)[7](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x43, 0xBD, 0x75, 0x17, 0x39, 0x19, 0xCB, 0x57, 0x8C, 0x31, 0xCD, 0x75, 0x90, 0xEC, 0x95, 0x43 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("1775BD43-1939-57CB-8C31-CD7590EC9543")]
    internal interface IBackEase : global::Microsoft.UI.Xaml.Media.Animation.IBackEase
    {
    }
    internal static class IBackEaseStaticsMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_AmplitudeProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xF9, 0x2E, 0xAD, 0x1E, 0x1, 0x79, 0x2D, 0x54, 0xAE, 0x8, 0x7B, 0x59, 0x37, 0xB3, 0x2E, 0xF0 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("1EAD2EF9-7901-542D-AE08-7B5937B32EF0")]
    internal interface IBackEaseStatics : global::Microsoft.UI.Xaml.Media.Animation.IBackEaseStatics
    {
    }
    internal static class IBasicConnectedAnimationConfigurationMethods
    {



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xFE, 0x8A, 0xF1, 0x7F, 0xE8, 0x91, 0xFA, 0x52, 0xA1, 0xC1, 0x7B, 0x2C, 0x1A, 0x14, 0x1, 0x18 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("7FF18AFE-91E8-52FA-A1C1-7B2C1A140118")]
    internal interface IBasicConnectedAnimationConfiguration : global::Microsoft.UI.Xaml.Media.Animation.IBasicConnectedAnimationConfiguration
    {
    }
    internal static class IBasicConnectedAnimationConfigurationFactoryMethods
    {


        internal static unsafe global::Microsoft.UI.Xaml.Media.Animation.BasicConnectedAnimationConfiguration CreateInstance(IObjectReference _obj, object baseInterface, out object innerInterface)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __baseInterface = default;
            IntPtr __innerInterface = default;
            IntPtr __retval = default;
            try
            {
                __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                global::System.GC.KeepAlive(_obj);
                innerInterface = MarshalInspectable<object>.FromAbi(__innerInterface);
                return global::ABI.Microsoft.UI.Xaml.Media.Animation.BasicConnectedAnimationConfiguration.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                MarshalInspectable<object>.DisposeAbi(__innerInterface);
                global::ABI.Microsoft.UI.Xaml.Media.Animation.BasicConnectedAnimationConfiguration.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x2, 0x6A, 0x15, 0x2D, 0xB5, 0xF, 0xD1, 0x5A, 0xAF, 0x9B, 0xBC, 0x9C, 0x27, 0x20, 0xFE, 0xCB };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("2D156A02-0FB5-5AD1-AF9B-BC9C2720FECB")]
    internal interface IBasicConnectedAnimationConfigurationFactory : global::Microsoft.UI.Xaml.Media.Animation.IBasicConnectedAnimationConfigurationFactory
    {
    }
    internal static class IBeginStoryboardMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.Media.Animation.Storyboard get_Storyboard(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Media.Animation.Storyboard.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Media.Animation.Storyboard.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_Storyboard(IObjectReference _obj, global::Microsoft.UI.Xaml.Media.Animation.Storyboard value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.Media.Animation.Storyboard.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[7](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x20, 0x47, 0x36, 0xBB, 0x5A, 0xEE, 0x32, 0x5B, 0x91, 0xE2, 0x62, 0x58, 0x97, 0x29, 0xFD, 0x3A };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("BB364720-EE5A-5B32-91E2-62589729FD3A")]
    internal interface IBeginStoryboard : global::Microsoft.UI.Xaml.Media.Animation.IBeginStoryboard
    {
    }
    internal static class IBeginStoryboardStaticsMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_StoryboardProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xEB, 0xDB, 0x5F, 0x4D, 0xE, 0x6B, 0x8F, 0x5A, 0xA8, 0xF0, 0x1, 0xF4, 0x38, 0xDF, 0x8F, 0xB2 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("4D5FDBEB-6B0E-5A8F-A8F0-01F438DF8FB2")]
    internal interface IBeginStoryboardStatics : global::Microsoft.UI.Xaml.Media.Animation.IBeginStoryboardStatics
    {
    }
    internal static class IBounceEaseMethods
    {

        internal static unsafe int get_Bounces(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            int __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_Bounces(IObjectReference _obj, int value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int, int>**)ThisPtr)[7](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe double get_Bounciness(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_Bounciness(IObjectReference _obj, double value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, int>**)ThisPtr)[9](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xFF, 0xBF, 0x38, 0xC1, 0xC8, 0x87, 0x60, 0x5C, 0xB2, 0x80, 0x68, 0x2A, 0x49, 0x9C, 0x58, 0xC3 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("C138BFFF-87C8-5C60-B280-682A499C58C3")]
    internal interface IBounceEase : global::Microsoft.UI.Xaml.Media.Animation.IBounceEase
    {
    }
    internal static class IBounceEaseStaticsMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_BouncesProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_BouncinessProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x38, 0x6B, 0x71, 0xD7, 0x5, 0xC7, 0x93, 0x50, 0x96, 0xD6, 0x73, 0x5C, 0x13, 0x10, 0x5A, 0x30 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("D7716B38-C705-5093-96D6-735C13105A30")]
    internal interface IBounceEaseStatics : global::Microsoft.UI.Xaml.Media.Animation.IBounceEaseStatics
    {
    }
    internal static class ICircleEaseMethods
    {



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x80, 0x90, 0x20, 0x88, 0x29, 0x29, 0x24, 0x59, 0x9B, 0x52, 0xF9, 0x51, 0x96, 0x56, 0x87, 0x13 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("88209080-2929-5924-9B52-F95196568713")]
    internal interface ICircleEase : global::Microsoft.UI.Xaml.Media.Animation.ICircleEase
    {
    }
    internal static class IColorAnimationMethods
    {

        internal static unsafe global::System.Nullable<global::Windows.UI.Color> get_By(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[10](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInterface<global::System.Nullable<global::Windows.UI.Color>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Nullable<global::Windows.UI.Color>>.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_By(IObjectReference _obj, global::System.Nullable<global::Windows.UI.Color> value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = MarshalInterface<global::System.Nullable<global::Windows.UI.Color>>.CreateMarshaler2(value, global::ABI.System.Nullable<global::Windows.UI.Color>.PIID);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[11](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.Media.Animation.EasingFunctionBase get_EasingFunction(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[12](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Media.Animation.EasingFunctionBase.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Media.Animation.EasingFunctionBase.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_EasingFunction(IObjectReference _obj, global::Microsoft.UI.Xaml.Media.Animation.EasingFunctionBase value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.Media.Animation.EasingFunctionBase.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[13](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe bool get_EnableDependentAnimation(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[14](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_EnableDependentAnimation(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[15](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::System.Nullable<global::Windows.UI.Color> get_From(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInterface<global::System.Nullable<global::Windows.UI.Color>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Nullable<global::Windows.UI.Color>>.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_From(IObjectReference _obj, global::System.Nullable<global::Windows.UI.Color> value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = MarshalInterface<global::System.Nullable<global::Windows.UI.Color>>.CreateMarshaler2(value, global::ABI.System.Nullable<global::Windows.UI.Color>.PIID);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[7](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::System.Nullable<global::Windows.UI.Color> get_To(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInterface<global::System.Nullable<global::Windows.UI.Color>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Nullable<global::Windows.UI.Color>>.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_To(IObjectReference _obj, global::System.Nullable<global::Windows.UI.Color> value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = MarshalInterface<global::System.Nullable<global::Windows.UI.Color>>.CreateMarshaler2(value, global::ABI.System.Nullable<global::Windows.UI.Color>.PIID);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[9](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xD2, 0x62, 0xF8, 0x6D, 0xF2, 0x65, 0xA8, 0x53, 0x8B, 0x1B, 0x1B, 0x6C, 0x17, 0x63, 0xC1, 0x75 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("6DF862D2-65F2-53A8-8B1B-1B6C1763C175")]
    internal interface IColorAnimation : global::Microsoft.UI.Xaml.Media.Animation.IColorAnimation
    {
    }
    internal static class IColorAnimationStaticsMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_ByProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_EasingFunctionProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[9](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_EnableDependentAnimationProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[10](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_FromProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_ToProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xF, 0xBE, 0xAE, 0x99, 0x8E, 0x92, 0xCB, 0x52, 0x84, 0x2F, 0xF4, 0x3F, 0xE6, 0x60, 0xFF, 0x6 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("99AEBE0F-928E-52CB-842F-F43FE660FF06")]
    internal interface IColorAnimationStatics : global::Microsoft.UI.Xaml.Media.Animation.IColorAnimationStatics
    {
    }
    internal static class IColorAnimationUsingKeyFramesMethods
    {

        internal static unsafe bool get_EnableDependentAnimation(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[7](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_EnableDependentAnimation(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[8](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.UI.Xaml.Media.Animation.ColorKeyFrameCollection get_KeyFrames(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Media.Animation.ColorKeyFrameCollection.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Media.Animation.ColorKeyFrameCollection.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x97, 0x8C, 0xF2, 0x96, 0xEB, 0x67, 0x93, 0x53, 0x8E, 0x37, 0xA8, 0x1D, 0x8F, 0xDA, 0x18, 0xB3 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("96F28C97-67EB-5393-8E37-A81D8FDA18B3")]
    internal interface IColorAnimationUsingKeyFrames : global::Microsoft.UI.Xaml.Media.Animation.IColorAnimationUsingKeyFrames
    {
    }
    internal static class IColorAnimationUsingKeyFramesStaticsMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_EnableDependentAnimationProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x40, 0x48, 0xF, 0x5B, 0xF7, 0xE, 0xD7, 0x5A, 0xA8, 0xF2, 0xD4, 0x94, 0x24, 0xED, 0x90, 0x6F };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("5B0F4840-0EF7-5AD7-A8F2-D49424ED906F")]
    internal interface IColorAnimationUsingKeyFramesStatics : global::Microsoft.UI.Xaml.Media.Animation.IColorAnimationUsingKeyFramesStatics
    {
    }
    internal static class IColorKeyFrameMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.Media.Animation.KeyTime get_KeyTime(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Xaml.Media.Animation.KeyTime __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Media.Animation.KeyTime*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_KeyTime(IObjectReference _obj, global::Microsoft.UI.Xaml.Media.Animation.KeyTime value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Media.Animation.KeyTime, int>**)ThisPtr)[9](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Windows.UI.Color get_Value(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.UI.Color __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_Value(IObjectReference _obj, global::Windows.UI.Color value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.UI.Color, int>**)ThisPtr)[7](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x7E, 0x8C, 0x84, 0x2, 0x72, 0xC7, 0x66, 0x5F, 0x84, 0x2B, 0xFD, 0x49, 0x4D, 0xD, 0xA6, 0x69 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("02848C7E-C772-5F66-842B-FD494D0DA669")]
    internal interface IColorKeyFrame : global::Microsoft.UI.Xaml.Media.Animation.IColorKeyFrame
    {
    }
    internal static class IColorKeyFrameFactoryMethods
    {


        internal static unsafe global::Microsoft.UI.Xaml.Media.Animation.ColorKeyFrame CreateInstance(IObjectReference _obj, object baseInterface, out object innerInterface)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __baseInterface = default;
            IntPtr __innerInterface = default;
            IntPtr __retval = default;
            try
            {
                __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                global::System.GC.KeepAlive(_obj);
                innerInterface = MarshalInspectable<object>.FromAbi(__innerInterface);
                return global::ABI.Microsoft.UI.Xaml.Media.Animation.ColorKeyFrame.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                MarshalInspectable<object>.DisposeAbi(__innerInterface);
                global::ABI.Microsoft.UI.Xaml.Media.Animation.ColorKeyFrame.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x82, 0xC1, 0x2C, 0xA8, 0x80, 0x9D, 0x8C, 0x50, 0xB9, 0x62, 0xD7, 0x42, 0x25, 0x58, 0x72, 0x0 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("A82CC182-9D80-508C-B962-D74225587200")]
    internal interface IColorKeyFrameFactory : global::Microsoft.UI.Xaml.Media.Animation.IColorKeyFrameFactory
    {
    }
    internal static class IColorKeyFrameStaticsMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_KeyTimeProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_ValueProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x68, 0xDD, 0x2F, 0xB6, 0xC7, 0x15, 0x6C, 0x5C, 0xA4, 0xFA, 0xC, 0xEE, 0x10, 0xE0, 0x45, 0x56 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("B62FDD68-15C7-5C6C-A4FA-0CEE10E04556")]
    internal interface IColorKeyFrameStatics : global::Microsoft.UI.Xaml.Media.Animation.IColorKeyFrameStatics
    {
    }
    internal static class ICommonNavigationTransitionInfoMethods
    {

        internal static unsafe bool get_IsStaggeringEnabled(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_IsStaggeringEnabled(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[7](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x5F, 0xC9, 0x1C, 0xB2, 0x3D, 0x9E, 0xA, 0x54, 0xB3, 0x5A, 0x17, 0xB9, 0x9D, 0xC4, 0x1B, 0x1E };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("B21CC95F-9E3D-540A-B35A-17B99DC41B1E")]
    internal interface ICommonNavigationTransitionInfo : global::Microsoft.UI.Xaml.Media.Animation.ICommonNavigationTransitionInfo
    {
    }
    internal static class ICommonNavigationTransitionInfoStaticsMethods
    {


        internal static unsafe bool GetIsStaggerElement(IObjectReference _obj, global::Microsoft.UI.Xaml.UIElement element)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __element = default;
            byte __retval = default;
            try
            {
                __element = global::ABI.Microsoft.UI.Xaml.UIElement.CreateMarshaler2(element);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, byte*, int>**)ThisPtr)[8](ThisPtr, MarshalInspectable<object>.GetAbi(__element), &__retval));
                global::System.GC.KeepAlive(_obj);
                return __retval != 0;
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__element);
            }
        }

        internal static unsafe void SetIsStaggerElement(IObjectReference _obj, global::Microsoft.UI.Xaml.UIElement element, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __element = default;
            try
            {
                __element = global::ABI.Microsoft.UI.Xaml.UIElement.CreateMarshaler2(element);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, byte, int>**)ThisPtr)[9](ThisPtr, MarshalInspectable<object>.GetAbi(__element), (byte)(value ? 1 : 0)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__element);
            }
        }
        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_IsStaggerElementProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_IsStaggeringEnabledProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xE1, 0xB, 0x2, 0x20, 0xBA, 0xC1, 0xF5, 0x59, 0x99, 0x7A, 0xC0, 0x4F, 0x5E, 0x38, 0x33, 0xB0 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("20020BE1-C1BA-59F5-997A-C04F5E3833B0")]
    internal interface ICommonNavigationTransitionInfoStatics : global::Microsoft.UI.Xaml.Media.Animation.ICommonNavigationTransitionInfoStatics
    {
    }
    internal static class IConnectedAnimationMethods
    {


        internal static unsafe bool TryStart(IObjectReference _obj, global::Microsoft.UI.Xaml.UIElement destination)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __destination = default;
            byte __retval = default;
            try
            {
                __destination = global::ABI.Microsoft.UI.Xaml.UIElement.CreateMarshaler2(destination);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, byte*, int>**)ThisPtr)[12](ThisPtr, MarshalInspectable<object>.GetAbi(__destination), &__retval));
                global::System.GC.KeepAlive(_obj);
                return __retval != 0;
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__destination);
            }
        }

        internal static unsafe bool TryStart(IObjectReference _obj, global::Microsoft.UI.Xaml.UIElement destination, global::System.Collections.Generic.IEnumerable<global::Microsoft.UI.Xaml.UIElement> coordinatedElements)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __destination = default;
            ObjectReferenceValue __coordinatedElements = default;
            byte __retval = default;
            try
            {
                __destination = global::ABI.Microsoft.UI.Xaml.UIElement.CreateMarshaler2(destination);
                __coordinatedElements = MarshalInterface<global::System.Collections.Generic.IEnumerable<global::Microsoft.UI.Xaml.UIElement>>.CreateMarshaler2(coordinatedElements, global::ABI.System.Collections.Generic.IEnumerableMethods<global::Microsoft.UI.Xaml.UIElement>.IID);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, byte*, int>**)ThisPtr)[13](ThisPtr, MarshalInspectable<object>.GetAbi(__destination), MarshalInspectable<object>.GetAbi(__coordinatedElements), &__retval));
                global::System.GC.KeepAlive(_obj);
                return __retval != 0;
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__destination);
                MarshalInspectable<object>.DisposeMarshaler(__coordinatedElements);
            }
        }

        internal static unsafe void Cancel(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int>**)ThisPtr)[14](ThisPtr));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe void SetAnimationComponent(IObjectReference _obj, global::Microsoft.UI.Xaml.Media.Animation.ConnectedAnimationComponent component, global::Microsoft.UI.Composition.ICompositionAnimationBase animation)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __animation = default;
            try
            {
                __animation = MarshalInterface<global::Microsoft.UI.Composition.ICompositionAnimationBase>.CreateMarshaler2(animation, global::ABI.Microsoft.UI.Composition.ICompositionAnimationBaseMethods.IID);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Media.Animation.ConnectedAnimationComponent, IntPtr, int>**)ThisPtr)[15](ThisPtr, component, MarshalInspectable<object>.GetAbi(__animation)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__animation);
            }
        }
        internal static unsafe global::Microsoft.UI.Xaml.Media.Animation.ConnectedAnimationConfiguration get_Configuration(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Media.Animation.ConnectedAnimationConfiguration.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Media.Animation.ConnectedAnimationConfiguration.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_Configuration(IObjectReference _obj, global::Microsoft.UI.Xaml.Media.Animation.ConnectedAnimationConfiguration value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.Media.Animation.ConnectedAnimationConfiguration.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[9](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe bool get_IsScaleAnimationEnabled(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_IsScaleAnimationEnabled(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[7](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }


        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Media.Animation.ConnectedAnimation, object>>> _Completed_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Media.Animation.ConnectedAnimation, object>>> MakeCompletedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _Completed_, new(), null);
            return _Completed_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Media.Animation.ConnectedAnimation, object>>> _Completed => _Completed_ ?? MakeCompletedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Media.Animation.ConnectedAnimation, object>> Get_Completed2(IObjectReference _obj, object _thisObj)
        {
            return _Completed.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Xaml_Media_Animation_ConnectedAnimation__object_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[10],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[11],
                0);
            });
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xAD, 0xC6, 0xC1, 0xA9, 0x70, 0x76, 0x9C, 0x58, 0xA6, 0x8, 0x9B, 0x5C, 0x1, 0xCE, 0xC7, 0x1F };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("A9C1C6AD-7670-589C-A608-9B5C01CEC71F")]
    internal interface IConnectedAnimation : global::Microsoft.UI.Xaml.Media.Animation.IConnectedAnimation
    {
    }
    internal static class IConnectedAnimationConfigurationMethods
    {



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x9D, 0x37, 0x48, 0xE8, 0x25, 0x7E, 0x76, 0x59, 0xBF, 0xB3, 0x8, 0x6B, 0xAC, 0x4E, 0x88, 0x49 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("E848379D-7E25-5976-BFB3-086BAC4E8849")]
    internal interface IConnectedAnimationConfiguration : global::Microsoft.UI.Xaml.Media.Animation.IConnectedAnimationConfiguration
    {
    }
    internal static class IConnectedAnimationConfigurationFactoryMethods
    {



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x45, 0x88, 0x0, 0x71, 0x12, 0x4A, 0x1A, 0x5A, 0x96, 0x9C, 0x41, 0x52, 0xB5, 0x17, 0x49, 0x22 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("71008845-4A12-5A1A-969C-4152B5174922")]
    internal interface IConnectedAnimationConfigurationFactory : global::Microsoft.UI.Xaml.Media.Animation.IConnectedAnimationConfigurationFactory
    {
    }
    internal static class IConnectedAnimationServiceMethods
    {


        internal static unsafe global::Microsoft.UI.Xaml.Media.Animation.ConnectedAnimation PrepareToAnimate(IObjectReference _obj, string key, global::Microsoft.UI.Xaml.UIElement source)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __source = default;
            IntPtr __retval = default;
            try
            {
                __source = global::ABI.Microsoft.UI.Xaml.UIElement.CreateMarshaler2(source);
                MarshalString.Pinnable __key = new(key);
                fixed(void* ___key = __key)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[10](ThisPtr, MarshalString.GetAbi(ref __key), MarshalInspectable<object>.GetAbi(__source), &__retval));
                    global::System.GC.KeepAlive(_obj);
                    return global::ABI.Microsoft.UI.Xaml.Media.Animation.ConnectedAnimation.FromAbi(__retval);
                }
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__source);
                global::ABI.Microsoft.UI.Xaml.Media.Animation.ConnectedAnimation.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.Media.Animation.ConnectedAnimation GetAnimation(IObjectReference _obj, string key)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                MarshalString.Pinnable __key = new(key);
                fixed(void* ___key = __key)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[11](ThisPtr, MarshalString.GetAbi(ref __key), &__retval));
                    global::System.GC.KeepAlive(_obj);
                    return global::ABI.Microsoft.UI.Xaml.Media.Animation.ConnectedAnimation.FromAbi(__retval);
                }
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Media.Animation.ConnectedAnimation.DisposeAbi(__retval);
            }
        }
        internal static unsafe global::System.TimeSpan get_DefaultDuration(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::ABI.System.TimeSpan __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::ABI.System.TimeSpan*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.System.TimeSpan.FromAbi(__retval);
            }
            finally
            {
                global::ABI.System.TimeSpan.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_DefaultDuration(IObjectReference _obj, global::System.TimeSpan value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::ABI.System.TimeSpan.Marshaler __value = default;
            try
            {
                __value = global::ABI.System.TimeSpan.CreateMarshaler(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::ABI.System.TimeSpan, int>**)ThisPtr)[7](ThisPtr, global::ABI.System.TimeSpan.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                global::ABI.System.TimeSpan.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::Microsoft.UI.Composition.CompositionEasingFunction get_DefaultEasingFunction(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Composition.CompositionEasingFunction.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Composition.CompositionEasingFunction.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_DefaultEasingFunction(IObjectReference _obj, global::Microsoft.UI.Composition.CompositionEasingFunction value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Composition.CompositionEasingFunction.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[9](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x63, 0x21, 0xF7, 0x85, 0xC8, 0xC3, 0x6A, 0x58, 0x91, 0xFE, 0x3E, 0x3, 0x15, 0xA3, 0xA4, 0xFC };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("85F72163-C3C8-586A-91FE-3E0315A3A4FC")]
    internal interface IConnectedAnimationService : global::Microsoft.UI.Xaml.Media.Animation.IConnectedAnimationService
    {
    }
    internal static class IConnectedAnimationServiceStaticsMethods
    {


        internal static unsafe global::Microsoft.UI.Xaml.Media.Animation.ConnectedAnimationService GetForCurrentView(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Media.Animation.ConnectedAnimationService.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Media.Animation.ConnectedAnimationService.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x8D, 0xD6, 0xA, 0xF3, 0x26, 0x34, 0x64, 0x55, 0x92, 0xC6, 0x28, 0x8B, 0x81, 0x9E, 0x65, 0x2A };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("F30AD68D-3426-5564-92C6-288B819E652A")]
    internal interface IConnectedAnimationServiceStatics : global::Microsoft.UI.Xaml.Media.Animation.IConnectedAnimationServiceStatics
    {
    }
    internal static class IContentThemeTransitionMethods
    {

        internal static unsafe double get_HorizontalOffset(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_HorizontalOffset(IObjectReference _obj, double value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, int>**)ThisPtr)[7](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe double get_VerticalOffset(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_VerticalOffset(IObjectReference _obj, double value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, int>**)ThisPtr)[9](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x71, 0x70, 0xF4, 0xDF, 0x51, 0xCC, 0x6C, 0x55, 0xA3, 0xFE, 0x8B, 0xBB, 0x4C, 0xBA, 0x61, 0x95 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("DFF47071-CC51-556C-A3FE-8BBB4CBA6195")]
    internal interface IContentThemeTransition : global::Microsoft.UI.Xaml.Media.Animation.IContentThemeTransition
    {
    }
    internal static class IContentThemeTransitionStaticsMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_HorizontalOffsetProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_VerticalOffsetProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xB1, 0xA8, 0xCD, 0x95, 0x67, 0x66, 0xE3, 0x56, 0xBE, 0x40, 0x86, 0x6E, 0xEF, 0x53, 0x66, 0x3C };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("95CDA8B1-6667-56E3-BE40-866EEF53663C")]
    internal interface IContentThemeTransitionStatics : global::Microsoft.UI.Xaml.Media.Animation.IContentThemeTransitionStatics
    {
    }
    internal static class IContinuumNavigationTransitionInfoMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.UIElement get_ExitElement(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.UIElement.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.UIElement.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_ExitElement(IObjectReference _obj, global::Microsoft.UI.Xaml.UIElement value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.UIElement.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[7](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xF, 0xA7, 0x5D, 0xC5, 0x2A, 0xFF, 0xC3, 0x5F, 0x81, 0xC5, 0x96, 0x70, 0xF4, 0xD7, 0x87, 0x52 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("C55DA70F-FF2A-5FC3-81C5-9670F4D78752")]
    internal interface IContinuumNavigationTransitionInfo : global::Microsoft.UI.Xaml.Media.Animation.IContinuumNavigationTransitionInfo
    {
    }
    internal static class IContinuumNavigationTransitionInfoStaticsMethods
    {


        internal static unsafe bool GetIsEntranceElement(IObjectReference _obj, global::Microsoft.UI.Xaml.UIElement element)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __element = default;
            byte __retval = default;
            try
            {
                __element = global::ABI.Microsoft.UI.Xaml.UIElement.CreateMarshaler2(element);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, byte*, int>**)ThisPtr)[8](ThisPtr, MarshalInspectable<object>.GetAbi(__element), &__retval));
                global::System.GC.KeepAlive(_obj);
                return __retval != 0;
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__element);
            }
        }

        internal static unsafe void SetIsEntranceElement(IObjectReference _obj, global::Microsoft.UI.Xaml.UIElement element, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __element = default;
            try
            {
                __element = global::ABI.Microsoft.UI.Xaml.UIElement.CreateMarshaler2(element);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, byte, int>**)ThisPtr)[9](ThisPtr, MarshalInspectable<object>.GetAbi(__element), (byte)(value ? 1 : 0)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__element);
            }
        }

        internal static unsafe bool GetIsExitElement(IObjectReference _obj, global::Microsoft.UI.Xaml.UIElement element)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __element = default;
            byte __retval = default;
            try
            {
                __element = global::ABI.Microsoft.UI.Xaml.UIElement.CreateMarshaler2(element);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, byte*, int>**)ThisPtr)[11](ThisPtr, MarshalInspectable<object>.GetAbi(__element), &__retval));
                global::System.GC.KeepAlive(_obj);
                return __retval != 0;
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__element);
            }
        }

        internal static unsafe void SetIsExitElement(IObjectReference _obj, global::Microsoft.UI.Xaml.UIElement element, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __element = default;
            try
            {
                __element = global::ABI.Microsoft.UI.Xaml.UIElement.CreateMarshaler2(element);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, byte, int>**)ThisPtr)[12](ThisPtr, MarshalInspectable<object>.GetAbi(__element), (byte)(value ? 1 : 0)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__element);
            }
        }

        internal static unsafe bool GetExitElementContainer(IObjectReference _obj, global::Microsoft.UI.Xaml.Controls.ListViewBase element)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __element = default;
            byte __retval = default;
            try
            {
                __element = global::ABI.Microsoft.UI.Xaml.Controls.ListViewBase.CreateMarshaler2(element);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, byte*, int>**)ThisPtr)[14](ThisPtr, MarshalInspectable<object>.GetAbi(__element), &__retval));
                global::System.GC.KeepAlive(_obj);
                return __retval != 0;
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__element);
            }
        }

        internal static unsafe void SetExitElementContainer(IObjectReference _obj, global::Microsoft.UI.Xaml.Controls.ListViewBase element, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __element = default;
            try
            {
                __element = global::ABI.Microsoft.UI.Xaml.Controls.ListViewBase.CreateMarshaler2(element);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, byte, int>**)ThisPtr)[15](ThisPtr, MarshalInspectable<object>.GetAbi(__element), (byte)(value ? 1 : 0)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__element);
            }
        }
        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_ExitElementContainerProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[13](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_ExitElementProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_IsEntranceElementProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_IsExitElementProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[10](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xFD, 0x6, 0x90, 0xCA, 0x13, 0xF5, 0x34, 0x5F, 0xAD, 0x7F, 0x49, 0xF9, 0xD7, 0xA9, 0x94, 0x32 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("CA9006FD-F513-5F34-AD7F-49F9D7A99432")]
    internal interface IContinuumNavigationTransitionInfoStatics : global::Microsoft.UI.Xaml.Media.Animation.IContinuumNavigationTransitionInfoStatics
    {
    }
    internal static class ICubicEaseMethods
    {



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xB4, 0x18, 0xA2, 0x1, 0x7E, 0xEB, 0xF9, 0x54, 0xBF, 0xB6, 0xC6, 0xEE, 0x12, 0x80, 0x13, 0xD2 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("01A218B4-EB7E-54F9-BFB6-C6EE128013D2")]
    internal interface ICubicEase : global::Microsoft.UI.Xaml.Media.Animation.ICubicEase
    {
    }
    internal static class IDirectConnectedAnimationConfigurationMethods
    {



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xEB, 0x92, 0xF1, 0x44, 0x11, 0xCC, 0x5E, 0x54, 0x8F, 0xA2, 0x1F, 0xE, 0xC9, 0xC4, 0x43, 0x8A };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("44F192EB-CC11-545E-8FA2-1F0EC9C4438A")]
    internal interface IDirectConnectedAnimationConfiguration : global::Microsoft.UI.Xaml.Media.Animation.IDirectConnectedAnimationConfiguration
    {
    }
    internal static class IDirectConnectedAnimationConfigurationFactoryMethods
    {


        internal static unsafe global::Microsoft.UI.Xaml.Media.Animation.DirectConnectedAnimationConfiguration CreateInstance(IObjectReference _obj, object baseInterface, out object innerInterface)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __baseInterface = default;
            IntPtr __innerInterface = default;
            IntPtr __retval = default;
            try
            {
                __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                global::System.GC.KeepAlive(_obj);
                innerInterface = MarshalInspectable<object>.FromAbi(__innerInterface);
                return global::ABI.Microsoft.UI.Xaml.Media.Animation.DirectConnectedAnimationConfiguration.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                MarshalInspectable<object>.DisposeAbi(__innerInterface);
                global::ABI.Microsoft.UI.Xaml.Media.Animation.DirectConnectedAnimationConfiguration.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x9B, 0xBA, 0x4A, 0x60, 0xB8, 0x4E, 0x10, 0x53, 0x91, 0xDC, 0x30, 0x96, 0x2E, 0x25, 0xAB, 0x0 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("604ABA9B-4EB8-5310-91DC-30962E25AB00")]
    internal interface IDirectConnectedAnimationConfigurationFactory : global::Microsoft.UI.Xaml.Media.Animation.IDirectConnectedAnimationConfigurationFactory
    {
    }
    internal static class IDiscreteColorKeyFrameMethods
    {



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xA7, 0x88, 0x3D, 0x9B, 0xD3, 0x31, 0x12, 0x59, 0x86, 0x46, 0x64, 0x1A, 0x8A, 0x56, 0x5C, 0xA1 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("9B3D88A7-31D3-5912-8646-641A8A565CA1")]
    internal interface IDiscreteColorKeyFrame : global::Microsoft.UI.Xaml.Media.Animation.IDiscreteColorKeyFrame
    {
    }
    internal static class IDiscreteDoubleKeyFrameMethods
    {



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x55, 0xA5, 0x16, 0xEC, 0x83, 0xC0, 0x18, 0x5A, 0x80, 0x5B, 0xA1, 0x4B, 0x90, 0xBC, 0x80, 0xE2 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("EC16A555-C083-5A18-805B-A14B90BC80E2")]
    internal interface IDiscreteDoubleKeyFrame : global::Microsoft.UI.Xaml.Media.Animation.IDiscreteDoubleKeyFrame
    {
    }
    internal static class IDiscreteObjectKeyFrameMethods
    {



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x13, 0xA8, 0x2F, 0x54, 0x92, 0x68, 0x9D, 0x55, 0x9F, 0x69, 0x1F, 0x2A, 0xC6, 0x66, 0xAF, 0x13 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("542FA813-6892-559D-9F69-1F2AC666AF13")]
    internal interface IDiscreteObjectKeyFrame : global::Microsoft.UI.Xaml.Media.Animation.IDiscreteObjectKeyFrame
    {
    }
    internal static class IDiscretePointKeyFrameMethods
    {



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x91, 0xA2, 0x55, 0x22, 0x7E, 0x0, 0xCE, 0x57, 0xAA, 0x53, 0x97, 0xD1, 0xE4, 0xA0, 0xD7, 0xE2 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("2255A291-007E-57CE-AA53-97D1E4A0D7E2")]
    internal interface IDiscretePointKeyFrame : global::Microsoft.UI.Xaml.Media.Animation.IDiscretePointKeyFrame
    {
    }
    internal static class IDoubleAnimationMethods
    {

        internal static unsafe global::System.Nullable<double> get_By(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[10](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInterface<global::System.Nullable<double>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Nullable<double>>.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_By(IObjectReference _obj, global::System.Nullable<double> value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = MarshalInterface<global::System.Nullable<double>>.CreateMarshaler2(value, global::ABI.System.Nullable<double>.PIID);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[11](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.Media.Animation.EasingFunctionBase get_EasingFunction(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[12](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Media.Animation.EasingFunctionBase.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Media.Animation.EasingFunctionBase.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_EasingFunction(IObjectReference _obj, global::Microsoft.UI.Xaml.Media.Animation.EasingFunctionBase value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.Media.Animation.EasingFunctionBase.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[13](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe bool get_EnableDependentAnimation(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[14](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_EnableDependentAnimation(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[15](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::System.Nullable<double> get_From(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInterface<global::System.Nullable<double>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Nullable<double>>.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_From(IObjectReference _obj, global::System.Nullable<double> value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = MarshalInterface<global::System.Nullable<double>>.CreateMarshaler2(value, global::ABI.System.Nullable<double>.PIID);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[7](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::System.Nullable<double> get_To(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInterface<global::System.Nullable<double>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Nullable<double>>.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_To(IObjectReference _obj, global::System.Nullable<double> value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = MarshalInterface<global::System.Nullable<double>>.CreateMarshaler2(value, global::ABI.System.Nullable<double>.PIID);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[9](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x7E, 0xC9, 0x1E, 0x65, 0x83, 0xE4, 0x85, 0x59, 0xAA, 0xB, 0x49, 0xCF, 0xB0, 0x74, 0x32, 0xDD };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("651EC97E-E483-5985-AA0B-49CFB07432DD")]
    internal interface IDoubleAnimation : global::Microsoft.UI.Xaml.Media.Animation.IDoubleAnimation
    {
    }
    internal static class IDoubleAnimationStaticsMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_ByProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_EasingFunctionProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[9](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_EnableDependentAnimationProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[10](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_FromProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_ToProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x87, 0x83, 0x9, 0x4E, 0xC6, 0xAD, 0x49, 0x55, 0xAD, 0x21, 0x63, 0x3E, 0x4F, 0xA2, 0x44, 0xC2 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("4E098387-ADC6-5549-AD21-633E4FA244C2")]
    internal interface IDoubleAnimationStatics : global::Microsoft.UI.Xaml.Media.Animation.IDoubleAnimationStatics
    {
    }
    internal static class IDoubleAnimationUsingKeyFramesMethods
    {

        internal static unsafe bool get_EnableDependentAnimation(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[7](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_EnableDependentAnimation(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[8](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.UI.Xaml.Media.Animation.DoubleKeyFrameCollection get_KeyFrames(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Media.Animation.DoubleKeyFrameCollection.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Media.Animation.DoubleKeyFrameCollection.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xD5, 0x37, 0x54, 0x81, 0xCF, 0x63, 0xA5, 0x54, 0xAE, 0xA5, 0x24, 0xB8, 0x47, 0x8, 0xD1, 0x2D };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("815437D5-63CF-54A5-AEA5-24B84708D12D")]
    internal interface IDoubleAnimationUsingKeyFrames : global::Microsoft.UI.Xaml.Media.Animation.IDoubleAnimationUsingKeyFrames
    {
    }
    internal static class IDoubleAnimationUsingKeyFramesStaticsMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_EnableDependentAnimationProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xF1, 0x9B, 0x1C, 0x4C, 0x3, 0x3A, 0x89, 0x56, 0xB1, 0x8F, 0x6C, 0x44, 0x25, 0x1E, 0x13, 0xD9 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("4C1C9BF1-3A03-5689-B18F-6C44251E13D9")]
    internal interface IDoubleAnimationUsingKeyFramesStatics : global::Microsoft.UI.Xaml.Media.Animation.IDoubleAnimationUsingKeyFramesStatics
    {
    }
    internal static class IDoubleKeyFrameMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.Media.Animation.KeyTime get_KeyTime(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Xaml.Media.Animation.KeyTime __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Media.Animation.KeyTime*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_KeyTime(IObjectReference _obj, global::Microsoft.UI.Xaml.Media.Animation.KeyTime value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Media.Animation.KeyTime, int>**)ThisPtr)[9](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe double get_Value(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_Value(IObjectReference _obj, double value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, int>**)ThisPtr)[7](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xE6, 0x2A, 0xC8, 0x94, 0x62, 0xCA, 0x52, 0x5F, 0x93, 0x4C, 0x3E, 0x42, 0x7E, 0x75, 0xD6, 0x9A };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("94C82AE6-CA62-5F52-934C-3E427E75D69A")]
    internal interface IDoubleKeyFrame : global::Microsoft.UI.Xaml.Media.Animation.IDoubleKeyFrame
    {
    }
    internal static class IDoubleKeyFrameFactoryMethods
    {


        internal static unsafe global::Microsoft.UI.Xaml.Media.Animation.DoubleKeyFrame CreateInstance(IObjectReference _obj, object baseInterface, out object innerInterface)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __baseInterface = default;
            IntPtr __innerInterface = default;
            IntPtr __retval = default;
            try
            {
                __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                global::System.GC.KeepAlive(_obj);
                innerInterface = MarshalInspectable<object>.FromAbi(__innerInterface);
                return global::ABI.Microsoft.UI.Xaml.Media.Animation.DoubleKeyFrame.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                MarshalInspectable<object>.DisposeAbi(__innerInterface);
                global::ABI.Microsoft.UI.Xaml.Media.Animation.DoubleKeyFrame.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xB3, 0x2C, 0x49, 0x2D, 0x88, 0xF4, 0x30, 0x5D, 0xB0, 0xC, 0xB6, 0xF2, 0x54, 0x7D, 0xE, 0xFE };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("2D492CB3-F488-5D30-B00C-B6F2547D0EFE")]
    internal interface IDoubleKeyFrameFactory : global::Microsoft.UI.Xaml.Media.Animation.IDoubleKeyFrameFactory
    {
    }
    internal static class IDoubleKeyFrameStaticsMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_KeyTimeProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_ValueProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x4C, 0x91, 0x56, 0xE, 0x30, 0xB4, 0x8F, 0x53, 0xBB, 0x66, 0xB, 0x8E, 0x83, 0xAB, 0x3D, 0xB6 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("0E56914C-B430-538F-BB66-0B8E83AB3DB6")]
    internal interface IDoubleKeyFrameStatics : global::Microsoft.UI.Xaml.Media.Animation.IDoubleKeyFrameStatics
    {
    }
    internal static class IDragItemThemeAnimationMethods
    {

        internal static unsafe string get_TargetName(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_TargetName(IObjectReference _obj, string value)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalString.Pinnable __value = new(value);
            fixed(void* ___value = __value)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[7](ThisPtr, MarshalString.GetAbi(ref __value)));
                global::System.GC.KeepAlive(_obj);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xE, 0x69, 0x8E, 0x64, 0xC0, 0xA2, 0xCA, 0x58, 0xB1, 0x5D, 0xDB, 0x6F, 0xCC, 0xC6, 0x63, 0xF2 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("648E690E-A2C0-58CA-B15D-DB6FCCC663F2")]
    internal interface IDragItemThemeAnimation : global::Microsoft.UI.Xaml.Media.Animation.IDragItemThemeAnimation
    {
    }
    internal static class IDragItemThemeAnimationStaticsMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_TargetNameProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x1A, 0xB4, 0xBD, 0xCD, 0x84, 0xCE, 0xA1, 0x50, 0x8B, 0x96, 0x96, 0x59, 0x9C, 0xD9, 0x61, 0x9D };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("CDBDB41A-CE84-50A1-8B96-96599CD9619D")]
    internal interface IDragItemThemeAnimationStatics : global::Microsoft.UI.Xaml.Media.Animation.IDragItemThemeAnimationStatics
    {
    }
    internal static class IDragOverThemeAnimationMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.AnimationDirection get_Direction(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Xaml.Controls.Primitives.AnimationDirection __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Controls.Primitives.AnimationDirection*, int>**)ThisPtr)[10](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_Direction(IObjectReference _obj, global::Microsoft.UI.Xaml.Controls.Primitives.AnimationDirection value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Controls.Primitives.AnimationDirection, int>**)ThisPtr)[11](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe string get_TargetName(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_TargetName(IObjectReference _obj, string value)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalString.Pinnable __value = new(value);
            fixed(void* ___value = __value)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[7](ThisPtr, MarshalString.GetAbi(ref __value)));
                global::System.GC.KeepAlive(_obj);
            }
        }

        internal static unsafe double get_ToOffset(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_ToOffset(IObjectReference _obj, double value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, int>**)ThisPtr)[9](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xC0, 0xD3, 0x3C, 0x63, 0xAF, 0x71, 0xFD, 0x52, 0x99, 0x3E, 0x50, 0x4E, 0x3E, 0x6F, 0x56, 0xD4 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("633CD3C0-71AF-52FD-993E-504E3E6F56D4")]
    internal interface IDragOverThemeAnimation : global::Microsoft.UI.Xaml.Media.Animation.IDragOverThemeAnimation
    {
    }
    internal static class IDragOverThemeAnimationStaticsMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_DirectionProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_TargetNameProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_ToOffsetProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xD2, 0xAF, 0x1, 0x83, 0xB2, 0x68, 0x6C, 0x5C, 0xAA, 0xDF, 0x9A, 0x98, 0xD6, 0x20, 0xE8, 0xD2 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("8301AFD2-68B2-5C6C-AADF-9A98D620E8D2")]
    internal interface IDragOverThemeAnimationStatics : global::Microsoft.UI.Xaml.Media.Animation.IDragOverThemeAnimationStatics
    {
    }
    internal static class IDrillInNavigationTransitionInfoMethods
    {



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xD6, 0x63, 0x58, 0x5D, 0xBF, 0x4B, 0x30, 0x5B, 0x94, 0xFA, 0x3, 0x45, 0x31, 0xCF, 0xA2, 0xAA };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("5D5863D6-4BBF-5B30-94FA-034531CFA2AA")]
    internal interface IDrillInNavigationTransitionInfo : global::Microsoft.UI.Xaml.Media.Animation.IDrillInNavigationTransitionInfo
    {
    }
    internal static class IDrillInThemeAnimationMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.DependencyObject get_EntranceTarget(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyObject.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyObject.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_EntranceTarget(IObjectReference _obj, global::Microsoft.UI.Xaml.DependencyObject value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.DependencyObject.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[9](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe string get_EntranceTargetName(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_EntranceTargetName(IObjectReference _obj, string value)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalString.Pinnable __value = new(value);
            fixed(void* ___value = __value)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[7](ThisPtr, MarshalString.GetAbi(ref __value)));
                global::System.GC.KeepAlive(_obj);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyObject get_ExitTarget(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[12](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyObject.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyObject.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_ExitTarget(IObjectReference _obj, global::Microsoft.UI.Xaml.DependencyObject value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.DependencyObject.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[13](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe string get_ExitTargetName(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[10](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_ExitTargetName(IObjectReference _obj, string value)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalString.Pinnable __value = new(value);
            fixed(void* ___value = __value)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[11](ThisPtr, MarshalString.GetAbi(ref __value)));
                global::System.GC.KeepAlive(_obj);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xE0, 0x77, 0x75, 0x9, 0x27, 0x30, 0x24, 0x5F, 0xAF, 0x8C, 0x97, 0x6D, 0x9F, 0xAE, 0xD8, 0x30 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("097577E0-3027-5F24-AF8C-976D9FAED830")]
    internal interface IDrillInThemeAnimation : global::Microsoft.UI.Xaml.Media.Animation.IDrillInThemeAnimation
    {
    }
    internal static class IDrillInThemeAnimationStaticsMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_EntranceTargetNameProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_EntranceTargetProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_ExitTargetNameProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_ExitTargetProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[9](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x8E, 0x25, 0x24, 0xBA, 0x8E, 0x3A, 0x4, 0x58, 0x91, 0x5A, 0x76, 0x70, 0x89, 0x3D, 0xBE, 0xA4 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("BA24258E-3A8E-5804-915A-7670893DBEA4")]
    internal interface IDrillInThemeAnimationStatics : global::Microsoft.UI.Xaml.Media.Animation.IDrillInThemeAnimationStatics
    {
    }
    internal static class IDrillOutThemeAnimationMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.DependencyObject get_EntranceTarget(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyObject.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyObject.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_EntranceTarget(IObjectReference _obj, global::Microsoft.UI.Xaml.DependencyObject value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.DependencyObject.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[9](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe string get_EntranceTargetName(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_EntranceTargetName(IObjectReference _obj, string value)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalString.Pinnable __value = new(value);
            fixed(void* ___value = __value)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[7](ThisPtr, MarshalString.GetAbi(ref __value)));
                global::System.GC.KeepAlive(_obj);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyObject get_ExitTarget(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[12](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyObject.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyObject.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_ExitTarget(IObjectReference _obj, global::Microsoft.UI.Xaml.DependencyObject value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.DependencyObject.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[13](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe string get_ExitTargetName(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[10](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_ExitTargetName(IObjectReference _obj, string value)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalString.Pinnable __value = new(value);
            fixed(void* ___value = __value)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[11](ThisPtr, MarshalString.GetAbi(ref __value)));
                global::System.GC.KeepAlive(_obj);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xCC, 0xB9, 0x93, 0x9A, 0x5F, 0x92, 0x5A, 0x52, 0x9E, 0xAC, 0x55, 0xD3, 0x9D, 0xB3, 0xD3, 0x14 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("9A93B9CC-925F-525A-9EAC-55D39DB3D314")]
    internal interface IDrillOutThemeAnimation : global::Microsoft.UI.Xaml.Media.Animation.IDrillOutThemeAnimation
    {
    }
    internal static class IDrillOutThemeAnimationStaticsMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_EntranceTargetNameProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_EntranceTargetProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_ExitTargetNameProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_ExitTargetProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[9](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x3B, 0x69, 0xB9, 0x6E, 0xD0, 0xC0, 0xAE, 0x5B, 0x9C, 0xD2, 0x10, 0xD8, 0xB, 0x8D, 0x38, 0x67 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("6EB9693B-C0D0-5BAE-9CD2-10D80B8D3867")]
    internal interface IDrillOutThemeAnimationStatics : global::Microsoft.UI.Xaml.Media.Animation.IDrillOutThemeAnimationStatics
    {
    }
    internal static class IDropTargetItemThemeAnimationMethods
    {

        internal static unsafe string get_TargetName(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_TargetName(IObjectReference _obj, string value)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalString.Pinnable __value = new(value);
            fixed(void* ___value = __value)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[7](ThisPtr, MarshalString.GetAbi(ref __value)));
                global::System.GC.KeepAlive(_obj);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xC0, 0x19, 0x7F, 0xB9, 0xE2, 0xF1, 0x5, 0x57, 0xA2, 0x52, 0x2D, 0xB0, 0x5D, 0x2E, 0x5A, 0x54 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("B97F19C0-F1E2-5705-A252-2DB05D2E5A54")]
    internal interface IDropTargetItemThemeAnimation : global::Microsoft.UI.Xaml.Media.Animation.IDropTargetItemThemeAnimation
    {
    }
    internal static class IDropTargetItemThemeAnimationStaticsMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_TargetNameProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x16, 0x9E, 0xCE, 0xA0, 0x12, 0xAE, 0xFC, 0x55, 0xA9, 0xE5, 0x29, 0xDC, 0x94, 0xA7, 0x13, 0xBD };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("A0CE9E16-AE12-55FC-A9E5-29DC94A713BD")]
    internal interface IDropTargetItemThemeAnimationStatics : global::Microsoft.UI.Xaml.Media.Animation.IDropTargetItemThemeAnimationStatics
    {
    }
    internal static class IEasingColorKeyFrameMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.Media.Animation.EasingFunctionBase get_EasingFunction(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Media.Animation.EasingFunctionBase.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Media.Animation.EasingFunctionBase.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_EasingFunction(IObjectReference _obj, global::Microsoft.UI.Xaml.Media.Animation.EasingFunctionBase value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.Media.Animation.EasingFunctionBase.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[7](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x10, 0xA7, 0x37, 0xA1, 0x3C, 0xDA, 0x26, 0x54, 0xA1, 0xA2, 0x3A, 0x5A, 0x67, 0x2A, 0x42, 0x64 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("A137A710-DA3C-5426-A1A2-3A5A672A4264")]
    internal interface IEasingColorKeyFrame : global::Microsoft.UI.Xaml.Media.Animation.IEasingColorKeyFrame
    {
    }
    internal static class IEasingColorKeyFrameStaticsMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_EasingFunctionProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xC0, 0x18, 0x78, 0xC5, 0x61, 0x33, 0x7D, 0x58, 0xB3, 0x81, 0x62, 0xB, 0x69, 0x25, 0x1B, 0xCF };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("C57818C0-3361-587D-B381-620B69251BCF")]
    internal interface IEasingColorKeyFrameStatics : global::Microsoft.UI.Xaml.Media.Animation.IEasingColorKeyFrameStatics
    {
    }
    internal static class IEasingDoubleKeyFrameMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.Media.Animation.EasingFunctionBase get_EasingFunction(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Media.Animation.EasingFunctionBase.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Media.Animation.EasingFunctionBase.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_EasingFunction(IObjectReference _obj, global::Microsoft.UI.Xaml.Media.Animation.EasingFunctionBase value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.Media.Animation.EasingFunctionBase.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[7](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x7E, 0x9B, 0x5D, 0x93, 0x61, 0xDA, 0xB2, 0x5B, 0xA5, 0x74, 0x7D, 0x2E, 0x53, 0xB6, 0x5, 0x61 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("935D9B7E-DA61-5BB2-A574-7D2E53B60561")]
    internal interface IEasingDoubleKeyFrame : global::Microsoft.UI.Xaml.Media.Animation.IEasingDoubleKeyFrame
    {
    }
    internal static class IEasingDoubleKeyFrameStaticsMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_EasingFunctionProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x35, 0x87, 0xC0, 0x8C, 0x21, 0x42, 0x27, 0x51, 0xAB, 0x2F, 0x1E, 0x7E, 0x3D, 0xF9, 0x5F, 0xB9 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("8CC08735-4221-5127-AB2F-1E7E3DF95FB9")]
    internal interface IEasingDoubleKeyFrameStatics : global::Microsoft.UI.Xaml.Media.Animation.IEasingDoubleKeyFrameStatics
    {
    }
    internal static class IEasingFunctionBaseMethods
    {


        internal static unsafe double Ease(IObjectReference _obj, double normalizedTime)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, double*, int>**)ThisPtr)[8](ThisPtr, normalizedTime, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe global::Microsoft.UI.Xaml.Media.Animation.EasingMode get_EasingMode(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Xaml.Media.Animation.EasingMode __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Media.Animation.EasingMode*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_EasingMode(IObjectReference _obj, global::Microsoft.UI.Xaml.Media.Animation.EasingMode value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Media.Animation.EasingMode, int>**)ThisPtr)[7](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x9A, 0x51, 0xAB, 0x4F, 0x3D, 0xA9, 0x28, 0x5D, 0xAF, 0x18, 0x84, 0x53, 0x2B, 0xD3, 0x2E, 0xFE };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("4FAB519A-A93D-5D28-AF18-84532BD32EFE")]
    internal interface IEasingFunctionBase : global::Microsoft.UI.Xaml.Media.Animation.IEasingFunctionBase
    {
    }
    internal static class IEasingFunctionBaseFactoryMethods
    {



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x4C, 0x2F, 0xB9, 0xB1, 0xC7, 0x5E, 0xDA, 0x5C, 0xB1, 0xD4, 0xFD, 0x15, 0x95, 0x95, 0xCA, 0x47 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("B1B92F4C-5EC7-5CDA-B1D4-FD159595CA47")]
    internal interface IEasingFunctionBaseFactory : global::Microsoft.UI.Xaml.Media.Animation.IEasingFunctionBaseFactory
    {
    }
    internal static class IEasingFunctionBaseStaticsMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_EasingModeProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x45, 0x24, 0x3, 0x9, 0x7C, 0x96, 0xB8, 0x52, 0xB7, 0x12, 0x15, 0xF0, 0x66, 0xB3, 0x28, 0x21 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("09032445-967C-52B8-B712-15F066B32821")]
    internal interface IEasingFunctionBaseStatics : global::Microsoft.UI.Xaml.Media.Animation.IEasingFunctionBaseStatics
    {
    }
    internal static class IEasingPointKeyFrameMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.Media.Animation.EasingFunctionBase get_EasingFunction(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Media.Animation.EasingFunctionBase.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Media.Animation.EasingFunctionBase.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_EasingFunction(IObjectReference _obj, global::Microsoft.UI.Xaml.Media.Animation.EasingFunctionBase value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.Media.Animation.EasingFunctionBase.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[7](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x8E, 0xEE, 0x6, 0x94, 0x41, 0x36, 0xFE, 0x54, 0xA4, 0x24, 0x83, 0x42, 0xE, 0xA4, 0x5C, 0xD3 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("9406EE8E-3641-54FE-A424-83420EA45CD3")]
    internal interface IEasingPointKeyFrame : global::Microsoft.UI.Xaml.Media.Animation.IEasingPointKeyFrame
    {
    }
    internal static class IEasingPointKeyFrameStaticsMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_EasingFunctionProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x59, 0x76, 0x72, 0xAC, 0xA3, 0x92, 0xEA, 0x52, 0x89, 0x49, 0xB6, 0x9, 0xE4, 0x8C, 0x23, 0x3D };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("AC727659-92A3-52EA-8949-B609E48C233D")]
    internal interface IEasingPointKeyFrameStatics : global::Microsoft.UI.Xaml.Media.Animation.IEasingPointKeyFrameStatics
    {
    }
    internal static class IEdgeUIThemeTransitionMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.EdgeTransitionLocation get_Edge(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Xaml.Controls.Primitives.EdgeTransitionLocation __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Controls.Primitives.EdgeTransitionLocation*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_Edge(IObjectReference _obj, global::Microsoft.UI.Xaml.Controls.Primitives.EdgeTransitionLocation value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Controls.Primitives.EdgeTransitionLocation, int>**)ThisPtr)[7](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x64, 0x99, 0x8, 0x57, 0x58, 0xE3, 0xE2, 0x5F, 0x84, 0xE7, 0x15, 0xE8, 0x2B, 0xBA, 0x9C, 0x6 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("57089964-E358-5FE2-84E7-15E82BBA9C06")]
    internal interface IEdgeUIThemeTransition : global::Microsoft.UI.Xaml.Media.Animation.IEdgeUIThemeTransition
    {
    }
    internal static class IEdgeUIThemeTransitionStaticsMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_EdgeProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xD4, 0xF8, 0x6A, 0x31, 0xA0, 0xD2, 0x27, 0x5D, 0x9A, 0xF6, 0x74, 0x77, 0x97, 0x96, 0x5D, 0x46 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("316AF8D4-D2A0-5D27-9AF6-747797965D46")]
    internal interface IEdgeUIThemeTransitionStatics : global::Microsoft.UI.Xaml.Media.Animation.IEdgeUIThemeTransitionStatics
    {
    }
    internal static class IElasticEaseMethods
    {

        internal static unsafe int get_Oscillations(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            int __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_Oscillations(IObjectReference _obj, int value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int, int>**)ThisPtr)[7](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe double get_Springiness(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_Springiness(IObjectReference _obj, double value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, int>**)ThisPtr)[9](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xB, 0xD5, 0x18, 0x2B, 0x34, 0x4D, 0x9B, 0x50, 0x91, 0x5C, 0x61, 0xB1, 0xAA, 0x6F, 0x83, 0xD8 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("2B18D50B-4D34-509B-915C-61B1AA6F83D8")]
    internal interface IElasticEase : global::Microsoft.UI.Xaml.Media.Animation.IElasticEase
    {
    }
    internal static class IElasticEaseStaticsMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_OscillationsProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_SpringinessProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x90, 0x92, 0xFD, 0x95, 0x79, 0xD2, 0x57, 0x58, 0x9F, 0x50, 0x3F, 0x29, 0x9A, 0x2D, 0x2, 0xF4 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("95FD9290-D279-5857-9F50-3F299A2D02F4")]
    internal interface IElasticEaseStatics : global::Microsoft.UI.Xaml.Media.Animation.IElasticEaseStatics
    {
    }
    internal static class IEntranceNavigationTransitionInfoMethods
    {



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x21, 0x49, 0xC7, 0xDE, 0xD7, 0xE, 0xE1, 0x54, 0x8C, 0x1D, 0x30, 0xB8, 0xCC, 0xCC, 0x4B, 0x8D };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("DEC74921-0ED7-54E1-8C1D-30B8CCCC4B8D")]
    internal interface IEntranceNavigationTransitionInfo : global::Microsoft.UI.Xaml.Media.Animation.IEntranceNavigationTransitionInfo
    {
    }
    internal static class IEntranceNavigationTransitionInfoStaticsMethods
    {


        internal static unsafe bool GetIsTargetElement(IObjectReference _obj, global::Microsoft.UI.Xaml.UIElement element)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __element = default;
            byte __retval = default;
            try
            {
                __element = global::ABI.Microsoft.UI.Xaml.UIElement.CreateMarshaler2(element);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, byte*, int>**)ThisPtr)[7](ThisPtr, MarshalInspectable<object>.GetAbi(__element), &__retval));
                global::System.GC.KeepAlive(_obj);
                return __retval != 0;
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__element);
            }
        }

        internal static unsafe void SetIsTargetElement(IObjectReference _obj, global::Microsoft.UI.Xaml.UIElement element, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __element = default;
            try
            {
                __element = global::ABI.Microsoft.UI.Xaml.UIElement.CreateMarshaler2(element);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, byte, int>**)ThisPtr)[8](ThisPtr, MarshalInspectable<object>.GetAbi(__element), (byte)(value ? 1 : 0)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__element);
            }
        }
        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_IsTargetElementProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xE1, 0x6D, 0x9, 0xF1, 0x79, 0x1F, 0x38, 0x5D, 0xA4, 0xD6, 0x16, 0xF3, 0xBD, 0xAA, 0xB7, 0xF0 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("F1096DE1-1F79-5D38-A4D6-16F3BDAAB7F0")]
    internal interface IEntranceNavigationTransitionInfoStatics : global::Microsoft.UI.Xaml.Media.Animation.IEntranceNavigationTransitionInfoStatics
    {
    }
    internal static class IEntranceThemeTransitionMethods
    {

        internal static unsafe double get_FromHorizontalOffset(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_FromHorizontalOffset(IObjectReference _obj, double value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, int>**)ThisPtr)[7](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe double get_FromVerticalOffset(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_FromVerticalOffset(IObjectReference _obj, double value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, int>**)ThisPtr)[9](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe bool get_IsStaggeringEnabled(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[10](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_IsStaggeringEnabled(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[11](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xFA, 0x81, 0xB6, 0x8E, 0x29, 0x16, 0x29, 0x5E, 0xAC, 0x1E, 0x70, 0xF3, 0x63, 0x93, 0x29, 0xF8 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("8EB681FA-1629-5E29-AC1E-70F3639329F8")]
    internal interface IEntranceThemeTransition : global::Microsoft.UI.Xaml.Media.Animation.IEntranceThemeTransition
    {
    }
    internal static class IEntranceThemeTransitionStaticsMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_FromHorizontalOffsetProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_FromVerticalOffsetProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_IsStaggeringEnabledProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x35, 0x54, 0x9E, 0xC9, 0xCC, 0xFA, 0xAF, 0x50, 0xB9, 0x6C, 0x63, 0xB1, 0x4F, 0xE7, 0x15, 0x6E };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("C99E5435-FACC-50AF-B96C-63B14FE7156E")]
    internal interface IEntranceThemeTransitionStatics : global::Microsoft.UI.Xaml.Media.Animation.IEntranceThemeTransitionStatics
    {
    }
    internal static class IExponentialEaseMethods
    {

        internal static unsafe double get_Exponent(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_Exponent(IObjectReference _obj, double value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, int>**)ThisPtr)[7](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x62, 0x92, 0x28, 0x4D, 0x32, 0xE8, 0xBC, 0x5F, 0xA9, 0x8B, 0x87, 0xA6, 0xEC, 0xB3, 0xB6, 0xCC };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("4D289262-E832-5FBC-A98B-87A6ECB3B6CC")]
    internal interface IExponentialEase : global::Microsoft.UI.Xaml.Media.Animation.IExponentialEase
    {
    }
    internal static class IExponentialEaseStaticsMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_ExponentProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x8F, 0xAB, 0x94, 0x83, 0xF1, 0xDD, 0xD0, 0x55, 0xAC, 0xF1, 0x7, 0xFE, 0xDD, 0x92, 0x9B, 0xB5 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("8394AB8F-DDF1-55D0-ACF1-07FEDD929BB5")]
    internal interface IExponentialEaseStatics : global::Microsoft.UI.Xaml.Media.Animation.IExponentialEaseStatics
    {
    }
    internal static class IFadeInThemeAnimationMethods
    {

        internal static unsafe string get_TargetName(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_TargetName(IObjectReference _obj, string value)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalString.Pinnable __value = new(value);
            fixed(void* ___value = __value)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[7](ThisPtr, MarshalString.GetAbi(ref __value)));
                global::System.GC.KeepAlive(_obj);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x4A, 0x7, 0xCA, 0xD, 0xCC, 0x31, 0x70, 0x5E, 0x8B, 0x6B, 0x8D, 0xBD, 0x7F, 0xFF, 0x1, 0xF6 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("0DCA074A-31CC-5E70-8B6B-8DBD7FFF01F6")]
    internal interface IFadeInThemeAnimation : global::Microsoft.UI.Xaml.Media.Animation.IFadeInThemeAnimation
    {
    }
    internal static class IFadeInThemeAnimationStaticsMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_TargetNameProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xA6, 0xA6, 0x74, 0x5D, 0xC6, 0x92, 0x49, 0x5E, 0x86, 0x5F, 0x67, 0x60, 0x87, 0x24, 0x71, 0x79 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("5D74A6A6-92C6-5E49-865F-676087247179")]
    internal interface IFadeInThemeAnimationStatics : global::Microsoft.UI.Xaml.Media.Animation.IFadeInThemeAnimationStatics
    {
    }
    internal static class IFadeOutThemeAnimationMethods
    {

        internal static unsafe string get_TargetName(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_TargetName(IObjectReference _obj, string value)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalString.Pinnable __value = new(value);
            fixed(void* ___value = __value)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[7](ThisPtr, MarshalString.GetAbi(ref __value)));
                global::System.GC.KeepAlive(_obj);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xD6, 0x24, 0x40, 0x11, 0x67, 0x5D, 0x9C, 0x5C, 0x83, 0xC5, 0x54, 0xA8, 0xBD, 0x7B, 0x67, 0x1A };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("114024D6-5D67-5C9C-83C5-54A8BD7B671A")]
    internal interface IFadeOutThemeAnimation : global::Microsoft.UI.Xaml.Media.Animation.IFadeOutThemeAnimation
    {
    }
    internal static class IFadeOutThemeAnimationStaticsMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_TargetNameProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xA1, 0xBE, 0x77, 0x2, 0xA5, 0xA0, 0x26, 0x5E, 0x9B, 0x56, 0x6A, 0x42, 0x8, 0x86, 0x27, 0x38 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("0277BEA1-A0A5-5E26-9B56-6A4208862738")]
    internal interface IFadeOutThemeAnimationStatics : global::Microsoft.UI.Xaml.Media.Animation.IFadeOutThemeAnimationStatics
    {
    }
    internal static class IGravityConnectedAnimationConfigurationMethods
    {

        internal static unsafe bool get_IsShadowEnabled(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_IsShadowEnabled(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[7](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x76, 0xB2, 0xC8, 0x4, 0xF3, 0xCF, 0x55, 0x5A, 0x92, 0x29, 0x33, 0xDC, 0x66, 0xC9, 0x9E, 0x20 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("04C8B276-CFF3-5A55-9229-33DC66C99E20")]
    internal interface IGravityConnectedAnimationConfiguration : global::Microsoft.UI.Xaml.Media.Animation.IGravityConnectedAnimationConfiguration
    {
    }
    internal static class IGravityConnectedAnimationConfigurationFactoryMethods
    {


        internal static unsafe global::Microsoft.UI.Xaml.Media.Animation.GravityConnectedAnimationConfiguration CreateInstance(IObjectReference _obj, object baseInterface, out object innerInterface)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __baseInterface = default;
            IntPtr __innerInterface = default;
            IntPtr __retval = default;
            try
            {
                __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                global::System.GC.KeepAlive(_obj);
                innerInterface = MarshalInspectable<object>.FromAbi(__innerInterface);
                return global::ABI.Microsoft.UI.Xaml.Media.Animation.GravityConnectedAnimationConfiguration.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                MarshalInspectable<object>.DisposeAbi(__innerInterface);
                global::ABI.Microsoft.UI.Xaml.Media.Animation.GravityConnectedAnimationConfiguration.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xB5, 0x71, 0x7A, 0xBC, 0xDA, 0x7C, 0xB7, 0x5B, 0x96, 0x7E, 0xD6, 0xA0, 0x31, 0x28, 0x5A, 0x9C };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("BC7A71B5-7CDA-5BB7-967E-D6A031285A9C")]
    internal interface IGravityConnectedAnimationConfigurationFactory : global::Microsoft.UI.Xaml.Media.Animation.IGravityConnectedAnimationConfigurationFactory
    {
    }
    internal static class IKeySplineMethods
    {

        internal static unsafe global::Windows.Foundation.Point get_ControlPoint1(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.Foundation.Point __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Foundation.Point*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_ControlPoint1(IObjectReference _obj, global::Windows.Foundation.Point value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Foundation.Point, int>**)ThisPtr)[7](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Windows.Foundation.Point get_ControlPoint2(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.Foundation.Point __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Foundation.Point*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_ControlPoint2(IObjectReference _obj, global::Windows.Foundation.Point value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Foundation.Point, int>**)ThisPtr)[9](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x2B, 0x8B, 0xD, 0x13, 0x52, 0xB, 0x53, 0x52, 0x88, 0x1B, 0x36, 0xAB, 0x48, 0x59, 0x2E, 0x6B };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("130D8B2B-0B52-5253-881B-36AB48592E6B")]
    internal interface IKeySpline : global::Microsoft.UI.Xaml.Media.Animation.IKeySpline
    {
    }
    internal static class ILinearColorKeyFrameMethods
    {



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xD6, 0x4C, 0xCE, 0xB, 0x80, 0x3A, 0x2F, 0x5F, 0x93, 0x2E, 0x61, 0x9A, 0x85, 0x46, 0xD0, 0xBD };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("0BCE4CD6-3A80-5F2F-932E-619A8546D0BD")]
    internal interface ILinearColorKeyFrame : global::Microsoft.UI.Xaml.Media.Animation.ILinearColorKeyFrame
    {
    }
    internal static class ILinearDoubleKeyFrameMethods
    {



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xB9, 0x35, 0xA6, 0x38, 0x13, 0xF6, 0xE0, 0x55, 0xAA, 0xEC, 0x9D, 0x4E, 0x9, 0x7E, 0xFF, 0x91 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("38A635B9-F613-55E0-AAEC-9D4E097EFF91")]
    internal interface ILinearDoubleKeyFrame : global::Microsoft.UI.Xaml.Media.Animation.ILinearDoubleKeyFrame
    {
    }
    internal static class ILinearPointKeyFrameMethods
    {



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x93, 0x24, 0xC2, 0x4E, 0xCB, 0xBA, 0x5, 0x51, 0xAC, 0x16, 0x8E, 0xA5, 0x41, 0x8A, 0xB7, 0x6E };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("4EC22493-BACB-5105-AC16-8EA5418AB76E")]
    internal interface ILinearPointKeyFrame : global::Microsoft.UI.Xaml.Media.Animation.ILinearPointKeyFrame
    {
    }
    internal static class INavigationThemeTransitionMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.Media.Animation.NavigationTransitionInfo get_DefaultNavigationTransitionInfo(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Media.Animation.NavigationTransitionInfo.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Media.Animation.NavigationTransitionInfo.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_DefaultNavigationTransitionInfo(IObjectReference _obj, global::Microsoft.UI.Xaml.Media.Animation.NavigationTransitionInfo value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.Media.Animation.NavigationTransitionInfo.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[7](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x3B, 0xBD, 0xCF, 0xD7, 0x27, 0xD, 0xA1, 0x5E, 0xBE, 0xB7, 0xF6, 0xB8, 0x47, 0x52, 0xD, 0xC6 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("D7CFBD3B-0D27-5EA1-BEB7-F6B847520DC6")]
    internal interface INavigationThemeTransition : global::Microsoft.UI.Xaml.Media.Animation.INavigationThemeTransition
    {
    }
    internal static class INavigationThemeTransitionStaticsMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_DefaultNavigationTransitionInfoProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xFF, 0x3E, 0x32, 0x78, 0x43, 0xD5, 0x1D, 0x55, 0xB2, 0xC7, 0x94, 0xE9, 0x3A, 0x16, 0x6, 0x5B };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("78323EFF-D543-551D-B2C7-94E93A16065B")]
    internal interface INavigationThemeTransitionStatics : global::Microsoft.UI.Xaml.Media.Animation.INavigationThemeTransitionStatics
    {
    }
    internal static class INavigationTransitionInfoMethods
    {



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xFB, 0x17, 0xBB, 0x25, 0x15, 0x6E, 0x4E, 0x51, 0xB2, 0x78, 0x19, 0x75, 0x37, 0xA4, 0xD9, 0x90 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("25BB17FB-6E15-514E-B278-197537A4D990")]
    internal interface INavigationTransitionInfo : global::Microsoft.UI.Xaml.Media.Animation.INavigationTransitionInfo
    {
    }
    internal static class INavigationTransitionInfoFactoryMethods
    {


        internal static unsafe global::Microsoft.UI.Xaml.Media.Animation.NavigationTransitionInfo CreateInstance(IObjectReference _obj, object baseInterface, out object innerInterface)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __baseInterface = default;
            IntPtr __innerInterface = default;
            IntPtr __retval = default;
            try
            {
                __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                global::System.GC.KeepAlive(_obj);
                innerInterface = MarshalInspectable<object>.FromAbi(__innerInterface);
                return global::ABI.Microsoft.UI.Xaml.Media.Animation.NavigationTransitionInfo.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                MarshalInspectable<object>.DisposeAbi(__innerInterface);
                global::ABI.Microsoft.UI.Xaml.Media.Animation.NavigationTransitionInfo.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xFF, 0xB6, 0x14, 0xC5, 0xED, 0xF6, 0x2E, 0x57, 0x83, 0x92, 0x3E, 0xA1, 0x7B, 0xC7, 0xD4, 0xC4 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("C514B6FF-F6ED-572E-8392-3EA17BC7D4C4")]
    internal interface INavigationTransitionInfoFactory : global::Microsoft.UI.Xaml.Media.Animation.INavigationTransitionInfoFactory
    {
    }
    public static class INavigationTransitionInfoOverridesMethods
    {


        internal static unsafe string GetNavigationStateCore(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }

        internal static unsafe void SetNavigationStateCore(IObjectReference _obj, string navigationState)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalString.Pinnable __navigationState = new(navigationState);
            fixed(void* ___navigationState = __navigationState)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[7](ThisPtr, MarshalString.GetAbi(ref __navigationState)));
                global::System.GC.KeepAlive(_obj);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x90, 0xF1, 0x6A, 0x3D, 0x56, 0x5A, 0x3D, 0x51, 0xAF, 0xF9, 0x63, 0x19, 0x25, 0xD0, 0xFA, 0x43 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

        public static global::System.IntPtr AbiToProjectionVftablePtr => INavigationTransitionInfoOverrides.AbiToProjectionVftablePtr;

    }

    [Guid("3D6AF190-5A56-513D-AFF9-631925D0FA43")]
    internal unsafe interface INavigationTransitionInfoOverrides : global::Microsoft.UI.Xaml.Media.Animation.INavigationTransitionInfoOverrides
    {

        public static readonly IntPtr AbiToProjectionVftablePtr;
        static unsafe INavigationTransitionInfoOverrides()
        {
            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(INavigationTransitionInfoOverrides), sizeof(IInspectable.Vftbl) + sizeof(IntPtr) * 2);
            *(IInspectable.Vftbl*)AbiToProjectionVftablePtr = IInspectable.Vftbl.AbiToProjectionVftable;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>*)AbiToProjectionVftablePtr)[6] = &Do_Abi_GetNavigationStateCore_0;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>*)AbiToProjectionVftablePtr)[7] = &Do_Abi_SetNavigationStateCore_1;
        }

        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_GetNavigationStateCore_0(IntPtr thisPtr, IntPtr* result)
        {

            string __result = default;

            *result = default;

            try
            {
                __result = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Media.Animation.INavigationTransitionInfoOverrides>(thisPtr).GetNavigationStateCore();
                *result = MarshalString.FromManaged(__result);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_SetNavigationStateCore_1(IntPtr thisPtr, IntPtr navigationState)
        {



            try
            {
                global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Media.Animation.INavigationTransitionInfoOverrides>(thisPtr).SetNavigationStateCore(MarshalString.FromAbi(navigationState));

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
    }

    internal static class IObjectAnimationUsingKeyFramesMethods
    {

        internal static unsafe bool get_EnableDependentAnimation(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[7](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_EnableDependentAnimation(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[8](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.UI.Xaml.Media.Animation.ObjectKeyFrameCollection get_KeyFrames(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Media.Animation.ObjectKeyFrameCollection.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Media.Animation.ObjectKeyFrameCollection.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x4C, 0xDC, 0x8, 0xAA, 0x3, 0xB, 0xA, 0x5C, 0xB0, 0x84, 0xD9, 0x5D, 0x27, 0x2B, 0x2F, 0xD };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("AA08DC4C-0B03-5C0A-B084-D95D272B2F0D")]
    internal interface IObjectAnimationUsingKeyFrames : global::Microsoft.UI.Xaml.Media.Animation.IObjectAnimationUsingKeyFrames
    {
    }
    internal static class IObjectAnimationUsingKeyFramesStaticsMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_EnableDependentAnimationProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xB0, 0x9, 0x1A, 0x41, 0xB4, 0x9A, 0xB9, 0x54, 0x99, 0xB9, 0x54, 0xF9, 0x55, 0xA6, 0x75, 0x4E };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("411A09B0-9AB4-54B9-99B9-54F955A6754E")]
    internal interface IObjectAnimationUsingKeyFramesStatics : global::Microsoft.UI.Xaml.Media.Animation.IObjectAnimationUsingKeyFramesStatics
    {
    }
    internal static class IObjectKeyFrameMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.Media.Animation.KeyTime get_KeyTime(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Xaml.Media.Animation.KeyTime __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Media.Animation.KeyTime*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_KeyTime(IObjectReference _obj, global::Microsoft.UI.Xaml.Media.Animation.KeyTime value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Media.Animation.KeyTime, int>**)ThisPtr)[9](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe object get_Value(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInspectable<object>.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_Value(IObjectReference _obj, object value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = MarshalInspectable<object>.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[7](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x5B, 0xF6, 0xA9, 0xC5, 0x69, 0xFC, 0x88, 0x5A, 0xA7, 0x97, 0x34, 0xF4, 0x6D, 0x76, 0x13, 0x81 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("C5A9F65B-FC69-5A88-A797-34F46D761381")]
    internal interface IObjectKeyFrame : global::Microsoft.UI.Xaml.Media.Animation.IObjectKeyFrame
    {
    }
    internal static class IObjectKeyFrameFactoryMethods
    {


        internal static unsafe global::Microsoft.UI.Xaml.Media.Animation.ObjectKeyFrame CreateInstance(IObjectReference _obj, object baseInterface, out object innerInterface)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __baseInterface = default;
            IntPtr __innerInterface = default;
            IntPtr __retval = default;
            try
            {
                __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                global::System.GC.KeepAlive(_obj);
                innerInterface = MarshalInspectable<object>.FromAbi(__innerInterface);
                return global::ABI.Microsoft.UI.Xaml.Media.Animation.ObjectKeyFrame.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                MarshalInspectable<object>.DisposeAbi(__innerInterface);
                global::ABI.Microsoft.UI.Xaml.Media.Animation.ObjectKeyFrame.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x6E, 0xDA, 0x59, 0xDC, 0xB9, 0x82, 0xF7, 0x55, 0xA3, 0x58, 0xBA, 0x2A, 0x7, 0x66, 0x5A, 0xA9 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("DC59DA6E-82B9-55F7-A358-BA2A07665AA9")]
    internal interface IObjectKeyFrameFactory : global::Microsoft.UI.Xaml.Media.Animation.IObjectKeyFrameFactory
    {
    }
    internal static class IObjectKeyFrameStaticsMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_KeyTimeProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_ValueProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xEB, 0x9C, 0xE5, 0x39, 0x59, 0x28, 0x5F, 0x5A, 0xAC, 0xD8, 0xBC, 0x49, 0x1D, 0x49, 0xC4, 0xB6 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("39E59CEB-2859-5A5F-ACD8-BC491D49C4B6")]
    internal interface IObjectKeyFrameStatics : global::Microsoft.UI.Xaml.Media.Animation.IObjectKeyFrameStatics
    {
    }
    internal static class IPaneThemeTransitionMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.EdgeTransitionLocation get_Edge(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Xaml.Controls.Primitives.EdgeTransitionLocation __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Controls.Primitives.EdgeTransitionLocation*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_Edge(IObjectReference _obj, global::Microsoft.UI.Xaml.Controls.Primitives.EdgeTransitionLocation value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Controls.Primitives.EdgeTransitionLocation, int>**)ThisPtr)[7](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x80, 0xCD, 0x1B, 0x32, 0x7C, 0x15, 0x10, 0x5E, 0xB0, 0xFE, 0x64, 0x40, 0xBD, 0x92, 0x52, 0x9A };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("321BCD80-157C-5E10-B0FE-6440BD92529A")]
    internal interface IPaneThemeTransition : global::Microsoft.UI.Xaml.Media.Animation.IPaneThemeTransition
    {
    }
    internal static class IPaneThemeTransitionStaticsMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_EdgeProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x52, 0x17, 0xE0, 0x47, 0x64, 0x52, 0xB1, 0x5F, 0x89, 0x46, 0xAB, 0x49, 0xFE, 0x6A, 0xF8, 0xFD };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("47E01752-5264-5FB1-8946-AB49FE6AF8FD")]
    internal interface IPaneThemeTransitionStatics : global::Microsoft.UI.Xaml.Media.Animation.IPaneThemeTransitionStatics
    {
    }
    internal static class IPointAnimationMethods
    {

        internal static unsafe global::System.Nullable<global::Windows.Foundation.Point> get_By(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[10](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInterface<global::System.Nullable<global::Windows.Foundation.Point>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Nullable<global::Windows.Foundation.Point>>.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_By(IObjectReference _obj, global::System.Nullable<global::Windows.Foundation.Point> value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = MarshalInterface<global::System.Nullable<global::Windows.Foundation.Point>>.CreateMarshaler2(value, global::ABI.System.Nullable<global::Windows.Foundation.Point>.PIID);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[11](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.Media.Animation.EasingFunctionBase get_EasingFunction(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[12](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Media.Animation.EasingFunctionBase.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Media.Animation.EasingFunctionBase.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_EasingFunction(IObjectReference _obj, global::Microsoft.UI.Xaml.Media.Animation.EasingFunctionBase value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.Media.Animation.EasingFunctionBase.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[13](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe bool get_EnableDependentAnimation(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[14](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_EnableDependentAnimation(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[15](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::System.Nullable<global::Windows.Foundation.Point> get_From(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInterface<global::System.Nullable<global::Windows.Foundation.Point>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Nullable<global::Windows.Foundation.Point>>.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_From(IObjectReference _obj, global::System.Nullable<global::Windows.Foundation.Point> value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = MarshalInterface<global::System.Nullable<global::Windows.Foundation.Point>>.CreateMarshaler2(value, global::ABI.System.Nullable<global::Windows.Foundation.Point>.PIID);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[7](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::System.Nullable<global::Windows.Foundation.Point> get_To(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInterface<global::System.Nullable<global::Windows.Foundation.Point>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Nullable<global::Windows.Foundation.Point>>.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_To(IObjectReference _obj, global::System.Nullable<global::Windows.Foundation.Point> value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = MarshalInterface<global::System.Nullable<global::Windows.Foundation.Point>>.CreateMarshaler2(value, global::ABI.System.Nullable<global::Windows.Foundation.Point>.PIID);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[9](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xC4, 0x7C, 0x73, 0xA0, 0xAB, 0x2E, 0x13, 0x5C, 0xA5, 0xD7, 0x78, 0x36, 0x1D, 0xF1, 0x0, 0xE };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("A0737CC4-2EAB-5C13-A5D7-78361DF1000E")]
    internal interface IPointAnimation : global::Microsoft.UI.Xaml.Media.Animation.IPointAnimation
    {
    }
    internal static class IPointAnimationStaticsMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_ByProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_EasingFunctionProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[9](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_EnableDependentAnimationProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[10](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_FromProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_ToProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x3B, 0xB4, 0xCF, 0x71, 0xDA, 0xBA, 0x4B, 0x55, 0x8F, 0xCA, 0xB5, 0x58, 0xD6, 0x23, 0xBB, 0xC0 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("71CFB43B-BADA-554B-8FCA-B558D623BBC0")]
    internal interface IPointAnimationStatics : global::Microsoft.UI.Xaml.Media.Animation.IPointAnimationStatics
    {
    }
    internal static class IPointAnimationUsingKeyFramesMethods
    {

        internal static unsafe bool get_EnableDependentAnimation(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[7](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_EnableDependentAnimation(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[8](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.UI.Xaml.Media.Animation.PointKeyFrameCollection get_KeyFrames(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Media.Animation.PointKeyFrameCollection.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Media.Animation.PointKeyFrameCollection.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x92, 0x39, 0xD6, 0xBD, 0x13, 0xDF, 0x14, 0x55, 0x86, 0x11, 0x49, 0x52, 0xF7, 0x22, 0xF6, 0xD0 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("BDD63992-DF13-5514-8611-4952F722F6D0")]
    internal interface IPointAnimationUsingKeyFrames : global::Microsoft.UI.Xaml.Media.Animation.IPointAnimationUsingKeyFrames
    {
    }
    internal static class IPointAnimationUsingKeyFramesStaticsMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_EnableDependentAnimationProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x3B, 0x2B, 0x15, 0x4, 0xDA, 0xF0, 0x28, 0x5B, 0x87, 0x7D, 0x9A, 0xC9, 0x6D, 0x33, 0x4A, 0x77 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("04152B3B-F0DA-5B28-877D-9AC96D334A77")]
    internal interface IPointAnimationUsingKeyFramesStatics : global::Microsoft.UI.Xaml.Media.Animation.IPointAnimationUsingKeyFramesStatics
    {
    }
    internal static class IPointKeyFrameMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.Media.Animation.KeyTime get_KeyTime(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Xaml.Media.Animation.KeyTime __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Media.Animation.KeyTime*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_KeyTime(IObjectReference _obj, global::Microsoft.UI.Xaml.Media.Animation.KeyTime value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Media.Animation.KeyTime, int>**)ThisPtr)[9](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Windows.Foundation.Point get_Value(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.Foundation.Point __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Foundation.Point*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_Value(IObjectReference _obj, global::Windows.Foundation.Point value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Foundation.Point, int>**)ThisPtr)[7](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x7D, 0xC0, 0xD5, 0x59, 0xA7, 0xA3, 0x50, 0x54, 0x9D, 0xFB, 0x4B, 0x7E, 0x77, 0xD5, 0x8F, 0x93 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("59D5C07D-A3A7-5450-9DFB-4B7E77D58F93")]
    internal interface IPointKeyFrame : global::Microsoft.UI.Xaml.Media.Animation.IPointKeyFrame
    {
    }
    internal static class IPointKeyFrameFactoryMethods
    {


        internal static unsafe global::Microsoft.UI.Xaml.Media.Animation.PointKeyFrame CreateInstance(IObjectReference _obj, object baseInterface, out object innerInterface)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __baseInterface = default;
            IntPtr __innerInterface = default;
            IntPtr __retval = default;
            try
            {
                __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                global::System.GC.KeepAlive(_obj);
                innerInterface = MarshalInspectable<object>.FromAbi(__innerInterface);
                return global::ABI.Microsoft.UI.Xaml.Media.Animation.PointKeyFrame.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                MarshalInspectable<object>.DisposeAbi(__innerInterface);
                global::ABI.Microsoft.UI.Xaml.Media.Animation.PointKeyFrame.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x93, 0xE2, 0x2E, 0xC5, 0xE, 0xF1, 0x52, 0x52, 0xBC, 0x8, 0xA2, 0x86, 0x59, 0x74, 0xF, 0xE };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("C52EE293-F10E-5252-BC08-A28659740F0E")]
    internal interface IPointKeyFrameFactory : global::Microsoft.UI.Xaml.Media.Animation.IPointKeyFrameFactory
    {
    }
    internal static class IPointKeyFrameStaticsMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_KeyTimeProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_ValueProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xFD, 0x72, 0xCD, 0x96, 0x34, 0xD8, 0x23, 0x5B, 0x9A, 0x17, 0x15, 0x48, 0x96, 0x1D, 0xC3, 0x48 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("96CD72FD-D834-5B23-9A17-1548961DC348")]
    internal interface IPointKeyFrameStatics : global::Microsoft.UI.Xaml.Media.Animation.IPointKeyFrameStatics
    {
    }
    internal static class IPointerDownThemeAnimationMethods
    {

        internal static unsafe string get_TargetName(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_TargetName(IObjectReference _obj, string value)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalString.Pinnable __value = new(value);
            fixed(void* ___value = __value)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[7](ThisPtr, MarshalString.GetAbi(ref __value)));
                global::System.GC.KeepAlive(_obj);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xCC, 0x1A, 0xDD, 0xAB, 0xDF, 0x40, 0x5D, 0x59, 0xBE, 0x68, 0x3, 0x62, 0xFE, 0x68, 0x1B, 0x91 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("ABDD1ACC-40DF-595D-BE68-0362FE681B91")]
    internal interface IPointerDownThemeAnimation : global::Microsoft.UI.Xaml.Media.Animation.IPointerDownThemeAnimation
    {
    }
    internal static class IPointerDownThemeAnimationStaticsMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_TargetNameProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x39, 0x8B, 0x26, 0x12, 0x7D, 0xFB, 0xDA, 0x53, 0x8C, 0xCC, 0x59, 0x67, 0xDC, 0x6, 0xBC, 0xE9 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("12268B39-FB7D-53DA-8CCC-5967DC06BCE9")]
    internal interface IPointerDownThemeAnimationStatics : global::Microsoft.UI.Xaml.Media.Animation.IPointerDownThemeAnimationStatics
    {
    }
    internal static class IPointerUpThemeAnimationMethods
    {

        internal static unsafe string get_TargetName(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_TargetName(IObjectReference _obj, string value)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalString.Pinnable __value = new(value);
            fixed(void* ___value = __value)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[7](ThisPtr, MarshalString.GetAbi(ref __value)));
                global::System.GC.KeepAlive(_obj);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x1C, 0x6D, 0x89, 0x94, 0x38, 0xC9, 0x68, 0x5D, 0x84, 0xDA, 0x55, 0x2B, 0xDE, 0x81, 0x58, 0x10 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("94896D1C-C938-5D68-84DA-552BDE815810")]
    internal interface IPointerUpThemeAnimation : global::Microsoft.UI.Xaml.Media.Animation.IPointerUpThemeAnimation
    {
    }
    internal static class IPointerUpThemeAnimationStaticsMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_TargetNameProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x7E, 0x11, 0xA3, 0x51, 0xFA, 0xC6, 0xC5, 0x5D, 0x8D, 0xB8, 0x73, 0xF0, 0x60, 0x0, 0x3A, 0xE4 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("51A3117E-C6FA-5DC5-8DB8-73F060003AE4")]
    internal interface IPointerUpThemeAnimationStatics : global::Microsoft.UI.Xaml.Media.Animation.IPointerUpThemeAnimationStatics
    {
    }
    internal static class IPopInThemeAnimationMethods
    {

        internal static unsafe double get_FromHorizontalOffset(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_FromHorizontalOffset(IObjectReference _obj, double value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, int>**)ThisPtr)[9](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe double get_FromVerticalOffset(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[10](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_FromVerticalOffset(IObjectReference _obj, double value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, int>**)ThisPtr)[11](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe string get_TargetName(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_TargetName(IObjectReference _obj, string value)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalString.Pinnable __value = new(value);
            fixed(void* ___value = __value)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[7](ThisPtr, MarshalString.GetAbi(ref __value)));
                global::System.GC.KeepAlive(_obj);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x88, 0x63, 0x13, 0x20, 0xE4, 0xB4, 0xBB, 0x5C, 0x9C, 0xB2, 0xDF, 0x2E, 0xA7, 0xE6, 0xC4, 0x4B };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("20136388-B4E4-5CBB-9CB2-DF2EA7E6C44B")]
    internal interface IPopInThemeAnimation : global::Microsoft.UI.Xaml.Media.Animation.IPopInThemeAnimation
    {
    }
    internal static class IPopInThemeAnimationStaticsMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_FromHorizontalOffsetProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_FromVerticalOffsetProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_TargetNameProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xA9, 0x78, 0x93, 0x8C, 0x76, 0xD2, 0x1D, 0x5A, 0x81, 0x88, 0xF4, 0x8F, 0x7, 0x84, 0xA, 0x16 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("8C9378A9-D276-5A1D-8188-F48F07840A16")]
    internal interface IPopInThemeAnimationStatics : global::Microsoft.UI.Xaml.Media.Animation.IPopInThemeAnimationStatics
    {
    }
    internal static class IPopOutThemeAnimationMethods
    {

        internal static unsafe string get_TargetName(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_TargetName(IObjectReference _obj, string value)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalString.Pinnable __value = new(value);
            fixed(void* ___value = __value)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[7](ThisPtr, MarshalString.GetAbi(ref __value)));
                global::System.GC.KeepAlive(_obj);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xD3, 0xD, 0xB2, 0x1B, 0x48, 0x56, 0x1A, 0x54, 0xA0, 0xC9, 0x37, 0xA9, 0x55, 0xDB, 0x10, 0xA6 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("1BB20DD3-5648-541A-A0C9-37A955DB10A6")]
    internal interface IPopOutThemeAnimation : global::Microsoft.UI.Xaml.Media.Animation.IPopOutThemeAnimation
    {
    }
    internal static class IPopOutThemeAnimationStaticsMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_TargetNameProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x96, 0x9F, 0x56, 0x3F, 0x7E, 0x36, 0x5C, 0x59, 0x97, 0x32, 0x2F, 0xB9, 0x19, 0x38, 0x8D, 0x84 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("3F569F96-367E-595C-9732-2FB919388D84")]
    internal interface IPopOutThemeAnimationStatics : global::Microsoft.UI.Xaml.Media.Animation.IPopOutThemeAnimationStatics
    {
    }
    internal static class IPopupThemeTransitionMethods
    {

        internal static unsafe double get_FromHorizontalOffset(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_FromHorizontalOffset(IObjectReference _obj, double value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, int>**)ThisPtr)[7](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe double get_FromVerticalOffset(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_FromVerticalOffset(IObjectReference _obj, double value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, int>**)ThisPtr)[9](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x8A, 0x6B, 0xFA, 0xE1, 0xD3, 0xAD, 0x99, 0x52, 0xA0, 0x0, 0x12, 0x1D, 0x6D, 0xBA, 0xCC, 0x80 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("E1FA6B8A-ADD3-5299-A000-121D6DBACC80")]
    internal interface IPopupThemeTransition : global::Microsoft.UI.Xaml.Media.Animation.IPopupThemeTransition
    {
    }
    internal static class IPopupThemeTransitionStaticsMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_FromHorizontalOffsetProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_FromVerticalOffsetProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x14, 0x21, 0x8B, 0x53, 0x5C, 0x41, 0x99, 0x5F, 0xB7, 0x4D, 0xA8, 0x59, 0x66, 0xDA, 0xCC, 0x54 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("538B2114-415C-5F99-B74D-A85966DACC54")]
    internal interface IPopupThemeTransitionStatics : global::Microsoft.UI.Xaml.Media.Animation.IPopupThemeTransitionStatics
    {
    }
    internal static class IPowerEaseMethods
    {

        internal static unsafe double get_Power(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_Power(IObjectReference _obj, double value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, int>**)ThisPtr)[7](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xD0, 0xFA, 0x2D, 0x37, 0x77, 0x51, 0xF9, 0x5D, 0x8E, 0x1E, 0x92, 0x9, 0x62, 0x46, 0x87, 0x14 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("372DFAD0-5177-5DF9-8E1E-920962468714")]
    internal interface IPowerEase : global::Microsoft.UI.Xaml.Media.Animation.IPowerEase
    {
    }
    internal static class IPowerEaseStaticsMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_PowerProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xDB, 0x2E, 0xB7, 0x8E, 0x7E, 0x3E, 0x40, 0x5D, 0x92, 0x8B, 0x45, 0x5, 0xD5, 0x7C, 0x21, 0xCE };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("8EB72EDB-3E7E-5D40-928B-4505D57C21CE")]
    internal interface IPowerEaseStatics : global::Microsoft.UI.Xaml.Media.Animation.IPowerEaseStatics
    {
    }
    internal static class IQuadraticEaseMethods
    {



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xA1, 0xFD, 0x85, 0xDB, 0xB7, 0x3, 0xCD, 0x57, 0xA1, 0xEF, 0x88, 0x55, 0xCB, 0xF6, 0x21, 0x91 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("DB85FDA1-03B7-57CD-A1EF-8855CBF62191")]
    internal interface IQuadraticEase : global::Microsoft.UI.Xaml.Media.Animation.IQuadraticEase
    {
    }
    internal static class IQuarticEaseMethods
    {



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x73, 0x52, 0x21, 0x48, 0xF1, 0x5, 0xAA, 0x58, 0xBA, 0xDE, 0xB, 0x71, 0xD7, 0xBD, 0x4, 0x84 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("48215273-05F1-58AA-BADE-0B71D7BD0484")]
    internal interface IQuarticEase : global::Microsoft.UI.Xaml.Media.Animation.IQuarticEase
    {
    }
    internal static class IQuinticEaseMethods
    {



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xD5, 0x5, 0x2F, 0xDC, 0xAC, 0xA3, 0xCE, 0x5D, 0x9B, 0x85, 0x75, 0x3A, 0xC, 0x80, 0xF, 0xC2 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("DC2F05D5-A3AC-5DCE-9B85-753A0C800FC2")]
    internal interface IQuinticEase : global::Microsoft.UI.Xaml.Media.Animation.IQuinticEase
    {
    }
    internal static class IReorderThemeTransitionMethods
    {



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x74, 0x8, 0x5A, 0xD, 0xF5, 0x1D, 0x79, 0x53, 0xB6, 0x26, 0x74, 0x72, 0x17, 0x59, 0x43, 0x8A };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("0D5A0874-1DF5-5379-B626-74721759438A")]
    internal interface IReorderThemeTransition : global::Microsoft.UI.Xaml.Media.Animation.IReorderThemeTransition
    {
    }
    internal static class IRepositionThemeAnimationMethods
    {

        internal static unsafe double get_FromHorizontalOffset(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_FromHorizontalOffset(IObjectReference _obj, double value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, int>**)ThisPtr)[9](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe double get_FromVerticalOffset(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[10](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_FromVerticalOffset(IObjectReference _obj, double value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, int>**)ThisPtr)[11](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe string get_TargetName(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_TargetName(IObjectReference _obj, string value)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalString.Pinnable __value = new(value);
            fixed(void* ___value = __value)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[7](ThisPtr, MarshalString.GetAbi(ref __value)));
                global::System.GC.KeepAlive(_obj);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x25, 0xE0, 0xF7, 0x36, 0xC1, 0x23, 0xDE, 0x53, 0x8D, 0xF9, 0x7D, 0xC1, 0xE9, 0xC7, 0x88, 0xFD };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("36F7E025-23C1-53DE-8DF9-7DC1E9C788FD")]
    internal interface IRepositionThemeAnimation : global::Microsoft.UI.Xaml.Media.Animation.IRepositionThemeAnimation
    {
    }
    internal static class IRepositionThemeAnimationStaticsMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_FromHorizontalOffsetProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_FromVerticalOffsetProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_TargetNameProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xDE, 0x18, 0x41, 0xC0, 0xF5, 0xAF, 0xA9, 0x5F, 0xAE, 0xE7, 0x94, 0xA6, 0x21, 0xC8, 0x26, 0x18 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("C04118DE-AFF5-5FA9-AEE7-94A621C82618")]
    internal interface IRepositionThemeAnimationStatics : global::Microsoft.UI.Xaml.Media.Animation.IRepositionThemeAnimationStatics
    {
    }
    internal static class IRepositionThemeTransitionMethods
    {

        internal static unsafe bool get_IsStaggeringEnabled(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_IsStaggeringEnabled(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[7](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xF0, 0xE3, 0x28, 0x77, 0xB1, 0x24, 0x84, 0x54, 0x82, 0x4A, 0xC0, 0xB4, 0x1C, 0x27, 0x45, 0xD5 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("7728E3F0-24B1-5484-824A-C0B41C2745D5")]
    internal interface IRepositionThemeTransition : global::Microsoft.UI.Xaml.Media.Animation.IRepositionThemeTransition
    {
    }
    internal static class IRepositionThemeTransitionStaticsMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_IsStaggeringEnabledProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x9A, 0xF, 0xA, 0xC7, 0x5E, 0x48, 0xBB, 0x53, 0xAD, 0x3C, 0x8B, 0x41, 0xB6, 0x78, 0x8B, 0xF9 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("C70A0F9A-485E-53BB-AD3C-8B41B6788BF9")]
    internal interface IRepositionThemeTransitionStatics : global::Microsoft.UI.Xaml.Media.Animation.IRepositionThemeTransitionStatics
    {
    }
    internal static class ISineEaseMethods
    {



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x9B, 0x53, 0x15, 0x61, 0x3D, 0x66, 0x31, 0x51, 0xB7, 0xC2, 0x74, 0xBB, 0x5F, 0xDC, 0x6A, 0x1D };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("6115539B-663D-5131-B7C2-74BB5FDC6A1D")]
    internal interface ISineEase : global::Microsoft.UI.Xaml.Media.Animation.ISineEase
    {
    }
    internal static class ISlideNavigationTransitionInfoMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.Media.Animation.SlideNavigationTransitionEffect get_Effect(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Xaml.Media.Animation.SlideNavigationTransitionEffect __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Media.Animation.SlideNavigationTransitionEffect*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_Effect(IObjectReference _obj, global::Microsoft.UI.Xaml.Media.Animation.SlideNavigationTransitionEffect value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Media.Animation.SlideNavigationTransitionEffect, int>**)ThisPtr)[7](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xE, 0xDE, 0xEA, 0x53, 0x1, 0x6B, 0x1F, 0x51, 0xA5, 0x63, 0x6F, 0x57, 0x24, 0xA6, 0xC1, 0xC1 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("53EADE0E-6B01-511F-A563-6F5724A6C1C1")]
    internal interface ISlideNavigationTransitionInfo : global::Microsoft.UI.Xaml.Media.Animation.ISlideNavigationTransitionInfo
    {
    }
    internal static class ISlideNavigationTransitionInfoStaticsMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_EffectProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x6C, 0xC, 0xBA, 0x90, 0x45, 0xCD, 0x6C, 0x5A, 0xBB, 0xB2, 0x88, 0x3, 0x7D, 0x43, 0xCD, 0x79 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("90BA0C6C-CD45-5A6C-BBB2-88037D43CD79")]
    internal interface ISlideNavigationTransitionInfoStatics : global::Microsoft.UI.Xaml.Media.Animation.ISlideNavigationTransitionInfoStatics
    {
    }
    internal static class ISplineColorKeyFrameMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.Media.Animation.KeySpline get_KeySpline(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Media.Animation.KeySpline.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Media.Animation.KeySpline.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_KeySpline(IObjectReference _obj, global::Microsoft.UI.Xaml.Media.Animation.KeySpline value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.Media.Animation.KeySpline.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[7](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x5F, 0x90, 0xC5, 0x60, 0x43, 0x43, 0x4D, 0x50, 0xA2, 0xC6, 0x64, 0xB8, 0xD9, 0x24, 0xB4, 0x38 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("60C5905F-4343-504D-A2C6-64B8D924B438")]
    internal interface ISplineColorKeyFrame : global::Microsoft.UI.Xaml.Media.Animation.ISplineColorKeyFrame
    {
    }
    internal static class ISplineColorKeyFrameStaticsMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_KeySplineProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x62, 0x70, 0x9C, 0xD8, 0x3D, 0x75, 0x52, 0x56, 0xB2, 0x15, 0xC1, 0x95, 0xAE, 0x2C, 0x7A, 0x18 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("D89C7062-753D-5652-B215-C195AE2C7A18")]
    internal interface ISplineColorKeyFrameStatics : global::Microsoft.UI.Xaml.Media.Animation.ISplineColorKeyFrameStatics
    {
    }
    internal static class ISplineDoubleKeyFrameMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.Media.Animation.KeySpline get_KeySpline(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Media.Animation.KeySpline.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Media.Animation.KeySpline.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_KeySpline(IObjectReference _obj, global::Microsoft.UI.Xaml.Media.Animation.KeySpline value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.Media.Animation.KeySpline.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[7](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x57, 0x9, 0xA8, 0xAE, 0x56, 0xBB, 0xB6, 0x59, 0xBB, 0x7A, 0x62, 0x95, 0xF9, 0x4B, 0xC9, 0x61 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("AEA80957-BB56-59B6-BB7A-6295F94BC961")]
    internal interface ISplineDoubleKeyFrame : global::Microsoft.UI.Xaml.Media.Animation.ISplineDoubleKeyFrame
    {
    }
    internal static class ISplineDoubleKeyFrameStaticsMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_KeySplineProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x2E, 0x55, 0x88, 0xCA, 0x37, 0x72, 0xF8, 0x51, 0xA8, 0xCA, 0x79, 0x95, 0x2C, 0x77, 0x88, 0x3A };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("CA88552E-7237-51F8-A8CA-79952C77883A")]
    internal interface ISplineDoubleKeyFrameStatics : global::Microsoft.UI.Xaml.Media.Animation.ISplineDoubleKeyFrameStatics
    {
    }
    internal static class ISplinePointKeyFrameMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.Media.Animation.KeySpline get_KeySpline(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Media.Animation.KeySpline.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Media.Animation.KeySpline.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_KeySpline(IObjectReference _obj, global::Microsoft.UI.Xaml.Media.Animation.KeySpline value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.Media.Animation.KeySpline.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[7](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x49, 0xB0, 0x7E, 0x2B, 0x8C, 0x70, 0x20, 0x52, 0xA1, 0x78, 0xA2, 0x5D, 0xBC, 0x14, 0xFF, 0xBE };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("2B7EB049-708C-5220-A178-A25DBC14FFBE")]
    internal interface ISplinePointKeyFrame : global::Microsoft.UI.Xaml.Media.Animation.ISplinePointKeyFrame
    {
    }
    internal static class ISplinePointKeyFrameStaticsMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_KeySplineProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x36, 0xE, 0x10, 0x1E, 0xD1, 0xBE, 0x60, 0x50, 0x8D, 0xCF, 0xD, 0x5B, 0x32, 0x57, 0x5E, 0xD1 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("1E100E36-BED1-5060-8DCF-0D5B32575ED1")]
    internal interface ISplinePointKeyFrameStatics : global::Microsoft.UI.Xaml.Media.Animation.ISplinePointKeyFrameStatics
    {
    }
    internal static class ISplitCloseThemeAnimationMethods
    {

        internal static unsafe double get_ClosedLength(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[20](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_ClosedLength(IObjectReference _obj, double value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, int>**)ThisPtr)[21](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyObject get_ClosedTarget(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[12](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyObject.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyObject.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_ClosedTarget(IObjectReference _obj, global::Microsoft.UI.Xaml.DependencyObject value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.DependencyObject.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[13](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe string get_ClosedTargetName(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[10](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_ClosedTargetName(IObjectReference _obj, string value)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalString.Pinnable __value = new(value);
            fixed(void* ___value = __value)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[11](ThisPtr, MarshalString.GetAbi(ref __value)));
                global::System.GC.KeepAlive(_obj);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyObject get_ContentTarget(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[16](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyObject.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyObject.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_ContentTarget(IObjectReference _obj, global::Microsoft.UI.Xaml.DependencyObject value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.DependencyObject.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[17](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe string get_ContentTargetName(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[14](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_ContentTargetName(IObjectReference _obj, string value)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalString.Pinnable __value = new(value);
            fixed(void* ___value = __value)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[15](ThisPtr, MarshalString.GetAbi(ref __value)));
                global::System.GC.KeepAlive(_obj);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.AnimationDirection get_ContentTranslationDirection(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Xaml.Controls.Primitives.AnimationDirection __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Controls.Primitives.AnimationDirection*, int>**)ThisPtr)[24](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_ContentTranslationDirection(IObjectReference _obj, global::Microsoft.UI.Xaml.Controls.Primitives.AnimationDirection value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Controls.Primitives.AnimationDirection, int>**)ThisPtr)[25](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe double get_ContentTranslationOffset(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[26](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_ContentTranslationOffset(IObjectReference _obj, double value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, int>**)ThisPtr)[27](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe double get_OffsetFromCenter(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[22](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_OffsetFromCenter(IObjectReference _obj, double value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, int>**)ThisPtr)[23](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe double get_OpenedLength(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[18](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_OpenedLength(IObjectReference _obj, double value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, int>**)ThisPtr)[19](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyObject get_OpenedTarget(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyObject.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyObject.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_OpenedTarget(IObjectReference _obj, global::Microsoft.UI.Xaml.DependencyObject value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.DependencyObject.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[9](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe string get_OpenedTargetName(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_OpenedTargetName(IObjectReference _obj, string value)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalString.Pinnable __value = new(value);
            fixed(void* ___value = __value)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[7](ThisPtr, MarshalString.GetAbi(ref __value)));
                global::System.GC.KeepAlive(_obj);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x90, 0x14, 0xDD, 0xB0, 0x46, 0xF6, 0x18, 0x5C, 0xB3, 0xEF, 0x2, 0xF9, 0xB1, 0x7F, 0x57, 0xDF };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("B0DD1490-F646-5C18-B3EF-02F9B17F57DF")]
    internal interface ISplitCloseThemeAnimation : global::Microsoft.UI.Xaml.Media.Animation.ISplitCloseThemeAnimation
    {
    }
    internal static class ISplitCloseThemeAnimationStaticsMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_ClosedLengthProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[13](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_ClosedTargetNameProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_ClosedTargetProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[9](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_ContentTargetNameProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[10](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_ContentTargetProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[11](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_ContentTranslationDirectionProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[15](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_ContentTranslationOffsetProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[16](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_OffsetFromCenterProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[14](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_OpenedLengthProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[12](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_OpenedTargetNameProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_OpenedTargetProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xDD, 0x5C, 0x34, 0x32, 0x3C, 0x2A, 0x71, 0x55, 0xB2, 0xEB, 0x2F, 0xCA, 0xBC, 0x2E, 0x92, 0xC6 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("32345CDD-2A3C-5571-B2EB-2FCABC2E92C6")]
    internal interface ISplitCloseThemeAnimationStatics : global::Microsoft.UI.Xaml.Media.Animation.ISplitCloseThemeAnimationStatics
    {
    }
    internal static class ISplitOpenThemeAnimationMethods
    {

        internal static unsafe double get_ClosedLength(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[20](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_ClosedLength(IObjectReference _obj, double value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, int>**)ThisPtr)[21](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyObject get_ClosedTarget(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[12](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyObject.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyObject.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_ClosedTarget(IObjectReference _obj, global::Microsoft.UI.Xaml.DependencyObject value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.DependencyObject.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[13](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe string get_ClosedTargetName(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[10](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_ClosedTargetName(IObjectReference _obj, string value)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalString.Pinnable __value = new(value);
            fixed(void* ___value = __value)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[11](ThisPtr, MarshalString.GetAbi(ref __value)));
                global::System.GC.KeepAlive(_obj);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyObject get_ContentTarget(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[16](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyObject.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyObject.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_ContentTarget(IObjectReference _obj, global::Microsoft.UI.Xaml.DependencyObject value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.DependencyObject.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[17](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe string get_ContentTargetName(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[14](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_ContentTargetName(IObjectReference _obj, string value)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalString.Pinnable __value = new(value);
            fixed(void* ___value = __value)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[15](ThisPtr, MarshalString.GetAbi(ref __value)));
                global::System.GC.KeepAlive(_obj);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.Controls.Primitives.AnimationDirection get_ContentTranslationDirection(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Xaml.Controls.Primitives.AnimationDirection __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Controls.Primitives.AnimationDirection*, int>**)ThisPtr)[24](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_ContentTranslationDirection(IObjectReference _obj, global::Microsoft.UI.Xaml.Controls.Primitives.AnimationDirection value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Controls.Primitives.AnimationDirection, int>**)ThisPtr)[25](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe double get_ContentTranslationOffset(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[26](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_ContentTranslationOffset(IObjectReference _obj, double value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, int>**)ThisPtr)[27](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe double get_OffsetFromCenter(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[22](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_OffsetFromCenter(IObjectReference _obj, double value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, int>**)ThisPtr)[23](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe double get_OpenedLength(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[18](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_OpenedLength(IObjectReference _obj, double value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, int>**)ThisPtr)[19](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyObject get_OpenedTarget(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyObject.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyObject.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_OpenedTarget(IObjectReference _obj, global::Microsoft.UI.Xaml.DependencyObject value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.DependencyObject.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[9](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe string get_OpenedTargetName(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_OpenedTargetName(IObjectReference _obj, string value)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalString.Pinnable __value = new(value);
            fixed(void* ___value = __value)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[7](ThisPtr, MarshalString.GetAbi(ref __value)));
                global::System.GC.KeepAlive(_obj);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xCA, 0xFA, 0xFD, 0x79, 0x45, 0x42, 0xF0, 0x53, 0xB5, 0xC7, 0xDA, 0x1C, 0xE2, 0xB0, 0xB8, 0x51 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("79FDFACA-4245-53F0-B5C7-DA1CE2B0B851")]
    internal interface ISplitOpenThemeAnimation : global::Microsoft.UI.Xaml.Media.Animation.ISplitOpenThemeAnimation
    {
    }
    internal static class ISplitOpenThemeAnimationStaticsMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_ClosedLengthProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[13](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_ClosedTargetNameProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_ClosedTargetProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[9](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_ContentTargetNameProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[10](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_ContentTargetProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[11](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_ContentTranslationDirectionProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[15](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_ContentTranslationOffsetProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[16](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_OffsetFromCenterProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[14](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_OpenedLengthProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[12](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_OpenedTargetNameProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_OpenedTargetProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x84, 0x3B, 0xA7, 0xE5, 0xAE, 0xA4, 0x38, 0x5C, 0x84, 0xDA, 0xF7, 0xED, 0x30, 0xFC, 0x9B, 0x6E };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("E5A73B84-A4AE-5C38-84DA-F7ED30FC9B6E")]
    internal interface ISplitOpenThemeAnimationStatics : global::Microsoft.UI.Xaml.Media.Animation.ISplitOpenThemeAnimationStatics
    {
    }
    internal static class IStoryboardMethods
    {


        internal static unsafe void Seek(IObjectReference _obj, global::System.TimeSpan offset)
        {
            var ThisPtr = _obj.ThisPtr;

            global::ABI.System.TimeSpan.Marshaler __offset = default;
            try
            {
                __offset = global::ABI.System.TimeSpan.CreateMarshaler(offset);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::ABI.System.TimeSpan, int>**)ThisPtr)[7](ThisPtr, global::ABI.System.TimeSpan.GetAbi(__offset)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                global::ABI.System.TimeSpan.DisposeMarshaler(__offset);
            }
        }

        internal static unsafe void Stop(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int>**)ThisPtr)[8](ThisPtr));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe void Begin(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int>**)ThisPtr)[9](ThisPtr));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe void Pause(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int>**)ThisPtr)[10](ThisPtr));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe void Resume(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int>**)ThisPtr)[11](ThisPtr));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.UI.Xaml.Media.Animation.ClockState GetCurrentState(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Xaml.Media.Animation.ClockState __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Media.Animation.ClockState*, int>**)ThisPtr)[12](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::System.TimeSpan GetCurrentTime(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::ABI.System.TimeSpan __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::ABI.System.TimeSpan*, int>**)ThisPtr)[13](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.System.TimeSpan.FromAbi(__retval);
            }
            finally
            {
                global::ABI.System.TimeSpan.DisposeAbi(__retval);
            }
        }

        internal static unsafe void SeekAlignedToLastTick(IObjectReference _obj, global::System.TimeSpan offset)
        {
            var ThisPtr = _obj.ThisPtr;

            global::ABI.System.TimeSpan.Marshaler __offset = default;
            try
            {
                __offset = global::ABI.System.TimeSpan.CreateMarshaler(offset);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::ABI.System.TimeSpan, int>**)ThisPtr)[14](ThisPtr, global::ABI.System.TimeSpan.GetAbi(__offset)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                global::ABI.System.TimeSpan.DisposeMarshaler(__offset);
            }
        }

        internal static unsafe void SkipToFill(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int>**)ThisPtr)[15](ThisPtr));
            global::System.GC.KeepAlive(_obj);
        }
        internal static unsafe global::Microsoft.UI.Xaml.Media.Animation.TimelineCollection get_Children(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Media.Animation.TimelineCollection.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Media.Animation.TimelineCollection.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xB3, 0x1B, 0xD4, 0x4, 0x21, 0x87, 0x9E, 0x51, 0x8E, 0x53, 0xFB, 0x8B, 0x34, 0x92, 0x3, 0x5 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("04D41BB3-8721-519E-8E53-FB8B34920305")]
    internal interface IStoryboard : global::Microsoft.UI.Xaml.Media.Animation.IStoryboard
    {
    }
    internal static class IStoryboardStaticsMethods
    {


        internal static unsafe string GetTargetProperty(IObjectReference _obj, global::Microsoft.UI.Xaml.Media.Animation.Timeline element)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __element = default;
            IntPtr __retval = default;
            try
            {
                __element = global::ABI.Microsoft.UI.Xaml.Media.Animation.Timeline.CreateMarshaler2(element);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, MarshalInspectable<object>.GetAbi(__element), &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__element);
                MarshalString.DisposeAbi(__retval);
            }
        }

        internal static unsafe void SetTargetProperty(IObjectReference _obj, global::Microsoft.UI.Xaml.Media.Animation.Timeline element, string path)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __element = default;
            try
            {
                __element = global::ABI.Microsoft.UI.Xaml.Media.Animation.Timeline.CreateMarshaler2(element);
                MarshalString.Pinnable __path = new(path);
                fixed(void* ___path = __path)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, int>**)ThisPtr)[8](ThisPtr, MarshalInspectable<object>.GetAbi(__element), MarshalString.GetAbi(ref __path)));
                    global::System.GC.KeepAlive(_obj);
                }
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__element);
            }
        }

        internal static unsafe string GetTargetName(IObjectReference _obj, global::Microsoft.UI.Xaml.Media.Animation.Timeline element)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __element = default;
            IntPtr __retval = default;
            try
            {
                __element = global::ABI.Microsoft.UI.Xaml.Media.Animation.Timeline.CreateMarshaler2(element);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[10](ThisPtr, MarshalInspectable<object>.GetAbi(__element), &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__element);
                MarshalString.DisposeAbi(__retval);
            }
        }

        internal static unsafe void SetTargetName(IObjectReference _obj, global::Microsoft.UI.Xaml.Media.Animation.Timeline element, string name)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __element = default;
            try
            {
                __element = global::ABI.Microsoft.UI.Xaml.Media.Animation.Timeline.CreateMarshaler2(element);
                MarshalString.Pinnable __name = new(name);
                fixed(void* ___name = __name)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, int>**)ThisPtr)[11](ThisPtr, MarshalInspectable<object>.GetAbi(__element), MarshalString.GetAbi(ref __name)));
                    global::System.GC.KeepAlive(_obj);
                }
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__element);
            }
        }

        internal static unsafe void SetTarget(IObjectReference _obj, global::Microsoft.UI.Xaml.Media.Animation.Timeline timeline, global::Microsoft.UI.Xaml.DependencyObject target)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __timeline = default;
            ObjectReferenceValue __target = default;
            try
            {
                __timeline = global::ABI.Microsoft.UI.Xaml.Media.Animation.Timeline.CreateMarshaler2(timeline);
                __target = global::ABI.Microsoft.UI.Xaml.DependencyObject.CreateMarshaler2(target);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, int>**)ThisPtr)[12](ThisPtr, MarshalInspectable<object>.GetAbi(__timeline), MarshalInspectable<object>.GetAbi(__target)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__timeline);
                MarshalInspectable<object>.DisposeMarshaler(__target);
            }
        }
        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_TargetNameProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[9](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_TargetPropertyProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x9B, 0x51, 0x18, 0xDD, 0xE4, 0xD4, 0x7D, 0x59, 0xA0, 0xB7, 0x65, 0x5E, 0xBD, 0xD3, 0x5E, 0xFA };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("DD18519B-D4E4-597D-A0B7-655EBDD35EFA")]
    internal interface IStoryboardStatics : global::Microsoft.UI.Xaml.Media.Animation.IStoryboardStatics
    {
    }
    internal static class ISuppressNavigationTransitionInfoMethods
    {



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xD1, 0x2B, 0xCD, 0x3E, 0x5, 0x98, 0x51, 0x5F, 0xBB, 0x9E, 0x5, 0x1F, 0xEA, 0x8D, 0xC3, 0x55 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("3ECD2BD1-9805-5F51-BB9E-051FEA8DC355")]
    internal interface ISuppressNavigationTransitionInfo : global::Microsoft.UI.Xaml.Media.Animation.ISuppressNavigationTransitionInfo
    {
    }
    internal static class ISwipeBackThemeAnimationMethods
    {

        internal static unsafe double get_FromHorizontalOffset(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_FromHorizontalOffset(IObjectReference _obj, double value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, int>**)ThisPtr)[9](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe double get_FromVerticalOffset(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[10](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_FromVerticalOffset(IObjectReference _obj, double value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, int>**)ThisPtr)[11](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe string get_TargetName(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_TargetName(IObjectReference _obj, string value)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalString.Pinnable __value = new(value);
            fixed(void* ___value = __value)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[7](ThisPtr, MarshalString.GetAbi(ref __value)));
                global::System.GC.KeepAlive(_obj);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x58, 0xD0, 0x95, 0xF0, 0x9E, 0xBC, 0xEE, 0x58, 0x88, 0x77, 0xE0, 0x84, 0x72, 0x3B, 0x43, 0x33 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("F095D058-BC9E-58EE-8877-E084723B4333")]
    internal interface ISwipeBackThemeAnimation : global::Microsoft.UI.Xaml.Media.Animation.ISwipeBackThemeAnimation
    {
    }
    internal static class ISwipeBackThemeAnimationStaticsMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_FromHorizontalOffsetProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_FromVerticalOffsetProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_TargetNameProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x88, 0xA5, 0xA7, 0x18, 0xA2, 0xB9, 0x3B, 0x57, 0x8E, 0x2B, 0x38, 0x4, 0x8C, 0x46, 0x35, 0xA7 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("18A7A588-B9A2-573B-8E2B-38048C4635A7")]
    internal interface ISwipeBackThemeAnimationStatics : global::Microsoft.UI.Xaml.Media.Animation.ISwipeBackThemeAnimationStatics
    {
    }
    internal static class ISwipeHintThemeAnimationMethods
    {

        internal static unsafe string get_TargetName(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_TargetName(IObjectReference _obj, string value)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalString.Pinnable __value = new(value);
            fixed(void* ___value = __value)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[7](ThisPtr, MarshalString.GetAbi(ref __value)));
                global::System.GC.KeepAlive(_obj);
            }
        }

        internal static unsafe double get_ToHorizontalOffset(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_ToHorizontalOffset(IObjectReference _obj, double value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, int>**)ThisPtr)[9](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe double get_ToVerticalOffset(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[10](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_ToVerticalOffset(IObjectReference _obj, double value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, int>**)ThisPtr)[11](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xD7, 0x3, 0xDE, 0x9, 0x8A, 0x4B, 0xE1, 0x55, 0xAF, 0xAD, 0x5F, 0x60, 0x59, 0x87, 0x33, 0xEA };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("09DE03D7-4B8A-55E1-AFAD-5F60598733EA")]
    internal interface ISwipeHintThemeAnimation : global::Microsoft.UI.Xaml.Media.Animation.ISwipeHintThemeAnimation
    {
    }
    internal static class ISwipeHintThemeAnimationStaticsMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_TargetNameProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_ToHorizontalOffsetProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_ToVerticalOffsetProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x4, 0x83, 0x30, 0xF3, 0x9, 0x4F, 0xD7, 0x54, 0xA4, 0xD5, 0xCA, 0x55, 0x8B, 0xBF, 0xE2, 0x6F };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("F3308304-4F09-54D7-A4D5-CA558BBFE26F")]
    internal interface ISwipeHintThemeAnimationStatics : global::Microsoft.UI.Xaml.Media.Animation.ISwipeHintThemeAnimationStatics
    {
    }
    internal static class ITimelineMethods
    {

        internal static unsafe bool get_AutoReverse(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_AutoReverse(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[7](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::System.Nullable<global::System.TimeSpan> get_BeginTime(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInterface<global::System.Nullable<global::System.TimeSpan>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Nullable<global::System.TimeSpan>>.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_BeginTime(IObjectReference _obj, global::System.Nullable<global::System.TimeSpan> value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = MarshalInterface<global::System.Nullable<global::System.TimeSpan>>.CreateMarshaler2(value, global::ABI.System.Nullable<global::System.TimeSpan>.PIID);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[9](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.Duration get_Duration(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Xaml.Duration __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Duration*, int>**)ThisPtr)[10](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_Duration(IObjectReference _obj, global::Microsoft.UI.Xaml.Duration value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Duration, int>**)ThisPtr)[11](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.UI.Xaml.Media.Animation.FillBehavior get_FillBehavior(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Xaml.Media.Animation.FillBehavior __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Media.Animation.FillBehavior*, int>**)ThisPtr)[14](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_FillBehavior(IObjectReference _obj, global::Microsoft.UI.Xaml.Media.Animation.FillBehavior value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Media.Animation.FillBehavior, int>**)ThisPtr)[15](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.UI.Xaml.Media.Animation.RepeatBehavior get_RepeatBehavior(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Xaml.Media.Animation.RepeatBehavior __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Media.Animation.RepeatBehavior*, int>**)ThisPtr)[16](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_RepeatBehavior(IObjectReference _obj, global::Microsoft.UI.Xaml.Media.Animation.RepeatBehavior value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Media.Animation.RepeatBehavior, int>**)ThisPtr)[17](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe double get_SpeedRatio(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[12](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_SpeedRatio(IObjectReference _obj, double value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, int>**)ThisPtr)[13](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }


        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::System.EventHandler<object>>> _Completed_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::System.EventHandler<object>>> MakeCompletedTable()
        {
            _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_EventHandler_1_object.EnsureInitialized();
            global::System.Threading.Interlocked.CompareExchange(ref _Completed_, new(), null);
            return _Completed_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::System.EventHandler<object>>> _Completed => _Completed_ ?? MakeCompletedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::System.EventHandler<object>> Get_Completed2(IObjectReference _obj, object _thisObj)
        {
            return _Completed.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return  new global::ABI.WinRT.Interop.EventHandlerEventSource<object>(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[18],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[19],
                0);
            });
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x30, 0xB3, 0xF9, 0xD0, 0x2A, 0xCC, 0x5, 0x5B, 0x97, 0x86, 0x2D, 0xA4, 0xC6, 0x58, 0x45, 0x81 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("D0F9B330-CC2A-5B05-9786-2DA4C6584581")]
    internal interface ITimeline : global::Microsoft.UI.Xaml.Media.Animation.ITimeline
    {
    }
    internal static class ITimelineFactoryMethods
    {


        internal static unsafe global::Microsoft.UI.Xaml.Media.Animation.Timeline CreateInstance(IObjectReference _obj, object baseInterface, out object innerInterface)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __baseInterface = default;
            IntPtr __innerInterface = default;
            IntPtr __retval = default;
            try
            {
                __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                global::System.GC.KeepAlive(_obj);
                innerInterface = MarshalInspectable<object>.FromAbi(__innerInterface);
                return global::ABI.Microsoft.UI.Xaml.Media.Animation.Timeline.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                MarshalInspectable<object>.DisposeAbi(__innerInterface);
                global::ABI.Microsoft.UI.Xaml.Media.Animation.Timeline.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x32, 0x57, 0x63, 0x6A, 0x27, 0xA8, 0x98, 0x53, 0x9F, 0xC8, 0xDF, 0xBC, 0x3B, 0x97, 0xE3, 0xC1 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("6A635732-A827-5398-9FC8-DFBC3B97E3C1")]
    internal interface ITimelineFactory : global::Microsoft.UI.Xaml.Media.Animation.ITimelineFactory
    {
    }
    internal static class ITimelineStaticsMethods
    {

        internal static unsafe bool get_AllowDependentAnimations(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_AllowDependentAnimations(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[7](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_AutoReverseProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_BeginTimeProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[9](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_DurationProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[10](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_FillBehaviorProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[12](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_RepeatBehaviorProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[13](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_SpeedRatioProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[11](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x71, 0x84, 0x8B, 0x77, 0x31, 0xC8, 0x3A, 0x50, 0x87, 0x48, 0xFE, 0x6B, 0xBC, 0x71, 0x53, 0xB7 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("778B8471-C831-503A-8748-FE6BBC7153B7")]
    internal interface ITimelineStatics : global::Microsoft.UI.Xaml.Media.Animation.ITimelineStatics
    {
    }
    internal static class ITransitionMethods
    {



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x56, 0x19, 0xB7, 0xE5, 0x44, 0x8E, 0x38, 0x5A, 0xB4, 0x1E, 0x27, 0x4D, 0x70, 0x61, 0x2, 0xBF };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("E5B71956-8E44-5A38-B41E-274D706102BF")]
    internal interface ITransition : global::Microsoft.UI.Xaml.Media.Animation.ITransition
    {
    }
    internal static class ITransitionFactoryMethods
    {



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x3B, 0x3E, 0x2, 0xB7, 0xD3, 0xBC, 0xEC, 0x50, 0xAA, 0xCF, 0x8C, 0xFC, 0xEC, 0xE2, 0x5F, 0x17 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("B7023E3B-BCD3-50EC-AACF-8CFCECE25F17")]
    internal interface ITransitionFactory : global::Microsoft.UI.Xaml.Media.Animation.ITransitionFactory
    {
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct KeySpline
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Media.Animation.KeySpline obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Media.Animation.KeySpline>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.IKeySplineMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Media.Animation.KeySpline obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.IKeySplineMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Media.Animation.KeySpline FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Media.Animation.KeySpline.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Media.Animation.KeySpline obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.KeySpline>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Media.Animation.KeySpline[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.KeySpline>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.KeySpline>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Media.Animation.KeySpline[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.KeySpline>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Media.Animation.KeySpline[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.KeySpline>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Media.Animation.KeySpline[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.KeySpline>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.KeySpline>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.KeySpline>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class KeySplineRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Media.Animation.KeySpline(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct LinearColorKeyFrame
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Media.Animation.LinearColorKeyFrame obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Media.Animation.LinearColorKeyFrame>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.ILinearColorKeyFrameMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Media.Animation.LinearColorKeyFrame obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.ILinearColorKeyFrameMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Media.Animation.LinearColorKeyFrame FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Media.Animation.LinearColorKeyFrame.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Media.Animation.LinearColorKeyFrame obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.LinearColorKeyFrame>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Media.Animation.LinearColorKeyFrame[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.LinearColorKeyFrame>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.LinearColorKeyFrame>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Media.Animation.LinearColorKeyFrame[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.LinearColorKeyFrame>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Media.Animation.LinearColorKeyFrame[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.LinearColorKeyFrame>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Media.Animation.LinearColorKeyFrame[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.LinearColorKeyFrame>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.LinearColorKeyFrame>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.LinearColorKeyFrame>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class LinearColorKeyFrameRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Media.Animation.LinearColorKeyFrame(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct LinearDoubleKeyFrame
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Media.Animation.LinearDoubleKeyFrame obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Media.Animation.LinearDoubleKeyFrame>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.ILinearDoubleKeyFrameMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Media.Animation.LinearDoubleKeyFrame obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.ILinearDoubleKeyFrameMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Media.Animation.LinearDoubleKeyFrame FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Media.Animation.LinearDoubleKeyFrame.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Media.Animation.LinearDoubleKeyFrame obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.LinearDoubleKeyFrame>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Media.Animation.LinearDoubleKeyFrame[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.LinearDoubleKeyFrame>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.LinearDoubleKeyFrame>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Media.Animation.LinearDoubleKeyFrame[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.LinearDoubleKeyFrame>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Media.Animation.LinearDoubleKeyFrame[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.LinearDoubleKeyFrame>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Media.Animation.LinearDoubleKeyFrame[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.LinearDoubleKeyFrame>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.LinearDoubleKeyFrame>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.LinearDoubleKeyFrame>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class LinearDoubleKeyFrameRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Media.Animation.LinearDoubleKeyFrame(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct LinearPointKeyFrame
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Media.Animation.LinearPointKeyFrame obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Media.Animation.LinearPointKeyFrame>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.ILinearPointKeyFrameMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Media.Animation.LinearPointKeyFrame obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.ILinearPointKeyFrameMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Media.Animation.LinearPointKeyFrame FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Media.Animation.LinearPointKeyFrame.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Media.Animation.LinearPointKeyFrame obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.LinearPointKeyFrame>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Media.Animation.LinearPointKeyFrame[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.LinearPointKeyFrame>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.LinearPointKeyFrame>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Media.Animation.LinearPointKeyFrame[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.LinearPointKeyFrame>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Media.Animation.LinearPointKeyFrame[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.LinearPointKeyFrame>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Media.Animation.LinearPointKeyFrame[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.LinearPointKeyFrame>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.LinearPointKeyFrame>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.LinearPointKeyFrame>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class LinearPointKeyFrameRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Media.Animation.LinearPointKeyFrame(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct NavigationThemeTransition
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Media.Animation.NavigationThemeTransition obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Media.Animation.NavigationThemeTransition>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.INavigationThemeTransitionMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Media.Animation.NavigationThemeTransition obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.INavigationThemeTransitionMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Media.Animation.NavigationThemeTransition FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Media.Animation.NavigationThemeTransition.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Media.Animation.NavigationThemeTransition obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.NavigationThemeTransition>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Media.Animation.NavigationThemeTransition[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.NavigationThemeTransition>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.NavigationThemeTransition>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Media.Animation.NavigationThemeTransition[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.NavigationThemeTransition>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Media.Animation.NavigationThemeTransition[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.NavigationThemeTransition>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Media.Animation.NavigationThemeTransition[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.NavigationThemeTransition>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.NavigationThemeTransition>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.NavigationThemeTransition>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class NavigationThemeTransitionRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Media.Animation.NavigationThemeTransition(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct NavigationTransitionInfo
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Media.Animation.NavigationTransitionInfo obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Media.Animation.NavigationTransitionInfo>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.INavigationTransitionInfoMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Media.Animation.NavigationTransitionInfo obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.INavigationTransitionInfoMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Media.Animation.NavigationTransitionInfo FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Media.Animation.NavigationTransitionInfo.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Media.Animation.NavigationTransitionInfo obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.NavigationTransitionInfo>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Media.Animation.NavigationTransitionInfo[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.NavigationTransitionInfo>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.NavigationTransitionInfo>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Media.Animation.NavigationTransitionInfo[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.NavigationTransitionInfo>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Media.Animation.NavigationTransitionInfo[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.NavigationTransitionInfo>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Media.Animation.NavigationTransitionInfo[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.NavigationTransitionInfo>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.NavigationTransitionInfo>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.NavigationTransitionInfo>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class NavigationTransitionInfoRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Media.Animation.NavigationTransitionInfo(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct ObjectAnimationUsingKeyFrames
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Media.Animation.ObjectAnimationUsingKeyFrames obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Media.Animation.ObjectAnimationUsingKeyFrames>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.IObjectAnimationUsingKeyFramesMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Media.Animation.ObjectAnimationUsingKeyFrames obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.IObjectAnimationUsingKeyFramesMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Media.Animation.ObjectAnimationUsingKeyFrames FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Media.Animation.ObjectAnimationUsingKeyFrames.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Media.Animation.ObjectAnimationUsingKeyFrames obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.ObjectAnimationUsingKeyFrames>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Media.Animation.ObjectAnimationUsingKeyFrames[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.ObjectAnimationUsingKeyFrames>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.ObjectAnimationUsingKeyFrames>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Media.Animation.ObjectAnimationUsingKeyFrames[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.ObjectAnimationUsingKeyFrames>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Media.Animation.ObjectAnimationUsingKeyFrames[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.ObjectAnimationUsingKeyFrames>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Media.Animation.ObjectAnimationUsingKeyFrames[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.ObjectAnimationUsingKeyFrames>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.ObjectAnimationUsingKeyFrames>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.ObjectAnimationUsingKeyFrames>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class ObjectAnimationUsingKeyFramesRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Media.Animation.ObjectAnimationUsingKeyFrames(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct ObjectKeyFrame
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Media.Animation.ObjectKeyFrame obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Media.Animation.ObjectKeyFrame>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.IObjectKeyFrameMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Media.Animation.ObjectKeyFrame obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.IObjectKeyFrameMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Media.Animation.ObjectKeyFrame FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Media.Animation.ObjectKeyFrame.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Media.Animation.ObjectKeyFrame obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.ObjectKeyFrame>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Media.Animation.ObjectKeyFrame[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.ObjectKeyFrame>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.ObjectKeyFrame>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Media.Animation.ObjectKeyFrame[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.ObjectKeyFrame>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Media.Animation.ObjectKeyFrame[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.ObjectKeyFrame>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Media.Animation.ObjectKeyFrame[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.ObjectKeyFrame>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.ObjectKeyFrame>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.ObjectKeyFrame>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class ObjectKeyFrameRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Media.Animation.ObjectKeyFrame(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct ObjectKeyFrameCollection
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Media.Animation.ObjectKeyFrameCollection obj) => obj is null ? null : MarshalInterface<global::System.Collections.Generic.IList<global::Microsoft.UI.Xaml.Media.Animation.ObjectKeyFrame>>.CreateMarshaler(obj);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Media.Animation.ObjectKeyFrameCollection obj) => MarshalInterface<global::System.Collections.Generic.IList<global::Microsoft.UI.Xaml.Media.Animation.ObjectKeyFrame>>.CreateMarshaler2(obj, global::ABI.System.Collections.Generic.IListMethods<global::Microsoft.UI.Xaml.Media.Animation.ObjectKeyFrame>.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Media.Animation.ObjectKeyFrameCollection FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Media.Animation.ObjectKeyFrameCollection.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Media.Animation.ObjectKeyFrameCollection obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.ObjectKeyFrameCollection>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Media.Animation.ObjectKeyFrameCollection[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.ObjectKeyFrameCollection>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.ObjectKeyFrameCollection>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Media.Animation.ObjectKeyFrameCollection[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.ObjectKeyFrameCollection>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Media.Animation.ObjectKeyFrameCollection[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.ObjectKeyFrameCollection>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Media.Animation.ObjectKeyFrameCollection[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.ObjectKeyFrameCollection>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.ObjectKeyFrameCollection>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.ObjectKeyFrameCollection>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class ObjectKeyFrameCollectionRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Media.Animation.ObjectKeyFrameCollection(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct PaneThemeTransition
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Media.Animation.PaneThemeTransition obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Media.Animation.PaneThemeTransition>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.IPaneThemeTransitionMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Media.Animation.PaneThemeTransition obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.IPaneThemeTransitionMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Media.Animation.PaneThemeTransition FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Media.Animation.PaneThemeTransition.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Media.Animation.PaneThemeTransition obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.PaneThemeTransition>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Media.Animation.PaneThemeTransition[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.PaneThemeTransition>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.PaneThemeTransition>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Media.Animation.PaneThemeTransition[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.PaneThemeTransition>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Media.Animation.PaneThemeTransition[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.PaneThemeTransition>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Media.Animation.PaneThemeTransition[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.PaneThemeTransition>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.PaneThemeTransition>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.PaneThemeTransition>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class PaneThemeTransitionRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Media.Animation.PaneThemeTransition(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct PointAnimation
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Media.Animation.PointAnimation obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Media.Animation.PointAnimation>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.IPointAnimationMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Media.Animation.PointAnimation obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.IPointAnimationMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Media.Animation.PointAnimation FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Media.Animation.PointAnimation.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Media.Animation.PointAnimation obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.PointAnimation>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Media.Animation.PointAnimation[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.PointAnimation>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.PointAnimation>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Media.Animation.PointAnimation[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.PointAnimation>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Media.Animation.PointAnimation[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.PointAnimation>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Media.Animation.PointAnimation[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.PointAnimation>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.PointAnimation>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.PointAnimation>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class PointAnimationRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Media.Animation.PointAnimation(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct PointAnimationUsingKeyFrames
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Media.Animation.PointAnimationUsingKeyFrames obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Media.Animation.PointAnimationUsingKeyFrames>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.IPointAnimationUsingKeyFramesMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Media.Animation.PointAnimationUsingKeyFrames obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.IPointAnimationUsingKeyFramesMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Media.Animation.PointAnimationUsingKeyFrames FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Media.Animation.PointAnimationUsingKeyFrames.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Media.Animation.PointAnimationUsingKeyFrames obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.PointAnimationUsingKeyFrames>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Media.Animation.PointAnimationUsingKeyFrames[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.PointAnimationUsingKeyFrames>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.PointAnimationUsingKeyFrames>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Media.Animation.PointAnimationUsingKeyFrames[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.PointAnimationUsingKeyFrames>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Media.Animation.PointAnimationUsingKeyFrames[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.PointAnimationUsingKeyFrames>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Media.Animation.PointAnimationUsingKeyFrames[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.PointAnimationUsingKeyFrames>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.PointAnimationUsingKeyFrames>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.PointAnimationUsingKeyFrames>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class PointAnimationUsingKeyFramesRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Media.Animation.PointAnimationUsingKeyFrames(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct PointKeyFrame
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Media.Animation.PointKeyFrame obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Media.Animation.PointKeyFrame>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.IPointKeyFrameMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Media.Animation.PointKeyFrame obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.IPointKeyFrameMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Media.Animation.PointKeyFrame FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Media.Animation.PointKeyFrame.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Media.Animation.PointKeyFrame obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.PointKeyFrame>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Media.Animation.PointKeyFrame[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.PointKeyFrame>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.PointKeyFrame>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Media.Animation.PointKeyFrame[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.PointKeyFrame>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Media.Animation.PointKeyFrame[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.PointKeyFrame>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Media.Animation.PointKeyFrame[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.PointKeyFrame>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.PointKeyFrame>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.PointKeyFrame>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class PointKeyFrameRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Media.Animation.PointKeyFrame(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct PointKeyFrameCollection
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Media.Animation.PointKeyFrameCollection obj) => obj is null ? null : MarshalInterface<global::System.Collections.Generic.IList<global::Microsoft.UI.Xaml.Media.Animation.PointKeyFrame>>.CreateMarshaler(obj);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Media.Animation.PointKeyFrameCollection obj) => MarshalInterface<global::System.Collections.Generic.IList<global::Microsoft.UI.Xaml.Media.Animation.PointKeyFrame>>.CreateMarshaler2(obj, global::ABI.System.Collections.Generic.IListMethods<global::Microsoft.UI.Xaml.Media.Animation.PointKeyFrame>.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Media.Animation.PointKeyFrameCollection FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Media.Animation.PointKeyFrameCollection.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Media.Animation.PointKeyFrameCollection obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.PointKeyFrameCollection>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Media.Animation.PointKeyFrameCollection[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.PointKeyFrameCollection>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.PointKeyFrameCollection>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Media.Animation.PointKeyFrameCollection[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.PointKeyFrameCollection>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Media.Animation.PointKeyFrameCollection[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.PointKeyFrameCollection>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Media.Animation.PointKeyFrameCollection[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.PointKeyFrameCollection>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.PointKeyFrameCollection>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.PointKeyFrameCollection>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class PointKeyFrameCollectionRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Media.Animation.PointKeyFrameCollection(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct PointerDownThemeAnimation
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Media.Animation.PointerDownThemeAnimation obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Media.Animation.PointerDownThemeAnimation>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.IPointerDownThemeAnimationMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Media.Animation.PointerDownThemeAnimation obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.IPointerDownThemeAnimationMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Media.Animation.PointerDownThemeAnimation FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Media.Animation.PointerDownThemeAnimation.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Media.Animation.PointerDownThemeAnimation obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.PointerDownThemeAnimation>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Media.Animation.PointerDownThemeAnimation[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.PointerDownThemeAnimation>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.PointerDownThemeAnimation>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Media.Animation.PointerDownThemeAnimation[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.PointerDownThemeAnimation>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Media.Animation.PointerDownThemeAnimation[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.PointerDownThemeAnimation>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Media.Animation.PointerDownThemeAnimation[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.PointerDownThemeAnimation>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.PointerDownThemeAnimation>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.PointerDownThemeAnimation>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class PointerDownThemeAnimationRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Media.Animation.PointerDownThemeAnimation(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct PointerUpThemeAnimation
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Media.Animation.PointerUpThemeAnimation obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Media.Animation.PointerUpThemeAnimation>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.IPointerUpThemeAnimationMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Media.Animation.PointerUpThemeAnimation obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.IPointerUpThemeAnimationMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Media.Animation.PointerUpThemeAnimation FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Media.Animation.PointerUpThemeAnimation.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Media.Animation.PointerUpThemeAnimation obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.PointerUpThemeAnimation>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Media.Animation.PointerUpThemeAnimation[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.PointerUpThemeAnimation>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.PointerUpThemeAnimation>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Media.Animation.PointerUpThemeAnimation[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.PointerUpThemeAnimation>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Media.Animation.PointerUpThemeAnimation[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.PointerUpThemeAnimation>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Media.Animation.PointerUpThemeAnimation[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.PointerUpThemeAnimation>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.PointerUpThemeAnimation>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.PointerUpThemeAnimation>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class PointerUpThemeAnimationRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Media.Animation.PointerUpThemeAnimation(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct PopInThemeAnimation
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Media.Animation.PopInThemeAnimation obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Media.Animation.PopInThemeAnimation>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.IPopInThemeAnimationMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Media.Animation.PopInThemeAnimation obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.IPopInThemeAnimationMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Media.Animation.PopInThemeAnimation FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Media.Animation.PopInThemeAnimation.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Media.Animation.PopInThemeAnimation obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.PopInThemeAnimation>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Media.Animation.PopInThemeAnimation[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.PopInThemeAnimation>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.PopInThemeAnimation>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Media.Animation.PopInThemeAnimation[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.PopInThemeAnimation>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Media.Animation.PopInThemeAnimation[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.PopInThemeAnimation>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Media.Animation.PopInThemeAnimation[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.PopInThemeAnimation>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.PopInThemeAnimation>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.PopInThemeAnimation>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class PopInThemeAnimationRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Media.Animation.PopInThemeAnimation(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct PopOutThemeAnimation
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Media.Animation.PopOutThemeAnimation obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Media.Animation.PopOutThemeAnimation>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.IPopOutThemeAnimationMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Media.Animation.PopOutThemeAnimation obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.IPopOutThemeAnimationMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Media.Animation.PopOutThemeAnimation FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Media.Animation.PopOutThemeAnimation.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Media.Animation.PopOutThemeAnimation obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.PopOutThemeAnimation>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Media.Animation.PopOutThemeAnimation[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.PopOutThemeAnimation>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.PopOutThemeAnimation>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Media.Animation.PopOutThemeAnimation[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.PopOutThemeAnimation>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Media.Animation.PopOutThemeAnimation[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.PopOutThemeAnimation>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Media.Animation.PopOutThemeAnimation[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.PopOutThemeAnimation>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.PopOutThemeAnimation>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.PopOutThemeAnimation>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class PopOutThemeAnimationRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Media.Animation.PopOutThemeAnimation(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct PopupThemeTransition
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Media.Animation.PopupThemeTransition obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Media.Animation.PopupThemeTransition>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.IPopupThemeTransitionMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Media.Animation.PopupThemeTransition obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.IPopupThemeTransitionMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Media.Animation.PopupThemeTransition FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Media.Animation.PopupThemeTransition.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Media.Animation.PopupThemeTransition obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.PopupThemeTransition>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Media.Animation.PopupThemeTransition[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.PopupThemeTransition>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.PopupThemeTransition>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Media.Animation.PopupThemeTransition[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.PopupThemeTransition>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Media.Animation.PopupThemeTransition[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.PopupThemeTransition>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Media.Animation.PopupThemeTransition[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.PopupThemeTransition>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.PopupThemeTransition>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.PopupThemeTransition>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class PopupThemeTransitionRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Media.Animation.PopupThemeTransition(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct PowerEase
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Media.Animation.PowerEase obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Media.Animation.PowerEase>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.IPowerEaseMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Media.Animation.PowerEase obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.IPowerEaseMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Media.Animation.PowerEase FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Media.Animation.PowerEase.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Media.Animation.PowerEase obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.PowerEase>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Media.Animation.PowerEase[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.PowerEase>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.PowerEase>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Media.Animation.PowerEase[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.PowerEase>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Media.Animation.PowerEase[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.PowerEase>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Media.Animation.PowerEase[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.PowerEase>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.PowerEase>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.PowerEase>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class PowerEaseRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Media.Animation.PowerEase(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct QuadraticEase
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Media.Animation.QuadraticEase obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Media.Animation.QuadraticEase>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.IQuadraticEaseMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Media.Animation.QuadraticEase obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.IQuadraticEaseMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Media.Animation.QuadraticEase FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Media.Animation.QuadraticEase.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Media.Animation.QuadraticEase obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.QuadraticEase>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Media.Animation.QuadraticEase[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.QuadraticEase>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.QuadraticEase>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Media.Animation.QuadraticEase[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.QuadraticEase>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Media.Animation.QuadraticEase[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.QuadraticEase>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Media.Animation.QuadraticEase[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.QuadraticEase>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.QuadraticEase>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.QuadraticEase>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class QuadraticEaseRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Media.Animation.QuadraticEase(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct QuarticEase
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Media.Animation.QuarticEase obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Media.Animation.QuarticEase>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.IQuarticEaseMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Media.Animation.QuarticEase obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.IQuarticEaseMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Media.Animation.QuarticEase FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Media.Animation.QuarticEase.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Media.Animation.QuarticEase obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.QuarticEase>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Media.Animation.QuarticEase[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.QuarticEase>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.QuarticEase>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Media.Animation.QuarticEase[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.QuarticEase>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Media.Animation.QuarticEase[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.QuarticEase>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Media.Animation.QuarticEase[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.QuarticEase>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.QuarticEase>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.QuarticEase>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class QuarticEaseRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Media.Animation.QuarticEase(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct QuinticEase
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Media.Animation.QuinticEase obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Media.Animation.QuinticEase>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.IQuinticEaseMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Media.Animation.QuinticEase obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.IQuinticEaseMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Media.Animation.QuinticEase FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Media.Animation.QuinticEase.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Media.Animation.QuinticEase obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.QuinticEase>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Media.Animation.QuinticEase[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.QuinticEase>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.QuinticEase>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Media.Animation.QuinticEase[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.QuinticEase>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Media.Animation.QuinticEase[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.QuinticEase>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Media.Animation.QuinticEase[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.QuinticEase>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.QuinticEase>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.QuinticEase>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class QuinticEaseRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Media.Animation.QuinticEase(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct ReorderThemeTransition
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Media.Animation.ReorderThemeTransition obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Media.Animation.ReorderThemeTransition>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.IReorderThemeTransitionMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Media.Animation.ReorderThemeTransition obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.IReorderThemeTransitionMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Media.Animation.ReorderThemeTransition FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Media.Animation.ReorderThemeTransition.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Media.Animation.ReorderThemeTransition obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.ReorderThemeTransition>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Media.Animation.ReorderThemeTransition[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.ReorderThemeTransition>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.ReorderThemeTransition>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Media.Animation.ReorderThemeTransition[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.ReorderThemeTransition>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Media.Animation.ReorderThemeTransition[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.ReorderThemeTransition>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Media.Animation.ReorderThemeTransition[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.ReorderThemeTransition>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.ReorderThemeTransition>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.ReorderThemeTransition>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class ReorderThemeTransitionRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Media.Animation.ReorderThemeTransition(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct RepositionThemeAnimation
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Media.Animation.RepositionThemeAnimation obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Media.Animation.RepositionThemeAnimation>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.IRepositionThemeAnimationMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Media.Animation.RepositionThemeAnimation obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.IRepositionThemeAnimationMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Media.Animation.RepositionThemeAnimation FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Media.Animation.RepositionThemeAnimation.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Media.Animation.RepositionThemeAnimation obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.RepositionThemeAnimation>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Media.Animation.RepositionThemeAnimation[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.RepositionThemeAnimation>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.RepositionThemeAnimation>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Media.Animation.RepositionThemeAnimation[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.RepositionThemeAnimation>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Media.Animation.RepositionThemeAnimation[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.RepositionThemeAnimation>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Media.Animation.RepositionThemeAnimation[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.RepositionThemeAnimation>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.RepositionThemeAnimation>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.RepositionThemeAnimation>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class RepositionThemeAnimationRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Media.Animation.RepositionThemeAnimation(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct RepositionThemeTransition
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Media.Animation.RepositionThemeTransition obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Media.Animation.RepositionThemeTransition>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.IRepositionThemeTransitionMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Media.Animation.RepositionThemeTransition obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.IRepositionThemeTransitionMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Media.Animation.RepositionThemeTransition FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Media.Animation.RepositionThemeTransition.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Media.Animation.RepositionThemeTransition obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.RepositionThemeTransition>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Media.Animation.RepositionThemeTransition[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.RepositionThemeTransition>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.RepositionThemeTransition>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Media.Animation.RepositionThemeTransition[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.RepositionThemeTransition>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Media.Animation.RepositionThemeTransition[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.RepositionThemeTransition>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Media.Animation.RepositionThemeTransition[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.RepositionThemeTransition>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.RepositionThemeTransition>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.RepositionThemeTransition>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class RepositionThemeTransitionRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Media.Animation.RepositionThemeTransition(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct SineEase
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Media.Animation.SineEase obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Media.Animation.SineEase>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.ISineEaseMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Media.Animation.SineEase obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.ISineEaseMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Media.Animation.SineEase FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Media.Animation.SineEase.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Media.Animation.SineEase obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.SineEase>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Media.Animation.SineEase[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.SineEase>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.SineEase>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Media.Animation.SineEase[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.SineEase>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Media.Animation.SineEase[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.SineEase>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Media.Animation.SineEase[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.SineEase>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.SineEase>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.SineEase>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class SineEaseRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Media.Animation.SineEase(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct SlideNavigationTransitionInfo
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Media.Animation.SlideNavigationTransitionInfo obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Media.Animation.SlideNavigationTransitionInfo>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.ISlideNavigationTransitionInfoMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Media.Animation.SlideNavigationTransitionInfo obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.ISlideNavigationTransitionInfoMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Media.Animation.SlideNavigationTransitionInfo FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Media.Animation.SlideNavigationTransitionInfo.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Media.Animation.SlideNavigationTransitionInfo obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.SlideNavigationTransitionInfo>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Media.Animation.SlideNavigationTransitionInfo[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.SlideNavigationTransitionInfo>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.SlideNavigationTransitionInfo>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Media.Animation.SlideNavigationTransitionInfo[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.SlideNavigationTransitionInfo>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Media.Animation.SlideNavigationTransitionInfo[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.SlideNavigationTransitionInfo>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Media.Animation.SlideNavigationTransitionInfo[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.SlideNavigationTransitionInfo>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.SlideNavigationTransitionInfo>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.SlideNavigationTransitionInfo>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class SlideNavigationTransitionInfoRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Media.Animation.SlideNavigationTransitionInfo(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct SplineColorKeyFrame
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Media.Animation.SplineColorKeyFrame obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Media.Animation.SplineColorKeyFrame>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.ISplineColorKeyFrameMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Media.Animation.SplineColorKeyFrame obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.ISplineColorKeyFrameMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Media.Animation.SplineColorKeyFrame FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Media.Animation.SplineColorKeyFrame.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Media.Animation.SplineColorKeyFrame obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.SplineColorKeyFrame>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Media.Animation.SplineColorKeyFrame[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.SplineColorKeyFrame>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.SplineColorKeyFrame>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Media.Animation.SplineColorKeyFrame[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.SplineColorKeyFrame>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Media.Animation.SplineColorKeyFrame[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.SplineColorKeyFrame>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Media.Animation.SplineColorKeyFrame[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.SplineColorKeyFrame>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.SplineColorKeyFrame>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.SplineColorKeyFrame>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class SplineColorKeyFrameRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Media.Animation.SplineColorKeyFrame(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct SplineDoubleKeyFrame
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Media.Animation.SplineDoubleKeyFrame obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Media.Animation.SplineDoubleKeyFrame>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.ISplineDoubleKeyFrameMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Media.Animation.SplineDoubleKeyFrame obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.ISplineDoubleKeyFrameMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Media.Animation.SplineDoubleKeyFrame FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Media.Animation.SplineDoubleKeyFrame.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Media.Animation.SplineDoubleKeyFrame obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.SplineDoubleKeyFrame>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Media.Animation.SplineDoubleKeyFrame[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.SplineDoubleKeyFrame>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.SplineDoubleKeyFrame>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Media.Animation.SplineDoubleKeyFrame[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.SplineDoubleKeyFrame>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Media.Animation.SplineDoubleKeyFrame[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.SplineDoubleKeyFrame>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Media.Animation.SplineDoubleKeyFrame[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.SplineDoubleKeyFrame>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.SplineDoubleKeyFrame>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.SplineDoubleKeyFrame>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class SplineDoubleKeyFrameRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Media.Animation.SplineDoubleKeyFrame(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct SplinePointKeyFrame
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Media.Animation.SplinePointKeyFrame obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Media.Animation.SplinePointKeyFrame>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.ISplinePointKeyFrameMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Media.Animation.SplinePointKeyFrame obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.ISplinePointKeyFrameMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Media.Animation.SplinePointKeyFrame FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Media.Animation.SplinePointKeyFrame.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Media.Animation.SplinePointKeyFrame obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.SplinePointKeyFrame>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Media.Animation.SplinePointKeyFrame[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.SplinePointKeyFrame>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.SplinePointKeyFrame>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Media.Animation.SplinePointKeyFrame[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.SplinePointKeyFrame>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Media.Animation.SplinePointKeyFrame[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.SplinePointKeyFrame>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Media.Animation.SplinePointKeyFrame[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.SplinePointKeyFrame>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.SplinePointKeyFrame>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.SplinePointKeyFrame>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class SplinePointKeyFrameRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Media.Animation.SplinePointKeyFrame(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct SplitCloseThemeAnimation
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Media.Animation.SplitCloseThemeAnimation obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Media.Animation.SplitCloseThemeAnimation>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.ISplitCloseThemeAnimationMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Media.Animation.SplitCloseThemeAnimation obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.ISplitCloseThemeAnimationMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Media.Animation.SplitCloseThemeAnimation FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Media.Animation.SplitCloseThemeAnimation.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Media.Animation.SplitCloseThemeAnimation obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.SplitCloseThemeAnimation>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Media.Animation.SplitCloseThemeAnimation[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.SplitCloseThemeAnimation>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.SplitCloseThemeAnimation>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Media.Animation.SplitCloseThemeAnimation[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.SplitCloseThemeAnimation>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Media.Animation.SplitCloseThemeAnimation[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.SplitCloseThemeAnimation>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Media.Animation.SplitCloseThemeAnimation[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.SplitCloseThemeAnimation>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.SplitCloseThemeAnimation>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.SplitCloseThemeAnimation>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class SplitCloseThemeAnimationRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Media.Animation.SplitCloseThemeAnimation(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct SplitOpenThemeAnimation
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Media.Animation.SplitOpenThemeAnimation obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Media.Animation.SplitOpenThemeAnimation>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.ISplitOpenThemeAnimationMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Media.Animation.SplitOpenThemeAnimation obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.ISplitOpenThemeAnimationMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Media.Animation.SplitOpenThemeAnimation FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Media.Animation.SplitOpenThemeAnimation.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Media.Animation.SplitOpenThemeAnimation obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.SplitOpenThemeAnimation>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Media.Animation.SplitOpenThemeAnimation[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.SplitOpenThemeAnimation>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.SplitOpenThemeAnimation>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Media.Animation.SplitOpenThemeAnimation[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.SplitOpenThemeAnimation>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Media.Animation.SplitOpenThemeAnimation[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.SplitOpenThemeAnimation>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Media.Animation.SplitOpenThemeAnimation[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.SplitOpenThemeAnimation>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.SplitOpenThemeAnimation>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.SplitOpenThemeAnimation>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class SplitOpenThemeAnimationRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Media.Animation.SplitOpenThemeAnimation(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct Storyboard
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Media.Animation.Storyboard obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Media.Animation.Storyboard>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.IStoryboardMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Media.Animation.Storyboard obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.IStoryboardMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Media.Animation.Storyboard FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Media.Animation.Storyboard.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Media.Animation.Storyboard obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.Storyboard>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Media.Animation.Storyboard[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.Storyboard>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.Storyboard>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Media.Animation.Storyboard[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.Storyboard>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Media.Animation.Storyboard[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.Storyboard>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Media.Animation.Storyboard[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.Storyboard>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.Storyboard>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.Storyboard>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class StoryboardRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Media.Animation.Storyboard(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct SuppressNavigationTransitionInfo
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Media.Animation.SuppressNavigationTransitionInfo obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Media.Animation.SuppressNavigationTransitionInfo>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.ISuppressNavigationTransitionInfoMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Media.Animation.SuppressNavigationTransitionInfo obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.ISuppressNavigationTransitionInfoMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Media.Animation.SuppressNavigationTransitionInfo FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Media.Animation.SuppressNavigationTransitionInfo.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Media.Animation.SuppressNavigationTransitionInfo obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.SuppressNavigationTransitionInfo>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Media.Animation.SuppressNavigationTransitionInfo[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.SuppressNavigationTransitionInfo>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.SuppressNavigationTransitionInfo>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Media.Animation.SuppressNavigationTransitionInfo[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.SuppressNavigationTransitionInfo>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Media.Animation.SuppressNavigationTransitionInfo[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.SuppressNavigationTransitionInfo>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Media.Animation.SuppressNavigationTransitionInfo[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.SuppressNavigationTransitionInfo>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.SuppressNavigationTransitionInfo>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.SuppressNavigationTransitionInfo>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class SuppressNavigationTransitionInfoRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Media.Animation.SuppressNavigationTransitionInfo(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct SwipeBackThemeAnimation
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Media.Animation.SwipeBackThemeAnimation obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Media.Animation.SwipeBackThemeAnimation>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.ISwipeBackThemeAnimationMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Media.Animation.SwipeBackThemeAnimation obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.ISwipeBackThemeAnimationMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Media.Animation.SwipeBackThemeAnimation FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Media.Animation.SwipeBackThemeAnimation.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Media.Animation.SwipeBackThemeAnimation obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.SwipeBackThemeAnimation>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Media.Animation.SwipeBackThemeAnimation[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.SwipeBackThemeAnimation>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.SwipeBackThemeAnimation>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Media.Animation.SwipeBackThemeAnimation[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.SwipeBackThemeAnimation>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Media.Animation.SwipeBackThemeAnimation[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.SwipeBackThemeAnimation>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Media.Animation.SwipeBackThemeAnimation[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.SwipeBackThemeAnimation>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.SwipeBackThemeAnimation>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.SwipeBackThemeAnimation>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class SwipeBackThemeAnimationRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Media.Animation.SwipeBackThemeAnimation(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct SwipeHintThemeAnimation
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Media.Animation.SwipeHintThemeAnimation obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Media.Animation.SwipeHintThemeAnimation>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.ISwipeHintThemeAnimationMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Media.Animation.SwipeHintThemeAnimation obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.ISwipeHintThemeAnimationMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Media.Animation.SwipeHintThemeAnimation FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Media.Animation.SwipeHintThemeAnimation.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Media.Animation.SwipeHintThemeAnimation obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.SwipeHintThemeAnimation>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Media.Animation.SwipeHintThemeAnimation[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.SwipeHintThemeAnimation>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.SwipeHintThemeAnimation>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Media.Animation.SwipeHintThemeAnimation[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.SwipeHintThemeAnimation>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Media.Animation.SwipeHintThemeAnimation[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.SwipeHintThemeAnimation>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Media.Animation.SwipeHintThemeAnimation[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.SwipeHintThemeAnimation>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.SwipeHintThemeAnimation>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.SwipeHintThemeAnimation>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class SwipeHintThemeAnimationRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Media.Animation.SwipeHintThemeAnimation(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct Timeline
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Media.Animation.Timeline obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Media.Animation.Timeline>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.ITimelineMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Media.Animation.Timeline obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.ITimelineMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Media.Animation.Timeline FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Media.Animation.Timeline.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Media.Animation.Timeline obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.Timeline>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Media.Animation.Timeline[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.Timeline>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.Timeline>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Media.Animation.Timeline[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.Timeline>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Media.Animation.Timeline[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.Timeline>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Media.Animation.Timeline[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.Timeline>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.Timeline>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.Timeline>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class TimelineRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Media.Animation.Timeline(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct TimelineCollection
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Media.Animation.TimelineCollection obj) => obj is null ? null : MarshalInterface<global::System.Collections.Generic.IList<global::Microsoft.UI.Xaml.Media.Animation.Timeline>>.CreateMarshaler(obj);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Media.Animation.TimelineCollection obj) => MarshalInterface<global::System.Collections.Generic.IList<global::Microsoft.UI.Xaml.Media.Animation.Timeline>>.CreateMarshaler2(obj, global::ABI.System.Collections.Generic.IListMethods<global::Microsoft.UI.Xaml.Media.Animation.Timeline>.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Media.Animation.TimelineCollection FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Media.Animation.TimelineCollection.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Media.Animation.TimelineCollection obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.TimelineCollection>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Media.Animation.TimelineCollection[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.TimelineCollection>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.TimelineCollection>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Media.Animation.TimelineCollection[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.TimelineCollection>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Media.Animation.TimelineCollection[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.TimelineCollection>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Media.Animation.TimelineCollection[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.TimelineCollection>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.TimelineCollection>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.TimelineCollection>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class TimelineCollectionRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Media.Animation.TimelineCollection(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct Transition
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Media.Animation.Transition obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Media.Animation.Transition>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.ITransitionMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Media.Animation.Transition obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Media.Animation.ITransitionMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Media.Animation.Transition FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Media.Animation.Transition.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Media.Animation.Transition obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.Transition>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Media.Animation.Transition[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.Transition>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.Transition>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Media.Animation.Transition[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.Transition>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Media.Animation.Transition[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.Transition>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Media.Animation.Transition[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.Transition>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.Transition>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.Transition>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class TransitionRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Media.Animation.Transition(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct TransitionCollection
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Media.Animation.TransitionCollection obj) => obj is null ? null : MarshalInterface<global::System.Collections.Generic.IList<global::Microsoft.UI.Xaml.Media.Animation.Transition>>.CreateMarshaler(obj);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Media.Animation.TransitionCollection obj) => MarshalInterface<global::System.Collections.Generic.IList<global::Microsoft.UI.Xaml.Media.Animation.Transition>>.CreateMarshaler2(obj, global::ABI.System.Collections.Generic.IListMethods<global::Microsoft.UI.Xaml.Media.Animation.Transition>.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Media.Animation.TransitionCollection FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Media.Animation.TransitionCollection.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Media.Animation.TransitionCollection obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.TransitionCollection>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Media.Animation.TransitionCollection[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.TransitionCollection>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.TransitionCollection>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Media.Animation.TransitionCollection[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.TransitionCollection>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Media.Animation.TransitionCollection[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.TransitionCollection>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Media.Animation.TransitionCollection[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.TransitionCollection>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.TransitionCollection>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Animation.TransitionCollection>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class TransitionCollectionRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Media.Animation.TransitionCollection(inspectable.ObjRef);
    }
}
#pragma warning restore CA1416


namespace Microsoft.UI.Xaml.Media.Animation
{
    using global::Windows.Foundation;

    [global::WinRT.WindowsRuntimeType("Microsoft.UI")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.KeyTime))]
#if NET
    [global::WinRT.WinRTExposedType(typeof(global::WinRT.StructTypeDetails<KeyTime, KeyTime>))]
#endif
    [StructLayout(LayoutKind.Sequential)]
#if EMBED
    internal
#else
    public
#endif
    struct KeyTime
    {
        private TimeSpan _timeSpan;

        public static KeyTime FromTimeSpan(TimeSpan timeSpan)
        {
            if (timeSpan < TimeSpan.Zero)
            {
                throw new ArgumentOutOfRangeException(nameof(timeSpan));
            }

            KeyTime keyTime = default;

            keyTime._timeSpan = timeSpan;

            return keyTime;
        }

        public static bool Equals(KeyTime keyTime1, KeyTime keyTime2)
        {
            return (keyTime1._timeSpan == keyTime2._timeSpan);
        }

        public static bool operator ==(KeyTime keyTime1, KeyTime keyTime2)
        {
            return KeyTime.Equals(keyTime1, keyTime2);
        }

        public static bool operator !=(KeyTime keyTime1, KeyTime keyTime2)
        {
            return !KeyTime.Equals(keyTime1, keyTime2);
        }

        public bool Equals(KeyTime value)
        {
            return KeyTime.Equals(this, value);
        }

        public override bool Equals(object value)
        {
            return value is KeyTime && this == (KeyTime)value;
        }

        public override int GetHashCode()
        {
            return _timeSpan.GetHashCode();
        }

        public override string ToString()
        {
            return _timeSpan.ToString();
        }

        public static implicit operator KeyTime(TimeSpan timeSpan)
        {
            return KeyTime.FromTimeSpan(timeSpan);
        }

        public TimeSpan TimeSpan
        {
            get
            {
                return _timeSpan;
            }
        }
    }

    [global::WinRT.WindowsRuntimeType("Microsoft.UI")]
#if NET
    [global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<RepeatBehaviorType>))]
#endif
#if EMBED
    internal
#else
    public
#endif
    enum RepeatBehaviorType
    {
        Count,
        Duration,
        Forever
    }

    [global::WinRT.WindowsRuntimeType("Microsoft.UI")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Animation.RepeatBehavior))]
#if NET
    [global::WinRT.WinRTExposedType(typeof(global::WinRT.StructTypeDetails<RepeatBehavior, RepeatBehavior>))]
#endif
    [StructLayout(LayoutKind.Sequential)]
#if EMBED
    internal
#else
    public
#endif
    struct RepeatBehavior : IFormattable
    {
        private double _Count;
        private TimeSpan _Duration;
        private RepeatBehaviorType _Type;

        internal static bool IsFinite(double value)
        {
            return !(double.IsNaN(value) || double.IsInfinity(value));
        }

        public RepeatBehavior(double count)
        {
            if (!IsFinite(count) || count < 0.0)
            {
                throw new ArgumentOutOfRangeException(nameof(count));
            }

            _Duration = new TimeSpan(0);
            _Count = count;
            _Type = RepeatBehaviorType.Count;
        }

        public RepeatBehavior(TimeSpan duration)
        {
            if (duration < new TimeSpan(0))
            {
                throw new ArgumentOutOfRangeException(nameof(duration));
            }

            _Duration = duration;
            _Count = 0.0;
            _Type = RepeatBehaviorType.Duration;
        }

        public static RepeatBehavior Forever
        {
            get
            {
                RepeatBehavior forever = default;
                forever.Type = RepeatBehaviorType.Forever;

                return forever;
            }
        }

        public bool HasCount
        {
            get
            {
                return Type == RepeatBehaviorType.Count;
            }
        }

        public bool HasDuration
        {
            get
            {
                return Type == RepeatBehaviorType.Duration;
            }
        }

        public double Count
        {
            get { return _Count; }
            set { _Count = value; }
        }

        public TimeSpan Duration
        {
            get { return _Duration; }
            set { _Duration = value; }
        }

        public RepeatBehaviorType Type
        {
            get { return _Type; }
            set { _Type = value; }
        }

        public override string ToString()
        {
            return InternalToString(null, null);
        }

        public string ToString(IFormatProvider formatProvider)
        {
            return InternalToString(null, formatProvider);
        }

        string IFormattable.ToString(string format, IFormatProvider formatProvider)
        {
            return InternalToString(format, formatProvider);
        }

        internal string InternalToString(string format, IFormatProvider formatProvider)
        {
            switch (_Type)
            {
                case RepeatBehaviorType.Forever:

                    return "Forever";

                case RepeatBehaviorType.Count:

                    global::System.Text.StringBuilder sb = new global::System.Text.StringBuilder();

                    sb.AppendFormat(
                        formatProvider,
                        "{0:" + format + "}x",
                        _Count);

                    return sb.ToString();

                case RepeatBehaviorType.Duration:

                    return _Duration.ToString();

                default:
                    return string.Empty;
            }
        }

        public override bool Equals(object value)
        {
            if (value is RepeatBehavior)
            {
                return this.Equals((RepeatBehavior)value);
            }
            else
            {
                return false;
            }
        }

        public bool Equals(RepeatBehavior repeatBehavior)
        {
            if (_Type == repeatBehavior._Type)
            {
                return _Type switch
                {
                    RepeatBehaviorType.Forever => true,
                    RepeatBehaviorType.Count => _Count == repeatBehavior._Count,
                    RepeatBehaviorType.Duration => _Duration == repeatBehavior._Duration,
                    _ => false,
                };
            }
            else
            {
                return false;
            }
        }

        public static bool Equals(RepeatBehavior repeatBehavior1, RepeatBehavior repeatBehavior2)
        {
            return repeatBehavior1.Equals(repeatBehavior2);
        }

        public override int GetHashCode()
        {
            return _Type switch
            {
                RepeatBehaviorType.Count => _Count.GetHashCode(),
                RepeatBehaviorType.Duration => _Duration.GetHashCode(),

                // We try to choose an unlikely hash code value for Forever.
                // All Forevers need to return the same hash code value.
                RepeatBehaviorType.Forever => int.MaxValue - 42,

                _ => base.GetHashCode(),
            };
        }

        public static bool operator ==(RepeatBehavior repeatBehavior1, RepeatBehavior repeatBehavior2)
        {
            return repeatBehavior1.Equals(repeatBehavior2);
        }

        public static bool operator !=(RepeatBehavior repeatBehavior1, RepeatBehavior repeatBehavior2)
        {
            return !repeatBehavior1.Equals(repeatBehavior2);
        }
    }
}

namespace ABI.Microsoft.UI.Xaml.Media.Animation
{
    #if EMBED
        internal
    #else
        public
    #endif
        static class KeyTime
        {
            public static string GetGuidSignature()
            {
                string timeSpanSignature = global::WinRT.GuidGenerator.GetSignature(typeof(global::System.TimeSpan));
                return $"struct(Microsoft.UI.Xaml.Media.Animation.KeyTime;{timeSpanSignature})";
            }
        }

    #if EMBED
        internal
    #else
        public
    #endif
        static class RepeatBehavior
        {
            public static string GetGuidSignature()
            {
                string timeSpanSignature = global::WinRT.GuidGenerator.GetSignature(typeof(global::System.TimeSpan));
                return $"struct(Microsoft.UI.Xaml.Media.Animation.RepeatBehavior;f8;{timeSpanSignature};{RepeatBehaviorType.GetGuidSignature()})";
            }
        }

    #if EMBED
        internal
    #else
        public
    #endif
        static class RepeatBehaviorType
        {
            public static string GetGuidSignature() => "enum(Microsoft.UI.Xaml.Media.Animation.RepeatBehaviorType;i4)";
        }
}
