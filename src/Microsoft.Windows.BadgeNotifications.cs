//------------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by cswinrt.exe version 2.2.0.241111.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq.Expressions;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using WinRT;
using WinRT.Interop;


#pragma warning disable 0169 // warning CS0169: The field '...' is never used
#pragma warning disable 0649 // warning CS0169: Field '...' is never assigned to
#pragma warning disable CA2207, CA1063, CA1033, CA1001, CA2213

namespace Microsoft.Windows.BadgeNotifications
{
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.BadgeNotifications")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<BadgeNotificationGlyph>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(BadgeNotificationsContract), 65536u)]
    public enum BadgeNotificationGlyph : int
    {
        None = unchecked((int)0),
        Activity = unchecked((int)0x1),
        Alarm = unchecked((int)0x2),
        Alert = unchecked((int)0x3),
        Attention = unchecked((int)0x4),
        Available = unchecked((int)0x5),
        Away = unchecked((int)0x6),
        Busy = unchecked((int)0x7),
        Error = unchecked((int)0x8),
        NewMessage = unchecked((int)0x9),
        Paused = unchecked((int)0xa),
        Playing = unchecked((int)0xb),
        Unavailable = unchecked((int)0xc),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.BadgeNotifications")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.BadgeNotifications.BadgeNotificationManager))]
    [global::ABI.Microsoft.Windows.BadgeNotifications.BadgeNotificationManagerRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IBadgeNotificationManager))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(BadgeNotificationsContract), 65536u)]
    public sealed class BadgeNotificationManager : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<BadgeNotificationManager>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_Windows_BadgeNotifications_IBadgeNotificationManager => _inner;


        public static I As<I>() => ActivationFactory.Get("Microsoft.Windows.BadgeNotifications.BadgeNotificationManager").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_Windows_BadgeNotifications_IBadgeNotificationManagerStatics;
        private static IObjectReference _objRef_global__Microsoft_Windows_BadgeNotifications_IBadgeNotificationManagerStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_Windows_BadgeNotifications_IBadgeNotificationManagerStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_Windows_BadgeNotifications_IBadgeNotificationManagerStatics = ActivationFactory.Get("Microsoft.Windows.BadgeNotifications.BadgeNotificationManager", global::ABI.Microsoft.Windows.BadgeNotifications.IBadgeNotificationManagerStaticsMethods.IID);
                }
            }
        }

        public static BadgeNotificationManager Current => global::ABI.Microsoft.Windows.BadgeNotifications.IBadgeNotificationManagerStaticsMethods.get_Current(_objRef_global__Microsoft_Windows_BadgeNotifications_IBadgeNotificationManagerStatics);

        public static BadgeNotificationManager FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<BadgeNotificationManager>.FromAbi(thisPtr);
        }

        internal BadgeNotificationManager(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.Windows.BadgeNotifications.IBadgeNotificationManagerMethods.IID);

        }


        public static bool operator ==(BadgeNotificationManager x, BadgeNotificationManager y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(BadgeNotificationManager x, BadgeNotificationManager y) => !(x == y);
        public bool Equals(BadgeNotificationManager other) => this == other;
        public override bool Equals(object obj) => obj is BadgeNotificationManager that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public void SetBadgeAsCount(uint notificationCount) => global::ABI.Microsoft.Windows.BadgeNotifications.IBadgeNotificationManagerMethods.SetBadgeAsCount(_objRef_global__Microsoft_Windows_BadgeNotifications_IBadgeNotificationManager, notificationCount);

        public void SetBadgeAsGlyph(BadgeNotificationGlyph glyphValue) => global::ABI.Microsoft.Windows.BadgeNotifications.IBadgeNotificationManagerMethods.SetBadgeAsGlyph(_objRef_global__Microsoft_Windows_BadgeNotifications_IBadgeNotificationManager, glyphValue);

        public void ClearBadge() => global::ABI.Microsoft.Windows.BadgeNotifications.IBadgeNotificationManagerMethods.ClearBadge(_objRef_global__Microsoft_Windows_BadgeNotifications_IBadgeNotificationManager);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::Windows.Foundation.Metadata.ContractVersion(65536u)]
    public enum BadgeNotificationsContract
    {
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.BadgeNotifications")][Guid("11CB6E8F-11CA-53F8-80F6-5330D44BA908")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.BadgeNotifications.IBadgeNotificationManager))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(BadgeNotificationsContract), 65536u)]
    internal interface IBadgeNotificationManager
    {
        void SetBadgeAsCount(uint notificationCount);
        void SetBadgeAsGlyph(BadgeNotificationGlyph glyphValue);
        void ClearBadge();
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.BadgeNotifications")][Guid("A6E71616-7C9F-5D22-AD1C-F4AB874087B5")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.BadgeNotifications.IBadgeNotificationManagerStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(BadgeNotificationsContract), 65536u)]
    internal interface IBadgeNotificationManagerStatics
    {
        BadgeNotificationManager Current { get; }
    }
}

#pragma warning disable CA1416
namespace ABI.Microsoft.Windows.BadgeNotifications
{
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct BadgeNotificationManager
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.Windows.BadgeNotifications.BadgeNotificationManager obj) => obj is null ? null : MarshalInspectable<global::Microsoft.Windows.BadgeNotifications.BadgeNotificationManager>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.Windows.BadgeNotifications.IBadgeNotificationManagerMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.Windows.BadgeNotifications.BadgeNotificationManager obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.Windows.BadgeNotifications.IBadgeNotificationManagerMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.Windows.BadgeNotifications.BadgeNotificationManager FromAbi(IntPtr thisPtr) => global::Microsoft.Windows.BadgeNotifications.BadgeNotificationManager.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.Windows.BadgeNotifications.BadgeNotificationManager obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.Windows.BadgeNotifications.BadgeNotificationManager>.MarshalerArray CreateMarshalerArray(global::Microsoft.Windows.BadgeNotifications.BadgeNotificationManager[] array) => MarshalInterfaceHelper<global::Microsoft.Windows.BadgeNotifications.BadgeNotificationManager>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Windows.BadgeNotifications.BadgeNotificationManager>.GetAbiArray(box);
        public static unsafe global::Microsoft.Windows.BadgeNotifications.BadgeNotificationManager[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Windows.BadgeNotifications.BadgeNotificationManager>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.Windows.BadgeNotifications.BadgeNotificationManager[] array, object box) => MarshalInterfaceHelper<global::Microsoft.Windows.BadgeNotifications.BadgeNotificationManager>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.Windows.BadgeNotifications.BadgeNotificationManager[] array) => MarshalInterfaceHelper<global::Microsoft.Windows.BadgeNotifications.BadgeNotificationManager>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.Windows.BadgeNotifications.BadgeNotificationManager>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.Windows.BadgeNotifications.BadgeNotificationManager>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class BadgeNotificationManagerRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.Windows.BadgeNotifications.BadgeNotificationManager(inspectable.ObjRef);
    }
    internal static class IBadgeNotificationManagerMethods
    {


        internal static unsafe void SetBadgeAsCount(IObjectReference _obj, uint notificationCount)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, uint, int>**)ThisPtr)[6](ThisPtr, notificationCount));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe void SetBadgeAsGlyph(IObjectReference _obj, global::Microsoft.Windows.BadgeNotifications.BadgeNotificationGlyph glyphValue)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Windows.BadgeNotifications.BadgeNotificationGlyph, int>**)ThisPtr)[7](ThisPtr, glyphValue));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe void ClearBadge(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int>**)ThisPtr)[8](ThisPtr));
            global::System.GC.KeepAlive(_obj);
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x8F, 0x6E, 0xCB, 0x11, 0xCA, 0x11, 0xF8, 0x53, 0x80, 0xF6, 0x53, 0x30, 0xD4, 0x4B, 0xA9, 0x8 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("11CB6E8F-11CA-53F8-80F6-5330D44BA908")]
    internal interface IBadgeNotificationManager : global::Microsoft.Windows.BadgeNotifications.IBadgeNotificationManager
    {
    }
    internal static class IBadgeNotificationManagerStaticsMethods
    {

        internal static unsafe global::Microsoft.Windows.BadgeNotifications.BadgeNotificationManager get_Current(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.Windows.BadgeNotifications.BadgeNotificationManager.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.Windows.BadgeNotifications.BadgeNotificationManager.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x16, 0x16, 0xE7, 0xA6, 0x9F, 0x7C, 0x22, 0x5D, 0xAD, 0x1C, 0xF4, 0xAB, 0x87, 0x40, 0x87, 0xB5 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("A6E71616-7C9F-5D22-AD1C-F4AB874087B5")]
    internal interface IBadgeNotificationManagerStatics : global::Microsoft.Windows.BadgeNotifications.IBadgeNotificationManagerStatics
    {
    }
}
#pragma warning restore CA1416
