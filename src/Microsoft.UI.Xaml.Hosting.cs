//------------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by cswinrt.exe version 2.2.0.241111.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq.Expressions;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using WinRT;
using WinRT.Interop;


#pragma warning disable 0169 // warning CS0169: The field '...' is never used
#pragma warning disable 0649 // warning CS0169: Field '...' is never assigned to
#pragma warning disable CA2207, CA1063, CA1033, CA1001, CA2213

namespace Microsoft.UI.Xaml.Hosting
{
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Hosting.DesktopWindowXamlSource))]
    [global::ABI.Microsoft.UI.Xaml.Hosting.DesktopWindowXamlSourceRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IDesktopWindowXamlSource))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 327680u)]
    public class DesktopWindowXamlSource : global::System.IDisposable, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<DesktopWindowXamlSource>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Hosting_IDesktopWindowXamlSource;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_Hosting_IDesktopWindowXamlSource()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_Hosting_IDesktopWindowXamlSource, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.Hosting.IDesktopWindowXamlSourceMethods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_Hosting_IDesktopWindowXamlSource;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Hosting_IDesktopWindowXamlSource => ___objRef_global__Microsoft_UI_Xaml_Hosting_IDesktopWindowXamlSource ?? Make___objRef_global__Microsoft_UI_Xaml_Hosting_IDesktopWindowXamlSource();

        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Hosting_IDesktopWindowXamlSource2;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_Hosting_IDesktopWindowXamlSource2()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_Hosting_IDesktopWindowXamlSource2, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.Hosting.IDesktopWindowXamlSource2Methods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_Hosting_IDesktopWindowXamlSource2;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Hosting_IDesktopWindowXamlSource2 => ___objRef_global__Microsoft_UI_Xaml_Hosting_IDesktopWindowXamlSource2 ?? Make___objRef_global__Microsoft_UI_Xaml_Hosting_IDesktopWindowXamlSource2();

        private volatile IObjectReference ___objRef_global__System_IDisposable;
        private IObjectReference Make___objRef_global__System_IDisposable()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__System_IDisposable, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.System.IDisposableMethods.IID), null);
            return ___objRef_global__System_IDisposable;
        }
        private IObjectReference _objRef_global__System_IDisposable => ___objRef_global__System_IDisposable ?? Make___objRef_global__System_IDisposable();



        private static class _IDesktopWindowXamlSourceFactoryMethods
        {
            public static unsafe IntPtr CreateInstance(IObjectReference _obj, object baseInterface, out IntPtr innerInterface)
            {
                var ThisPtr = _obj.ThisPtr;

                ObjectReferenceValue __baseInterface = default;
                IntPtr __innerInterface = default;
                IntPtr __retval = default;
                try
                {
                    __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                    global::System.GC.KeepAlive(_obj);
                    innerInterface = __innerInterface;
                    return __retval;
                }
                finally
                {
                    MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                }
            }
        }

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Hosting_IDesktopWindowXamlSourceFactory;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Hosting_IDesktopWindowXamlSourceFactory
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Hosting_IDesktopWindowXamlSourceFactory;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Hosting_IDesktopWindowXamlSourceFactory = ActivationFactory.Get("Microsoft.UI.Xaml.Hosting.DesktopWindowXamlSource", global::ABI.Microsoft.UI.Xaml.Hosting.IDesktopWindowXamlSourceFactoryMethods.IID);
                }
            }
        }

        public DesktopWindowXamlSource()
        {
            bool isAggregation = this.GetType() != typeof(DesktopWindowXamlSource);
            object baseInspectable = isAggregation ? this : null;
            IntPtr composed = _IDesktopWindowXamlSourceFactoryMethods.CreateInstance(_objRef_global__Microsoft_UI_Xaml_Hosting_IDesktopWindowXamlSourceFactory,  baseInspectable, out IntPtr inner);
            try
            {
                ComWrappersHelper.Init(isAggregation, this, composed, inner, global::ABI.Microsoft.UI.Xaml.Hosting.IDesktopWindowXamlSourceMethods.IID, out _inner);

            }
            finally
            {
                Marshal.Release(inner);   
            }
        }

        public static DesktopWindowXamlSource FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<DesktopWindowXamlSource>.FromAbi(thisPtr);
        }

        protected internal DesktopWindowXamlSource(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Hosting.IDesktopWindowXamlSourceMethods.IID);

        }


        public static bool operator ==(DesktopWindowXamlSource x, DesktopWindowXamlSource y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(DesktopWindowXamlSource x, DesktopWindowXamlSource y) => !(x == y);
        public bool Equals(DesktopWindowXamlSource other) => this == other;
        public override bool Equals(object obj) => obj is DesktopWindowXamlSource that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        protected DesktopWindowXamlSource(global::WinRT.DerivedComposed _)
        {

        }
        bool IWinRTObject.HasUnwrappableNativeObject => this.GetType() == typeof(DesktopWindowXamlSource);
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public XamlSourceFocusNavigationResult NavigateFocus(XamlSourceFocusNavigationRequest request) => global::ABI.Microsoft.UI.Xaml.Hosting.IDesktopWindowXamlSourceMethods.NavigateFocus(_objRef_global__Microsoft_UI_Xaml_Hosting_IDesktopWindowXamlSource, request);

        public void Initialize(global::Microsoft.UI.WindowId parentWindowId) => global::ABI.Microsoft.UI.Xaml.Hosting.IDesktopWindowXamlSourceMethods.Initialize(_objRef_global__Microsoft_UI_Xaml_Hosting_IDesktopWindowXamlSource, parentWindowId);

        public event global::Windows.Foundation.TypedEventHandler<DesktopWindowXamlSource, DesktopWindowXamlSourceGotFocusEventArgs> GotFocus
        {
            add => global::ABI.Microsoft.UI.Xaml.Hosting.IDesktopWindowXamlSourceMethods.Get_GotFocus2(_objRef_global__Microsoft_UI_Xaml_Hosting_IDesktopWindowXamlSource, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Xaml.Hosting.IDesktopWindowXamlSourceMethods.Get_GotFocus2(_objRef_global__Microsoft_UI_Xaml_Hosting_IDesktopWindowXamlSource, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Windows.Foundation.TypedEventHandler<DesktopWindowXamlSource, DesktopWindowXamlSourceTakeFocusRequestedEventArgs> TakeFocusRequested
        {
            add => global::ABI.Microsoft.UI.Xaml.Hosting.IDesktopWindowXamlSourceMethods.Get_TakeFocusRequested2(_objRef_global__Microsoft_UI_Xaml_Hosting_IDesktopWindowXamlSource, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Xaml.Hosting.IDesktopWindowXamlSourceMethods.Get_TakeFocusRequested2(_objRef_global__Microsoft_UI_Xaml_Hosting_IDesktopWindowXamlSource, (IWinRTObject)this).Unsubscribe(value);
        }

        public void Dispose() => global::ABI.System.IDisposableMethods.Dispose(_objRef_global__System_IDisposable);

        public global::Microsoft.UI.Xaml.UIElement Content
        {
            get => global::ABI.Microsoft.UI.Xaml.Hosting.IDesktopWindowXamlSourceMethods.get_Content(_objRef_global__Microsoft_UI_Xaml_Hosting_IDesktopWindowXamlSource);
            set => global::ABI.Microsoft.UI.Xaml.Hosting.IDesktopWindowXamlSourceMethods.set_Content(_objRef_global__Microsoft_UI_Xaml_Hosting_IDesktopWindowXamlSource, value);
        }

        public bool HasFocus => global::ABI.Microsoft.UI.Xaml.Hosting.IDesktopWindowXamlSourceMethods.get_HasFocus(_objRef_global__Microsoft_UI_Xaml_Hosting_IDesktopWindowXamlSource);

        public bool ShouldConstrainPopupsToWorkArea
        {
            get => global::ABI.Microsoft.UI.Xaml.Hosting.IDesktopWindowXamlSource2Methods.get_ShouldConstrainPopupsToWorkArea(_objRef_global__Microsoft_UI_Xaml_Hosting_IDesktopWindowXamlSource2);
            set => global::ABI.Microsoft.UI.Xaml.Hosting.IDesktopWindowXamlSource2Methods.set_ShouldConstrainPopupsToWorkArea(_objRef_global__Microsoft_UI_Xaml_Hosting_IDesktopWindowXamlSource2, value);
        }

        public global::Microsoft.UI.Content.DesktopChildSiteBridge SiteBridge => global::ABI.Microsoft.UI.Xaml.Hosting.IDesktopWindowXamlSourceMethods.get_SiteBridge(_objRef_global__Microsoft_UI_Xaml_Hosting_IDesktopWindowXamlSource);

        public global::Microsoft.UI.Xaml.Media.SystemBackdrop SystemBackdrop
        {
            get => global::ABI.Microsoft.UI.Xaml.Hosting.IDesktopWindowXamlSourceMethods.get_SystemBackdrop(_objRef_global__Microsoft_UI_Xaml_Hosting_IDesktopWindowXamlSource);
            set => global::ABI.Microsoft.UI.Xaml.Hosting.IDesktopWindowXamlSourceMethods.set_SystemBackdrop(_objRef_global__Microsoft_UI_Xaml_Hosting_IDesktopWindowXamlSource, value);
        }

        protected virtual bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Hosting.DesktopWindowXamlSourceGotFocusEventArgs))]
    [global::ABI.Microsoft.UI.Xaml.Hosting.DesktopWindowXamlSourceGotFocusEventArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IDesktopWindowXamlSourceGotFocusEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 327680u)]
    public sealed class DesktopWindowXamlSourceGotFocusEventArgs : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<DesktopWindowXamlSourceGotFocusEventArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Hosting_IDesktopWindowXamlSourceGotFocusEventArgs => _inner;


        public static DesktopWindowXamlSourceGotFocusEventArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<DesktopWindowXamlSourceGotFocusEventArgs>.FromAbi(thisPtr);
        }

        internal DesktopWindowXamlSourceGotFocusEventArgs(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Hosting.IDesktopWindowXamlSourceGotFocusEventArgsMethods.IID);

        }


        public static bool operator ==(DesktopWindowXamlSourceGotFocusEventArgs x, DesktopWindowXamlSourceGotFocusEventArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(DesktopWindowXamlSourceGotFocusEventArgs x, DesktopWindowXamlSourceGotFocusEventArgs y) => !(x == y);
        public bool Equals(DesktopWindowXamlSourceGotFocusEventArgs other) => this == other;
        public override bool Equals(object obj) => obj is DesktopWindowXamlSourceGotFocusEventArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public XamlSourceFocusNavigationRequest Request => global::ABI.Microsoft.UI.Xaml.Hosting.IDesktopWindowXamlSourceGotFocusEventArgsMethods.get_Request(_objRef_global__Microsoft_UI_Xaml_Hosting_IDesktopWindowXamlSourceGotFocusEventArgs);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Hosting.DesktopWindowXamlSourceTakeFocusRequestedEventArgs))]
    [global::ABI.Microsoft.UI.Xaml.Hosting.DesktopWindowXamlSourceTakeFocusRequestedEventArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IDesktopWindowXamlSourceTakeFocusRequestedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 327680u)]
    public sealed class DesktopWindowXamlSourceTakeFocusRequestedEventArgs : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<DesktopWindowXamlSourceTakeFocusRequestedEventArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Hosting_IDesktopWindowXamlSourceTakeFocusRequestedEventArgs => _inner;


        public static DesktopWindowXamlSourceTakeFocusRequestedEventArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<DesktopWindowXamlSourceTakeFocusRequestedEventArgs>.FromAbi(thisPtr);
        }

        internal DesktopWindowXamlSourceTakeFocusRequestedEventArgs(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Hosting.IDesktopWindowXamlSourceTakeFocusRequestedEventArgsMethods.IID);

        }


        public static bool operator ==(DesktopWindowXamlSourceTakeFocusRequestedEventArgs x, DesktopWindowXamlSourceTakeFocusRequestedEventArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(DesktopWindowXamlSourceTakeFocusRequestedEventArgs x, DesktopWindowXamlSourceTakeFocusRequestedEventArgs y) => !(x == y);
        public bool Equals(DesktopWindowXamlSourceTakeFocusRequestedEventArgs other) => this == other;
        public override bool Equals(object obj) => obj is DesktopWindowXamlSourceTakeFocusRequestedEventArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public XamlSourceFocusNavigationRequest Request => global::ABI.Microsoft.UI.Xaml.Hosting.IDesktopWindowXamlSourceTakeFocusRequestedEventArgsMethods.get_Request(_objRef_global__Microsoft_UI_Xaml_Hosting_IDesktopWindowXamlSourceTakeFocusRequestedEventArgs);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Hosting.ElementCompositionPreview))]
    [global::ABI.Microsoft.UI.Xaml.Hosting.ElementCompositionPreviewRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IElementCompositionPreview))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class ElementCompositionPreview : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<ElementCompositionPreview>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Hosting_IElementCompositionPreview => _inner;


        public static I As<I>() => ActivationFactory.Get("Microsoft.UI.Xaml.Hosting.ElementCompositionPreview").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Hosting_IElementCompositionPreviewStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Hosting_IElementCompositionPreviewStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Hosting_IElementCompositionPreviewStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Hosting_IElementCompositionPreviewStatics = ActivationFactory.Get("Microsoft.UI.Xaml.Hosting.ElementCompositionPreview", global::ABI.Microsoft.UI.Xaml.Hosting.IElementCompositionPreviewStaticsMethods.IID);
                }
            }
        }

        public static global::Microsoft.UI.Composition.Visual GetElementVisual(global::Microsoft.UI.Xaml.UIElement element) => global::ABI.Microsoft.UI.Xaml.Hosting.IElementCompositionPreviewStaticsMethods.GetElementVisual(_objRef_global__Microsoft_UI_Xaml_Hosting_IElementCompositionPreviewStatics, element);

        public static global::Microsoft.UI.Composition.Visual GetElementChildVisual(global::Microsoft.UI.Xaml.UIElement element) => global::ABI.Microsoft.UI.Xaml.Hosting.IElementCompositionPreviewStaticsMethods.GetElementChildVisual(_objRef_global__Microsoft_UI_Xaml_Hosting_IElementCompositionPreviewStatics, element);

        public static void SetElementChildVisual(global::Microsoft.UI.Xaml.UIElement element, global::Microsoft.UI.Composition.Visual visual) => global::ABI.Microsoft.UI.Xaml.Hosting.IElementCompositionPreviewStaticsMethods.SetElementChildVisual(_objRef_global__Microsoft_UI_Xaml_Hosting_IElementCompositionPreviewStatics, element, visual);

        public static global::Microsoft.UI.Composition.CompositionPropertySet GetScrollViewerManipulationPropertySet(global::Microsoft.UI.Xaml.Controls.ScrollViewer scrollViewer) => global::ABI.Microsoft.UI.Xaml.Hosting.IElementCompositionPreviewStaticsMethods.GetScrollViewerManipulationPropertySet(_objRef_global__Microsoft_UI_Xaml_Hosting_IElementCompositionPreviewStatics, scrollViewer);

        public static void SetImplicitShowAnimation(global::Microsoft.UI.Xaml.UIElement element, global::Microsoft.UI.Composition.ICompositionAnimationBase animation) => global::ABI.Microsoft.UI.Xaml.Hosting.IElementCompositionPreviewStaticsMethods.SetImplicitShowAnimation(_objRef_global__Microsoft_UI_Xaml_Hosting_IElementCompositionPreviewStatics, element, animation);

        public static void SetImplicitHideAnimation(global::Microsoft.UI.Xaml.UIElement element, global::Microsoft.UI.Composition.ICompositionAnimationBase animation) => global::ABI.Microsoft.UI.Xaml.Hosting.IElementCompositionPreviewStaticsMethods.SetImplicitHideAnimation(_objRef_global__Microsoft_UI_Xaml_Hosting_IElementCompositionPreviewStatics, element, animation);

        public static void SetIsTranslationEnabled(global::Microsoft.UI.Xaml.UIElement element, bool value) => global::ABI.Microsoft.UI.Xaml.Hosting.IElementCompositionPreviewStaticsMethods.SetIsTranslationEnabled(_objRef_global__Microsoft_UI_Xaml_Hosting_IElementCompositionPreviewStatics, element, value);

        public static global::Microsoft.UI.Composition.CompositionPropertySet GetPointerPositionPropertySet(global::Microsoft.UI.Xaml.UIElement targetElement) => global::ABI.Microsoft.UI.Xaml.Hosting.IElementCompositionPreviewStaticsMethods.GetPointerPositionPropertySet(_objRef_global__Microsoft_UI_Xaml_Hosting_IElementCompositionPreviewStatics, targetElement);

        public static ElementCompositionPreview FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<ElementCompositionPreview>.FromAbi(thisPtr);
        }

        internal ElementCompositionPreview(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Hosting.IElementCompositionPreviewMethods.IID);

        }


        public static bool operator ==(ElementCompositionPreview x, ElementCompositionPreview y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(ElementCompositionPreview x, ElementCompositionPreview y) => !(x == y);
        public bool Equals(ElementCompositionPreview other) => this == other;
        public override bool Equals(object obj) => obj is ElementCompositionPreview that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("553AF92C-1381-51D6-BEE0-F34BEB042EA8")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Hosting.IDesktopWindowXamlSource))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 327680u)]
    internal interface IDesktopWindowXamlSource
    {
        XamlSourceFocusNavigationResult NavigateFocus(XamlSourceFocusNavigationRequest request);
        void Initialize(global::Microsoft.UI.WindowId parentWindowId);
        global::Microsoft.UI.Xaml.UIElement Content { get; set; }
        bool HasFocus { get; }
        global::Microsoft.UI.Content.DesktopChildSiteBridge SiteBridge { get; }
        global::Microsoft.UI.Xaml.Media.SystemBackdrop SystemBackdrop { get; set; }
        event global::Windows.Foundation.TypedEventHandler<DesktopWindowXamlSource, DesktopWindowXamlSourceGotFocusEventArgs> GotFocus;
        event global::Windows.Foundation.TypedEventHandler<DesktopWindowXamlSource, DesktopWindowXamlSourceTakeFocusRequestedEventArgs> TakeFocusRequested;
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("FB02B9F1-8588-5BD3-8951-4664A675D872")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Hosting.IDesktopWindowXamlSource2))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 393216u)]
    internal interface IDesktopWindowXamlSource2
    {
        bool ShouldConstrainPopupsToWorkArea { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("7D2DB617-14E7-5D49-AEEC-AE10887E595D")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Hosting.IDesktopWindowXamlSourceFactory))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 327680u)]
    internal interface IDesktopWindowXamlSourceFactory
    {
        DesktopWindowXamlSource CreateInstance(object baseInterface, out object innerInterface);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("CC63D863-2071-5F6B-AEF9-C0BA35F3B8DF")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Hosting.IDesktopWindowXamlSourceGotFocusEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 327680u)]
    internal interface IDesktopWindowXamlSourceGotFocusEventArgs
    {
        XamlSourceFocusNavigationRequest Request { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("4F5A0E2C-4DDC-5C03-939F-6F3BDA560363")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Hosting.IDesktopWindowXamlSourceTakeFocusRequestedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 327680u)]
    internal interface IDesktopWindowXamlSourceTakeFocusRequestedEventArgs
    {
        XamlSourceFocusNavigationRequest Request { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("C8AD1EF4-A93F-5A25-85BD-7C498D9856D3")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Hosting.IElementCompositionPreview))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IElementCompositionPreview
    {
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("84DA5A6C-0CFA-532B-9B15-CCD986374342")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Hosting.IElementCompositionPreviewStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IElementCompositionPreviewStatics
    {
        global::Microsoft.UI.Composition.Visual GetElementVisual(global::Microsoft.UI.Xaml.UIElement element);
        global::Microsoft.UI.Composition.Visual GetElementChildVisual(global::Microsoft.UI.Xaml.UIElement element);
        void SetElementChildVisual(global::Microsoft.UI.Xaml.UIElement element, global::Microsoft.UI.Composition.Visual visual);
        global::Microsoft.UI.Composition.CompositionPropertySet GetScrollViewerManipulationPropertySet(global::Microsoft.UI.Xaml.Controls.ScrollViewer scrollViewer);
        void SetImplicitShowAnimation(global::Microsoft.UI.Xaml.UIElement element, global::Microsoft.UI.Composition.ICompositionAnimationBase animation);
        void SetImplicitHideAnimation(global::Microsoft.UI.Xaml.UIElement element, global::Microsoft.UI.Composition.ICompositionAnimationBase animation);
        void SetIsTranslationEnabled(global::Microsoft.UI.Xaml.UIElement element, bool value);
        global::Microsoft.UI.Composition.CompositionPropertySet GetPointerPositionPropertySet(global::Microsoft.UI.Xaml.UIElement targetElement);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("85A2E562-7E8F-5333-A104-A3E672A2FFEE")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Hosting.IWindowsXamlManager))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 327680u)]
    internal interface IWindowsXamlManager
    {
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("BD67CFF5-B887-56DA-B0A2-DAD10A6520E9")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Hosting.IWindowsXamlManager2))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 393216u)]
    internal interface IWindowsXamlManager2
    {
        event global::Windows.Foundation.TypedEventHandler<WindowsXamlManager, XamlShutdownCompletedOnThreadEventArgs> XamlShutdownCompletedOnThread;
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("56CB591D-DE97-539F-881D-8CCDC44FA6C4")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Hosting.IWindowsXamlManagerStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 327680u)]
    internal interface IWindowsXamlManagerStatics
    {
        WindowsXamlManager InitializeForCurrentThread();
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("1062430E-0898-5240-BA52-89D9225E7E58")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Hosting.IWindowsXamlManagerStatics2))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 393216u)]
    internal interface IWindowsXamlManagerStatics2
    {
        WindowsXamlManager GetForCurrentThread();
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("ACCD20E5-3576-5262-A3DD-990657681F1F")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Hosting.IXamlShutdownCompletedOnThreadEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 393216u)]
    internal interface IXamlShutdownCompletedOnThreadEventArgs
    {
        global::Windows.Foundation.Deferral GetDispatcherQueueDeferral();
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("C883EA8B-4CE2-58BE-B547-66DEDF620312")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Hosting.IXamlSourceFocusNavigationRequest))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 327680u)]
    internal interface IXamlSourceFocusNavigationRequest
    {
        Guid CorrelationId { get; }
        global::Windows.Foundation.Rect HintRect { get; }
        XamlSourceFocusNavigationReason Reason { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("7A5124DD-2876-5ED8-B564-5867731D7F1E")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Hosting.IXamlSourceFocusNavigationRequestFactory))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 327680u)]
    internal interface IXamlSourceFocusNavigationRequestFactory
    {
        XamlSourceFocusNavigationRequest CreateInstance(XamlSourceFocusNavigationReason reason);
        XamlSourceFocusNavigationRequest CreateInstanceWithHintRect(XamlSourceFocusNavigationReason reason, global::Windows.Foundation.Rect hintRect);
        XamlSourceFocusNavigationRequest CreateInstanceWithHintRectAndCorrelationId(XamlSourceFocusNavigationReason reason, global::Windows.Foundation.Rect hintRect, Guid correlationId);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("D6BF378E-2AAC-5E5B-AC8A-6C5D9A4C1CB8")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Hosting.IXamlSourceFocusNavigationResult))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 327680u)]
    internal interface IXamlSourceFocusNavigationResult
    {
        bool WasFocusMoved { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("F533F53B-5C00-5C88-9A41-3888CB86E495")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Hosting.IXamlSourceFocusNavigationResultFactory))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 327680u)]
    internal interface IXamlSourceFocusNavigationResultFactory
    {
        XamlSourceFocusNavigationResult CreateInstance(bool focusMoved);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Hosting.WindowsXamlManager))]
    [global::ABI.Microsoft.UI.Xaml.Hosting.WindowsXamlManagerRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IWindowsXamlManager))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 327680u)]
    public sealed class WindowsXamlManager : global::System.IDisposable, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<WindowsXamlManager>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Hosting_IWindowsXamlManager => _inner;
        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Hosting_IWindowsXamlManager2;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_Hosting_IWindowsXamlManager2()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_Hosting_IWindowsXamlManager2, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.Hosting.IWindowsXamlManager2Methods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_Hosting_IWindowsXamlManager2;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Hosting_IWindowsXamlManager2 => ___objRef_global__Microsoft_UI_Xaml_Hosting_IWindowsXamlManager2 ?? Make___objRef_global__Microsoft_UI_Xaml_Hosting_IWindowsXamlManager2();

        private volatile IObjectReference ___objRef_global__System_IDisposable;
        private IObjectReference Make___objRef_global__System_IDisposable()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__System_IDisposable, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.System.IDisposableMethods.IID), null);
            return ___objRef_global__System_IDisposable;
        }
        private IObjectReference _objRef_global__System_IDisposable => ___objRef_global__System_IDisposable ?? Make___objRef_global__System_IDisposable();



        public static I As<I>() => ActivationFactory.Get("Microsoft.UI.Xaml.Hosting.WindowsXamlManager").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Hosting_IWindowsXamlManagerStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Hosting_IWindowsXamlManagerStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Hosting_IWindowsXamlManagerStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Hosting_IWindowsXamlManagerStatics = ActivationFactory.Get("Microsoft.UI.Xaml.Hosting.WindowsXamlManager", global::ABI.Microsoft.UI.Xaml.Hosting.IWindowsXamlManagerStaticsMethods.IID);
                }
            }
        }

        public static WindowsXamlManager InitializeForCurrentThread() => global::ABI.Microsoft.UI.Xaml.Hosting.IWindowsXamlManagerStaticsMethods.InitializeForCurrentThread(_objRef_global__Microsoft_UI_Xaml_Hosting_IWindowsXamlManagerStatics);

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Hosting_IWindowsXamlManagerStatics2;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Hosting_IWindowsXamlManagerStatics2
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Hosting_IWindowsXamlManagerStatics2;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Hosting_IWindowsXamlManagerStatics2 = ActivationFactory.Get("Microsoft.UI.Xaml.Hosting.WindowsXamlManager", global::ABI.Microsoft.UI.Xaml.Hosting.IWindowsXamlManagerStatics2Methods.IID);
                }
            }
        }

        public static WindowsXamlManager GetForCurrentThread() => global::ABI.Microsoft.UI.Xaml.Hosting.IWindowsXamlManagerStatics2Methods.GetForCurrentThread(_objRef_global__Microsoft_UI_Xaml_Hosting_IWindowsXamlManagerStatics2);

        public static WindowsXamlManager FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<WindowsXamlManager>.FromAbi(thisPtr);
        }

        internal WindowsXamlManager(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Hosting.IWindowsXamlManagerMethods.IID);

        }


        public static bool operator ==(WindowsXamlManager x, WindowsXamlManager y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(WindowsXamlManager x, WindowsXamlManager y) => !(x == y);
        public bool Equals(WindowsXamlManager other) => this == other;
        public override bool Equals(object obj) => obj is WindowsXamlManager that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public event global::Windows.Foundation.TypedEventHandler<WindowsXamlManager, XamlShutdownCompletedOnThreadEventArgs> XamlShutdownCompletedOnThread
        {
            add => global::ABI.Microsoft.UI.Xaml.Hosting.IWindowsXamlManager2Methods.Get_XamlShutdownCompletedOnThread2(_objRef_global__Microsoft_UI_Xaml_Hosting_IWindowsXamlManager2, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Xaml.Hosting.IWindowsXamlManager2Methods.Get_XamlShutdownCompletedOnThread2(_objRef_global__Microsoft_UI_Xaml_Hosting_IWindowsXamlManager2, (IWinRTObject)this).Unsubscribe(value);
        }

        public void Dispose() => global::ABI.System.IDisposableMethods.Dispose(_objRef_global__System_IDisposable);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Hosting.XamlShutdownCompletedOnThreadEventArgs))]
    [global::ABI.Microsoft.UI.Xaml.Hosting.XamlShutdownCompletedOnThreadEventArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IXamlShutdownCompletedOnThreadEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 393216u)]
    public sealed class XamlShutdownCompletedOnThreadEventArgs : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<XamlShutdownCompletedOnThreadEventArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Hosting_IXamlShutdownCompletedOnThreadEventArgs => _inner;


        public static XamlShutdownCompletedOnThreadEventArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<XamlShutdownCompletedOnThreadEventArgs>.FromAbi(thisPtr);
        }

        internal XamlShutdownCompletedOnThreadEventArgs(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Hosting.IXamlShutdownCompletedOnThreadEventArgsMethods.IID);

        }


        public static bool operator ==(XamlShutdownCompletedOnThreadEventArgs x, XamlShutdownCompletedOnThreadEventArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(XamlShutdownCompletedOnThreadEventArgs x, XamlShutdownCompletedOnThreadEventArgs y) => !(x == y);
        public bool Equals(XamlShutdownCompletedOnThreadEventArgs other) => this == other;
        public override bool Equals(object obj) => obj is XamlShutdownCompletedOnThreadEventArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public global::Windows.Foundation.Deferral GetDispatcherQueueDeferral() => global::ABI.Microsoft.UI.Xaml.Hosting.IXamlShutdownCompletedOnThreadEventArgsMethods.GetDispatcherQueueDeferral(_objRef_global__Microsoft_UI_Xaml_Hosting_IXamlShutdownCompletedOnThreadEventArgs);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<XamlSourceFocusNavigationReason>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 327680u)]
    public enum XamlSourceFocusNavigationReason : int
    {
        Programmatic = unchecked((int)0),
        Restore = unchecked((int)0x1),
        First = unchecked((int)0x3),
        Last = unchecked((int)0x4),
        Left = unchecked((int)0x7),
        Up = unchecked((int)0x8),
        Right = unchecked((int)0x9),
        Down = unchecked((int)0xa),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Hosting.XamlSourceFocusNavigationRequest))]
    [global::ABI.Microsoft.UI.Xaml.Hosting.XamlSourceFocusNavigationRequestRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IXamlSourceFocusNavigationRequest))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 327680u)]
    public sealed class XamlSourceFocusNavigationRequest : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<XamlSourceFocusNavigationRequest>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Hosting_IXamlSourceFocusNavigationRequest => _inner;


        private static class _IXamlSourceFocusNavigationRequestFactoryMethods
        {
            public static unsafe IntPtr CreateInstance(IObjectReference _obj, XamlSourceFocusNavigationReason reason)
            {
                var ThisPtr = _obj.ThisPtr;

                IntPtr __retval = default;
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, XamlSourceFocusNavigationReason, IntPtr*, int>**)ThisPtr)[6](ThisPtr, reason, &__retval));
                global::System.GC.KeepAlive(_obj);
                return __retval;
            }

            public static unsafe IntPtr CreateInstanceWithHintRect(IObjectReference _obj, XamlSourceFocusNavigationReason reason, global::Windows.Foundation.Rect hintRect)
            {
                var ThisPtr = _obj.ThisPtr;

                IntPtr __retval = default;
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, XamlSourceFocusNavigationReason, global::Windows.Foundation.Rect, IntPtr*, int>**)ThisPtr)[7](ThisPtr, reason, hintRect, &__retval));
                global::System.GC.KeepAlive(_obj);
                return __retval;
            }

            public static unsafe IntPtr CreateInstanceWithHintRectAndCorrelationId(IObjectReference _obj, XamlSourceFocusNavigationReason reason, global::Windows.Foundation.Rect hintRect, Guid correlationId)
            {
                var ThisPtr = _obj.ThisPtr;

                IntPtr __retval = default;
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, XamlSourceFocusNavigationReason, global::Windows.Foundation.Rect, Guid, IntPtr*, int>**)ThisPtr)[8](ThisPtr, reason, hintRect, correlationId, &__retval));
                global::System.GC.KeepAlive(_obj);
                return __retval;
            }
        }

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Hosting_IXamlSourceFocusNavigationRequestFactory;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Hosting_IXamlSourceFocusNavigationRequestFactory
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Hosting_IXamlSourceFocusNavigationRequestFactory;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Hosting_IXamlSourceFocusNavigationRequestFactory = ActivationFactory.Get("Microsoft.UI.Xaml.Hosting.XamlSourceFocusNavigationRequest", global::ABI.Microsoft.UI.Xaml.Hosting.IXamlSourceFocusNavigationRequestFactoryMethods.IID);
                }
            }
        }

        public XamlSourceFocusNavigationRequest(XamlSourceFocusNavigationReason reason) 
        { 
        IntPtr ptr = (_IXamlSourceFocusNavigationRequestFactoryMethods.CreateInstance(_objRef_global__Microsoft_UI_Xaml_Hosting_IXamlSourceFocusNavigationRequestFactory, reason)); 
        try 
        { 
        _inner = ComWrappersSupport.GetObjectReferenceForInterface(ptr, global::ABI.Microsoft.UI.Xaml.Hosting.IXamlSourceFocusNavigationRequestMethods.IID, false); 

        } 
        finally 
        { 
        MarshalInspectable<object>.DisposeAbi(ptr); 
        }

        ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
        ComWrappersHelper.Init(_inner, false);
        }

        public XamlSourceFocusNavigationRequest(XamlSourceFocusNavigationReason reason, global::Windows.Foundation.Rect hintRect) 
        { 
        IntPtr ptr = (_IXamlSourceFocusNavigationRequestFactoryMethods.CreateInstanceWithHintRect(_objRef_global__Microsoft_UI_Xaml_Hosting_IXamlSourceFocusNavigationRequestFactory, reason, hintRect)); 
        try 
        { 
        _inner = ComWrappersSupport.GetObjectReferenceForInterface(ptr, global::ABI.Microsoft.UI.Xaml.Hosting.IXamlSourceFocusNavigationRequestMethods.IID, false); 

        } 
        finally 
        { 
        MarshalInspectable<object>.DisposeAbi(ptr); 
        }

        ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
        ComWrappersHelper.Init(_inner, false);
        }

        public XamlSourceFocusNavigationRequest(XamlSourceFocusNavigationReason reason, global::Windows.Foundation.Rect hintRect, Guid correlationId) 
        { 
        IntPtr ptr = (_IXamlSourceFocusNavigationRequestFactoryMethods.CreateInstanceWithHintRectAndCorrelationId(_objRef_global__Microsoft_UI_Xaml_Hosting_IXamlSourceFocusNavigationRequestFactory, reason, hintRect, correlationId)); 
        try 
        { 
        _inner = ComWrappersSupport.GetObjectReferenceForInterface(ptr, global::ABI.Microsoft.UI.Xaml.Hosting.IXamlSourceFocusNavigationRequestMethods.IID, false); 

        } 
        finally 
        { 
        MarshalInspectable<object>.DisposeAbi(ptr); 
        }

        ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
        ComWrappersHelper.Init(_inner, false);
        }

        public static XamlSourceFocusNavigationRequest FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<XamlSourceFocusNavigationRequest>.FromAbi(thisPtr);
        }

        internal XamlSourceFocusNavigationRequest(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Hosting.IXamlSourceFocusNavigationRequestMethods.IID);

        }


        public static bool operator ==(XamlSourceFocusNavigationRequest x, XamlSourceFocusNavigationRequest y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(XamlSourceFocusNavigationRequest x, XamlSourceFocusNavigationRequest y) => !(x == y);
        public bool Equals(XamlSourceFocusNavigationRequest other) => this == other;
        public override bool Equals(object obj) => obj is XamlSourceFocusNavigationRequest that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public Guid CorrelationId => global::ABI.Microsoft.UI.Xaml.Hosting.IXamlSourceFocusNavigationRequestMethods.get_CorrelationId(_objRef_global__Microsoft_UI_Xaml_Hosting_IXamlSourceFocusNavigationRequest);

        public global::Windows.Foundation.Rect HintRect => global::ABI.Microsoft.UI.Xaml.Hosting.IXamlSourceFocusNavigationRequestMethods.get_HintRect(_objRef_global__Microsoft_UI_Xaml_Hosting_IXamlSourceFocusNavigationRequest);

        public XamlSourceFocusNavigationReason Reason => global::ABI.Microsoft.UI.Xaml.Hosting.IXamlSourceFocusNavigationRequestMethods.get_Reason(_objRef_global__Microsoft_UI_Xaml_Hosting_IXamlSourceFocusNavigationRequest);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Hosting.XamlSourceFocusNavigationResult))]
    [global::ABI.Microsoft.UI.Xaml.Hosting.XamlSourceFocusNavigationResultRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IXamlSourceFocusNavigationResult))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 327680u)]
    public sealed class XamlSourceFocusNavigationResult : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<XamlSourceFocusNavigationResult>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Hosting_IXamlSourceFocusNavigationResult => _inner;


        private static class _IXamlSourceFocusNavigationResultFactoryMethods
        {
            public static unsafe IntPtr CreateInstance(IObjectReference _obj, bool focusMoved)
            {
                var ThisPtr = _obj.ThisPtr;

                IntPtr __retval = default;
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, IntPtr*, int>**)ThisPtr)[6](ThisPtr, (byte)(focusMoved ? 1 : 0), &__retval));
                global::System.GC.KeepAlive(_obj);
                return __retval;
            }
        }

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Hosting_IXamlSourceFocusNavigationResultFactory;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Hosting_IXamlSourceFocusNavigationResultFactory
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Hosting_IXamlSourceFocusNavigationResultFactory;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Hosting_IXamlSourceFocusNavigationResultFactory = ActivationFactory.Get("Microsoft.UI.Xaml.Hosting.XamlSourceFocusNavigationResult", global::ABI.Microsoft.UI.Xaml.Hosting.IXamlSourceFocusNavigationResultFactoryMethods.IID);
                }
            }
        }

        public XamlSourceFocusNavigationResult(bool focusMoved) 
        { 
        IntPtr ptr = (_IXamlSourceFocusNavigationResultFactoryMethods.CreateInstance(_objRef_global__Microsoft_UI_Xaml_Hosting_IXamlSourceFocusNavigationResultFactory, focusMoved)); 
        try 
        { 
        _inner = ComWrappersSupport.GetObjectReferenceForInterface(ptr, global::ABI.Microsoft.UI.Xaml.Hosting.IXamlSourceFocusNavigationResultMethods.IID, false); 

        } 
        finally 
        { 
        MarshalInspectable<object>.DisposeAbi(ptr); 
        }

        ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
        ComWrappersHelper.Init(_inner, false);
        }

        public static XamlSourceFocusNavigationResult FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<XamlSourceFocusNavigationResult>.FromAbi(thisPtr);
        }

        internal XamlSourceFocusNavigationResult(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Hosting.IXamlSourceFocusNavigationResultMethods.IID);

        }


        public static bool operator ==(XamlSourceFocusNavigationResult x, XamlSourceFocusNavigationResult y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(XamlSourceFocusNavigationResult x, XamlSourceFocusNavigationResult y) => !(x == y);
        public bool Equals(XamlSourceFocusNavigationResult other) => this == other;
        public override bool Equals(object obj) => obj is XamlSourceFocusNavigationResult that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public bool WasFocusMoved => global::ABI.Microsoft.UI.Xaml.Hosting.IXamlSourceFocusNavigationResultMethods.get_WasFocusMoved(_objRef_global__Microsoft_UI_Xaml_Hosting_IXamlSourceFocusNavigationResult);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
}

#pragma warning disable CA1416
namespace ABI.Microsoft.UI.Xaml.Hosting
{
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct DesktopWindowXamlSource
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Hosting.DesktopWindowXamlSource obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Hosting.DesktopWindowXamlSource>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Hosting.IDesktopWindowXamlSourceMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Hosting.DesktopWindowXamlSource obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Hosting.IDesktopWindowXamlSourceMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Hosting.DesktopWindowXamlSource FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Hosting.DesktopWindowXamlSource.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Hosting.DesktopWindowXamlSource obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Hosting.DesktopWindowXamlSource>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Hosting.DesktopWindowXamlSource[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Hosting.DesktopWindowXamlSource>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Hosting.DesktopWindowXamlSource>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Hosting.DesktopWindowXamlSource[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Hosting.DesktopWindowXamlSource>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Hosting.DesktopWindowXamlSource[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Hosting.DesktopWindowXamlSource>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Hosting.DesktopWindowXamlSource[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Hosting.DesktopWindowXamlSource>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Hosting.DesktopWindowXamlSource>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Hosting.DesktopWindowXamlSource>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class DesktopWindowXamlSourceRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Hosting.DesktopWindowXamlSource(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct DesktopWindowXamlSourceGotFocusEventArgs
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Hosting.DesktopWindowXamlSourceGotFocusEventArgs obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Hosting.DesktopWindowXamlSourceGotFocusEventArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Hosting.IDesktopWindowXamlSourceGotFocusEventArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Hosting.DesktopWindowXamlSourceGotFocusEventArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Hosting.IDesktopWindowXamlSourceGotFocusEventArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Hosting.DesktopWindowXamlSourceGotFocusEventArgs FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Hosting.DesktopWindowXamlSourceGotFocusEventArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Hosting.DesktopWindowXamlSourceGotFocusEventArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Hosting.DesktopWindowXamlSourceGotFocusEventArgs>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Hosting.DesktopWindowXamlSourceGotFocusEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Hosting.DesktopWindowXamlSourceGotFocusEventArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Hosting.DesktopWindowXamlSourceGotFocusEventArgs>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Hosting.DesktopWindowXamlSourceGotFocusEventArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Hosting.DesktopWindowXamlSourceGotFocusEventArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Hosting.DesktopWindowXamlSourceGotFocusEventArgs[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Hosting.DesktopWindowXamlSourceGotFocusEventArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Hosting.DesktopWindowXamlSourceGotFocusEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Hosting.DesktopWindowXamlSourceGotFocusEventArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Hosting.DesktopWindowXamlSourceGotFocusEventArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Hosting.DesktopWindowXamlSourceGotFocusEventArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class DesktopWindowXamlSourceGotFocusEventArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Hosting.DesktopWindowXamlSourceGotFocusEventArgs(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct DesktopWindowXamlSourceTakeFocusRequestedEventArgs
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Hosting.DesktopWindowXamlSourceTakeFocusRequestedEventArgs obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Hosting.DesktopWindowXamlSourceTakeFocusRequestedEventArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Hosting.IDesktopWindowXamlSourceTakeFocusRequestedEventArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Hosting.DesktopWindowXamlSourceTakeFocusRequestedEventArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Hosting.IDesktopWindowXamlSourceTakeFocusRequestedEventArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Hosting.DesktopWindowXamlSourceTakeFocusRequestedEventArgs FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Hosting.DesktopWindowXamlSourceTakeFocusRequestedEventArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Hosting.DesktopWindowXamlSourceTakeFocusRequestedEventArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Hosting.DesktopWindowXamlSourceTakeFocusRequestedEventArgs>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Hosting.DesktopWindowXamlSourceTakeFocusRequestedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Hosting.DesktopWindowXamlSourceTakeFocusRequestedEventArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Hosting.DesktopWindowXamlSourceTakeFocusRequestedEventArgs>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Hosting.DesktopWindowXamlSourceTakeFocusRequestedEventArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Hosting.DesktopWindowXamlSourceTakeFocusRequestedEventArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Hosting.DesktopWindowXamlSourceTakeFocusRequestedEventArgs[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Hosting.DesktopWindowXamlSourceTakeFocusRequestedEventArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Hosting.DesktopWindowXamlSourceTakeFocusRequestedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Hosting.DesktopWindowXamlSourceTakeFocusRequestedEventArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Hosting.DesktopWindowXamlSourceTakeFocusRequestedEventArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Hosting.DesktopWindowXamlSourceTakeFocusRequestedEventArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class DesktopWindowXamlSourceTakeFocusRequestedEventArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Hosting.DesktopWindowXamlSourceTakeFocusRequestedEventArgs(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct ElementCompositionPreview
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Hosting.ElementCompositionPreview obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Hosting.ElementCompositionPreview>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Hosting.IElementCompositionPreviewMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Hosting.ElementCompositionPreview obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Hosting.IElementCompositionPreviewMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Hosting.ElementCompositionPreview FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Hosting.ElementCompositionPreview.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Hosting.ElementCompositionPreview obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Hosting.ElementCompositionPreview>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Hosting.ElementCompositionPreview[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Hosting.ElementCompositionPreview>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Hosting.ElementCompositionPreview>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Hosting.ElementCompositionPreview[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Hosting.ElementCompositionPreview>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Hosting.ElementCompositionPreview[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Hosting.ElementCompositionPreview>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Hosting.ElementCompositionPreview[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Hosting.ElementCompositionPreview>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Hosting.ElementCompositionPreview>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Hosting.ElementCompositionPreview>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class ElementCompositionPreviewRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Hosting.ElementCompositionPreview(inspectable.ObjRef);
    }
    internal static class IDesktopWindowXamlSourceMethods
    {


        internal static unsafe global::Microsoft.UI.Xaml.Hosting.XamlSourceFocusNavigationResult NavigateFocus(IObjectReference _obj, global::Microsoft.UI.Xaml.Hosting.XamlSourceFocusNavigationRequest request)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __request = default;
            IntPtr __retval = default;
            try
            {
                __request = global::ABI.Microsoft.UI.Xaml.Hosting.XamlSourceFocusNavigationRequest.CreateMarshaler2(request);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[16](ThisPtr, MarshalInspectable<object>.GetAbi(__request), &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Hosting.XamlSourceFocusNavigationResult.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__request);
                global::ABI.Microsoft.UI.Xaml.Hosting.XamlSourceFocusNavigationResult.DisposeAbi(__retval);
            }
        }

        internal static unsafe void Initialize(IObjectReference _obj, global::Microsoft.UI.WindowId parentWindowId)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.WindowId, int>**)ThisPtr)[17](ThisPtr, parentWindowId));
            global::System.GC.KeepAlive(_obj);
        }
        internal static unsafe global::Microsoft.UI.Xaml.UIElement get_Content(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.UIElement.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.UIElement.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_Content(IObjectReference _obj, global::Microsoft.UI.Xaml.UIElement value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.UIElement.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[7](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe bool get_HasFocus(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        internal static unsafe global::Microsoft.UI.Content.DesktopChildSiteBridge get_SiteBridge(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[11](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Content.DesktopChildSiteBridge.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Content.DesktopChildSiteBridge.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.Media.SystemBackdrop get_SystemBackdrop(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[9](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Media.SystemBackdrop.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Media.SystemBackdrop.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_SystemBackdrop(IObjectReference _obj, global::Microsoft.UI.Xaml.Media.SystemBackdrop value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Microsoft.UI.Xaml.Media.SystemBackdrop.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[10](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }


        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Hosting.DesktopWindowXamlSource, global::Microsoft.UI.Xaml.Hosting.DesktopWindowXamlSourceGotFocusEventArgs>>> _GotFocus_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Hosting.DesktopWindowXamlSource, global::Microsoft.UI.Xaml.Hosting.DesktopWindowXamlSourceGotFocusEventArgs>>> MakeGotFocusTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _GotFocus_, new(), null);
            return _GotFocus_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Hosting.DesktopWindowXamlSource, global::Microsoft.UI.Xaml.Hosting.DesktopWindowXamlSourceGotFocusEventArgs>>> _GotFocus => _GotFocus_ ?? MakeGotFocusTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Hosting.DesktopWindowXamlSource, global::Microsoft.UI.Xaml.Hosting.DesktopWindowXamlSourceGotFocusEventArgs>> Get_GotFocus2(IObjectReference _obj, object _thisObj)
        {
            return _GotFocus.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Xaml_Hosting_DesktopWindowXamlSource__global__Microsoft_UI_Xaml_Hosting_DesktopWindowXamlSourceGotFocusEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[14],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[15],
                0);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Hosting.DesktopWindowXamlSource, global::Microsoft.UI.Xaml.Hosting.DesktopWindowXamlSourceTakeFocusRequestedEventArgs>>> _TakeFocusRequested_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Hosting.DesktopWindowXamlSource, global::Microsoft.UI.Xaml.Hosting.DesktopWindowXamlSourceTakeFocusRequestedEventArgs>>> MakeTakeFocusRequestedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _TakeFocusRequested_, new(), null);
            return _TakeFocusRequested_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Hosting.DesktopWindowXamlSource, global::Microsoft.UI.Xaml.Hosting.DesktopWindowXamlSourceTakeFocusRequestedEventArgs>>> _TakeFocusRequested => _TakeFocusRequested_ ?? MakeTakeFocusRequestedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Hosting.DesktopWindowXamlSource, global::Microsoft.UI.Xaml.Hosting.DesktopWindowXamlSourceTakeFocusRequestedEventArgs>> Get_TakeFocusRequested2(IObjectReference _obj, object _thisObj)
        {
            return _TakeFocusRequested.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Xaml_Hosting_DesktopWindowXamlSource__global__Microsoft_UI_Xaml_Hosting_DesktopWindowXamlSourceTakeFocusRequestedEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[12],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[13],
                1);
            });
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x2C, 0xF9, 0x3A, 0x55, 0x81, 0x13, 0xD6, 0x51, 0xBE, 0xE0, 0xF3, 0x4B, 0xEB, 0x4, 0x2E, 0xA8 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("553AF92C-1381-51D6-BEE0-F34BEB042EA8")]
    internal interface IDesktopWindowXamlSource : global::Microsoft.UI.Xaml.Hosting.IDesktopWindowXamlSource
    {
    }
    internal static class IDesktopWindowXamlSource2Methods
    {

        internal static unsafe bool get_ShouldConstrainPopupsToWorkArea(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_ShouldConstrainPopupsToWorkArea(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[7](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xF1, 0xB9, 0x2, 0xFB, 0x88, 0x85, 0xD3, 0x5B, 0x89, 0x51, 0x46, 0x64, 0xA6, 0x75, 0xD8, 0x72 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("FB02B9F1-8588-5BD3-8951-4664A675D872")]
    internal interface IDesktopWindowXamlSource2 : global::Microsoft.UI.Xaml.Hosting.IDesktopWindowXamlSource2
    {
    }
    internal static class IDesktopWindowXamlSourceFactoryMethods
    {


        internal static unsafe global::Microsoft.UI.Xaml.Hosting.DesktopWindowXamlSource CreateInstance(IObjectReference _obj, object baseInterface, out object innerInterface)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __baseInterface = default;
            IntPtr __innerInterface = default;
            IntPtr __retval = default;
            try
            {
                __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                global::System.GC.KeepAlive(_obj);
                innerInterface = MarshalInspectable<object>.FromAbi(__innerInterface);
                return global::ABI.Microsoft.UI.Xaml.Hosting.DesktopWindowXamlSource.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                MarshalInspectable<object>.DisposeAbi(__innerInterface);
                global::ABI.Microsoft.UI.Xaml.Hosting.DesktopWindowXamlSource.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x17, 0xB6, 0x2D, 0x7D, 0xE7, 0x14, 0x49, 0x5D, 0xAE, 0xEC, 0xAE, 0x10, 0x88, 0x7E, 0x59, 0x5D };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("7D2DB617-14E7-5D49-AEEC-AE10887E595D")]
    internal interface IDesktopWindowXamlSourceFactory : global::Microsoft.UI.Xaml.Hosting.IDesktopWindowXamlSourceFactory
    {
    }
    internal static class IDesktopWindowXamlSourceGotFocusEventArgsMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.Hosting.XamlSourceFocusNavigationRequest get_Request(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Hosting.XamlSourceFocusNavigationRequest.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Hosting.XamlSourceFocusNavigationRequest.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x63, 0xD8, 0x63, 0xCC, 0x71, 0x20, 0x6B, 0x5F, 0xAE, 0xF9, 0xC0, 0xBA, 0x35, 0xF3, 0xB8, 0xDF };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("CC63D863-2071-5F6B-AEF9-C0BA35F3B8DF")]
    internal interface IDesktopWindowXamlSourceGotFocusEventArgs : global::Microsoft.UI.Xaml.Hosting.IDesktopWindowXamlSourceGotFocusEventArgs
    {
    }
    internal static class IDesktopWindowXamlSourceTakeFocusRequestedEventArgsMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.Hosting.XamlSourceFocusNavigationRequest get_Request(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Hosting.XamlSourceFocusNavigationRequest.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Hosting.XamlSourceFocusNavigationRequest.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x2C, 0xE, 0x5A, 0x4F, 0xDC, 0x4D, 0x3, 0x5C, 0x93, 0x9F, 0x6F, 0x3B, 0xDA, 0x56, 0x3, 0x63 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("4F5A0E2C-4DDC-5C03-939F-6F3BDA560363")]
    internal interface IDesktopWindowXamlSourceTakeFocusRequestedEventArgs : global::Microsoft.UI.Xaml.Hosting.IDesktopWindowXamlSourceTakeFocusRequestedEventArgs
    {
    }
    internal static class IElementCompositionPreviewMethods
    {



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xF4, 0x1E, 0xAD, 0xC8, 0x3F, 0xA9, 0x25, 0x5A, 0x85, 0xBD, 0x7C, 0x49, 0x8D, 0x98, 0x56, 0xD3 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("C8AD1EF4-A93F-5A25-85BD-7C498D9856D3")]
    internal interface IElementCompositionPreview : global::Microsoft.UI.Xaml.Hosting.IElementCompositionPreview
    {
    }
    internal static class IElementCompositionPreviewStaticsMethods
    {


        internal static unsafe global::Microsoft.UI.Composition.Visual GetElementVisual(IObjectReference _obj, global::Microsoft.UI.Xaml.UIElement element)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __element = default;
            IntPtr __retval = default;
            try
            {
                __element = global::ABI.Microsoft.UI.Xaml.UIElement.CreateMarshaler2(element);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__element), &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Composition.Visual.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__element);
                global::ABI.Microsoft.UI.Composition.Visual.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Composition.Visual GetElementChildVisual(IObjectReference _obj, global::Microsoft.UI.Xaml.UIElement element)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __element = default;
            IntPtr __retval = default;
            try
            {
                __element = global::ABI.Microsoft.UI.Xaml.UIElement.CreateMarshaler2(element);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, MarshalInspectable<object>.GetAbi(__element), &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Composition.Visual.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__element);
                global::ABI.Microsoft.UI.Composition.Visual.DisposeAbi(__retval);
            }
        }

        internal static unsafe void SetElementChildVisual(IObjectReference _obj, global::Microsoft.UI.Xaml.UIElement element, global::Microsoft.UI.Composition.Visual visual)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __element = default;
            ObjectReferenceValue __visual = default;
            try
            {
                __element = global::ABI.Microsoft.UI.Xaml.UIElement.CreateMarshaler2(element);
                __visual = global::ABI.Microsoft.UI.Composition.Visual.CreateMarshaler2(visual);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, int>**)ThisPtr)[8](ThisPtr, MarshalInspectable<object>.GetAbi(__element), MarshalInspectable<object>.GetAbi(__visual)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__element);
                MarshalInspectable<object>.DisposeMarshaler(__visual);
            }
        }

        internal static unsafe global::Microsoft.UI.Composition.CompositionPropertySet GetScrollViewerManipulationPropertySet(IObjectReference _obj, global::Microsoft.UI.Xaml.Controls.ScrollViewer scrollViewer)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __scrollViewer = default;
            IntPtr __retval = default;
            try
            {
                __scrollViewer = global::ABI.Microsoft.UI.Xaml.Controls.ScrollViewer.CreateMarshaler2(scrollViewer);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[9](ThisPtr, MarshalInspectable<object>.GetAbi(__scrollViewer), &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Composition.CompositionPropertySet.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__scrollViewer);
                global::ABI.Microsoft.UI.Composition.CompositionPropertySet.DisposeAbi(__retval);
            }
        }

        internal static unsafe void SetImplicitShowAnimation(IObjectReference _obj, global::Microsoft.UI.Xaml.UIElement element, global::Microsoft.UI.Composition.ICompositionAnimationBase animation)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __element = default;
            ObjectReferenceValue __animation = default;
            try
            {
                __element = global::ABI.Microsoft.UI.Xaml.UIElement.CreateMarshaler2(element);
                __animation = MarshalInterface<global::Microsoft.UI.Composition.ICompositionAnimationBase>.CreateMarshaler2(animation, global::ABI.Microsoft.UI.Composition.ICompositionAnimationBaseMethods.IID);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, int>**)ThisPtr)[10](ThisPtr, MarshalInspectable<object>.GetAbi(__element), MarshalInspectable<object>.GetAbi(__animation)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__element);
                MarshalInspectable<object>.DisposeMarshaler(__animation);
            }
        }

        internal static unsafe void SetImplicitHideAnimation(IObjectReference _obj, global::Microsoft.UI.Xaml.UIElement element, global::Microsoft.UI.Composition.ICompositionAnimationBase animation)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __element = default;
            ObjectReferenceValue __animation = default;
            try
            {
                __element = global::ABI.Microsoft.UI.Xaml.UIElement.CreateMarshaler2(element);
                __animation = MarshalInterface<global::Microsoft.UI.Composition.ICompositionAnimationBase>.CreateMarshaler2(animation, global::ABI.Microsoft.UI.Composition.ICompositionAnimationBaseMethods.IID);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, int>**)ThisPtr)[11](ThisPtr, MarshalInspectable<object>.GetAbi(__element), MarshalInspectable<object>.GetAbi(__animation)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__element);
                MarshalInspectable<object>.DisposeMarshaler(__animation);
            }
        }

        internal static unsafe void SetIsTranslationEnabled(IObjectReference _obj, global::Microsoft.UI.Xaml.UIElement element, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __element = default;
            try
            {
                __element = global::ABI.Microsoft.UI.Xaml.UIElement.CreateMarshaler2(element);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, byte, int>**)ThisPtr)[12](ThisPtr, MarshalInspectable<object>.GetAbi(__element), (byte)(value ? 1 : 0)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__element);
            }
        }

        internal static unsafe global::Microsoft.UI.Composition.CompositionPropertySet GetPointerPositionPropertySet(IObjectReference _obj, global::Microsoft.UI.Xaml.UIElement targetElement)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __targetElement = default;
            IntPtr __retval = default;
            try
            {
                __targetElement = global::ABI.Microsoft.UI.Xaml.UIElement.CreateMarshaler2(targetElement);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[13](ThisPtr, MarshalInspectable<object>.GetAbi(__targetElement), &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Composition.CompositionPropertySet.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__targetElement);
                global::ABI.Microsoft.UI.Composition.CompositionPropertySet.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x6C, 0x5A, 0xDA, 0x84, 0xFA, 0xC, 0x2B, 0x53, 0x9B, 0x15, 0xCC, 0xD9, 0x86, 0x37, 0x43, 0x42 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("84DA5A6C-0CFA-532B-9B15-CCD986374342")]
    internal interface IElementCompositionPreviewStatics : global::Microsoft.UI.Xaml.Hosting.IElementCompositionPreviewStatics
    {
    }
    internal static class IWindowsXamlManagerMethods
    {



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x62, 0xE5, 0xA2, 0x85, 0x8F, 0x7E, 0x33, 0x53, 0xA1, 0x4, 0xA3, 0xE6, 0x72, 0xA2, 0xFF, 0xEE };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("85A2E562-7E8F-5333-A104-A3E672A2FFEE")]
    internal interface IWindowsXamlManager : global::Microsoft.UI.Xaml.Hosting.IWindowsXamlManager
    {
    }
    internal static class IWindowsXamlManager2Methods
    {


        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Hosting.WindowsXamlManager, global::Microsoft.UI.Xaml.Hosting.XamlShutdownCompletedOnThreadEventArgs>>> _XamlShutdownCompletedOnThread_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Hosting.WindowsXamlManager, global::Microsoft.UI.Xaml.Hosting.XamlShutdownCompletedOnThreadEventArgs>>> MakeXamlShutdownCompletedOnThreadTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _XamlShutdownCompletedOnThread_, new(), null);
            return _XamlShutdownCompletedOnThread_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Hosting.WindowsXamlManager, global::Microsoft.UI.Xaml.Hosting.XamlShutdownCompletedOnThreadEventArgs>>> _XamlShutdownCompletedOnThread => _XamlShutdownCompletedOnThread_ ?? MakeXamlShutdownCompletedOnThreadTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Hosting.WindowsXamlManager, global::Microsoft.UI.Xaml.Hosting.XamlShutdownCompletedOnThreadEventArgs>> Get_XamlShutdownCompletedOnThread2(IObjectReference _obj, object _thisObj)
        {
            return _XamlShutdownCompletedOnThread.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Xaml_Hosting_WindowsXamlManager__global__Microsoft_UI_Xaml_Hosting_XamlShutdownCompletedOnThreadEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[6],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[7],
                0);
            });
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xF5, 0xCF, 0x67, 0xBD, 0x87, 0xB8, 0xDA, 0x56, 0xB0, 0xA2, 0xDA, 0xD1, 0xA, 0x65, 0x20, 0xE9 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("BD67CFF5-B887-56DA-B0A2-DAD10A6520E9")]
    internal interface IWindowsXamlManager2 : global::Microsoft.UI.Xaml.Hosting.IWindowsXamlManager2
    {
    }
    internal static class IWindowsXamlManagerStaticsMethods
    {


        internal static unsafe global::Microsoft.UI.Xaml.Hosting.WindowsXamlManager InitializeForCurrentThread(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Hosting.WindowsXamlManager.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Hosting.WindowsXamlManager.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x1D, 0x59, 0xCB, 0x56, 0x97, 0xDE, 0x9F, 0x53, 0x88, 0x1D, 0x8C, 0xCD, 0xC4, 0x4F, 0xA6, 0xC4 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("56CB591D-DE97-539F-881D-8CCDC44FA6C4")]
    internal interface IWindowsXamlManagerStatics : global::Microsoft.UI.Xaml.Hosting.IWindowsXamlManagerStatics
    {
    }
    internal static class IWindowsXamlManagerStatics2Methods
    {


        internal static unsafe global::Microsoft.UI.Xaml.Hosting.WindowsXamlManager GetForCurrentThread(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Hosting.WindowsXamlManager.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Hosting.WindowsXamlManager.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xE, 0x43, 0x62, 0x10, 0x98, 0x8, 0x40, 0x52, 0xBA, 0x52, 0x89, 0xD9, 0x22, 0x5E, 0x7E, 0x58 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("1062430E-0898-5240-BA52-89D9225E7E58")]
    internal interface IWindowsXamlManagerStatics2 : global::Microsoft.UI.Xaml.Hosting.IWindowsXamlManagerStatics2
    {
    }
    internal static class IXamlShutdownCompletedOnThreadEventArgsMethods
    {


        internal static unsafe global::Windows.Foundation.Deferral GetDispatcherQueueDeferral(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Windows.Foundation.Deferral.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Windows.Foundation.Deferral.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xE5, 0x20, 0xCD, 0xAC, 0x76, 0x35, 0x62, 0x52, 0xA3, 0xDD, 0x99, 0x6, 0x57, 0x68, 0x1F, 0x1F };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("ACCD20E5-3576-5262-A3DD-990657681F1F")]
    internal interface IXamlShutdownCompletedOnThreadEventArgs : global::Microsoft.UI.Xaml.Hosting.IXamlShutdownCompletedOnThreadEventArgs
    {
    }
    internal static class IXamlSourceFocusNavigationRequestMethods
    {

        internal static unsafe Guid get_CorrelationId(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            Guid __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, Guid*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.Foundation.Rect get_HintRect(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.Foundation.Rect __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Foundation.Rect*, int>**)ThisPtr)[7](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Microsoft.UI.Xaml.Hosting.XamlSourceFocusNavigationReason get_Reason(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Xaml.Hosting.XamlSourceFocusNavigationReason __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Hosting.XamlSourceFocusNavigationReason*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x8B, 0xEA, 0x83, 0xC8, 0xE2, 0x4C, 0xBE, 0x58, 0xB5, 0x47, 0x66, 0xDE, 0xDF, 0x62, 0x3, 0x12 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("C883EA8B-4CE2-58BE-B547-66DEDF620312")]
    internal interface IXamlSourceFocusNavigationRequest : global::Microsoft.UI.Xaml.Hosting.IXamlSourceFocusNavigationRequest
    {
    }
    internal static class IXamlSourceFocusNavigationRequestFactoryMethods
    {


        internal static unsafe global::Microsoft.UI.Xaml.Hosting.XamlSourceFocusNavigationRequest CreateInstance(IObjectReference _obj, global::Microsoft.UI.Xaml.Hosting.XamlSourceFocusNavigationReason reason)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Hosting.XamlSourceFocusNavigationReason, IntPtr*, int>**)ThisPtr)[6](ThisPtr, reason, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Hosting.XamlSourceFocusNavigationRequest.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Hosting.XamlSourceFocusNavigationRequest.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.Hosting.XamlSourceFocusNavigationRequest CreateInstanceWithHintRect(IObjectReference _obj, global::Microsoft.UI.Xaml.Hosting.XamlSourceFocusNavigationReason reason, global::Windows.Foundation.Rect hintRect)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Hosting.XamlSourceFocusNavigationReason, global::Windows.Foundation.Rect, IntPtr*, int>**)ThisPtr)[7](ThisPtr, reason, hintRect, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Hosting.XamlSourceFocusNavigationRequest.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Hosting.XamlSourceFocusNavigationRequest.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.Hosting.XamlSourceFocusNavigationRequest CreateInstanceWithHintRectAndCorrelationId(IObjectReference _obj, global::Microsoft.UI.Xaml.Hosting.XamlSourceFocusNavigationReason reason, global::Windows.Foundation.Rect hintRect, Guid correlationId)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Hosting.XamlSourceFocusNavigationReason, global::Windows.Foundation.Rect, Guid, IntPtr*, int>**)ThisPtr)[8](ThisPtr, reason, hintRect, correlationId, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Hosting.XamlSourceFocusNavigationRequest.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Hosting.XamlSourceFocusNavigationRequest.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xDD, 0x24, 0x51, 0x7A, 0x76, 0x28, 0xD8, 0x5E, 0xB5, 0x64, 0x58, 0x67, 0x73, 0x1D, 0x7F, 0x1E };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("7A5124DD-2876-5ED8-B564-5867731D7F1E")]
    internal interface IXamlSourceFocusNavigationRequestFactory : global::Microsoft.UI.Xaml.Hosting.IXamlSourceFocusNavigationRequestFactory
    {
    }
    internal static class IXamlSourceFocusNavigationResultMethods
    {

        internal static unsafe bool get_WasFocusMoved(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x8E, 0x37, 0xBF, 0xD6, 0xAC, 0x2A, 0x5B, 0x5E, 0xAC, 0x8A, 0x6C, 0x5D, 0x9A, 0x4C, 0x1C, 0xB8 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("D6BF378E-2AAC-5E5B-AC8A-6C5D9A4C1CB8")]
    internal interface IXamlSourceFocusNavigationResult : global::Microsoft.UI.Xaml.Hosting.IXamlSourceFocusNavigationResult
    {
    }
    internal static class IXamlSourceFocusNavigationResultFactoryMethods
    {


        internal static unsafe global::Microsoft.UI.Xaml.Hosting.XamlSourceFocusNavigationResult CreateInstance(IObjectReference _obj, bool focusMoved)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, IntPtr*, int>**)ThisPtr)[6](ThisPtr, (byte)(focusMoved ? 1 : 0), &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Hosting.XamlSourceFocusNavigationResult.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Hosting.XamlSourceFocusNavigationResult.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x3B, 0xF5, 0x33, 0xF5, 0x0, 0x5C, 0x88, 0x5C, 0x9A, 0x41, 0x38, 0x88, 0xCB, 0x86, 0xE4, 0x95 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("F533F53B-5C00-5C88-9A41-3888CB86E495")]
    internal interface IXamlSourceFocusNavigationResultFactory : global::Microsoft.UI.Xaml.Hosting.IXamlSourceFocusNavigationResultFactory
    {
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct WindowsXamlManager
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Hosting.WindowsXamlManager obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Hosting.WindowsXamlManager>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Hosting.IWindowsXamlManagerMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Hosting.WindowsXamlManager obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Hosting.IWindowsXamlManagerMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Hosting.WindowsXamlManager FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Hosting.WindowsXamlManager.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Hosting.WindowsXamlManager obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Hosting.WindowsXamlManager>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Hosting.WindowsXamlManager[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Hosting.WindowsXamlManager>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Hosting.WindowsXamlManager>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Hosting.WindowsXamlManager[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Hosting.WindowsXamlManager>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Hosting.WindowsXamlManager[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Hosting.WindowsXamlManager>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Hosting.WindowsXamlManager[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Hosting.WindowsXamlManager>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Hosting.WindowsXamlManager>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Hosting.WindowsXamlManager>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class WindowsXamlManagerRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Hosting.WindowsXamlManager(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct XamlShutdownCompletedOnThreadEventArgs
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Hosting.XamlShutdownCompletedOnThreadEventArgs obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Hosting.XamlShutdownCompletedOnThreadEventArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Hosting.IXamlShutdownCompletedOnThreadEventArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Hosting.XamlShutdownCompletedOnThreadEventArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Hosting.IXamlShutdownCompletedOnThreadEventArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Hosting.XamlShutdownCompletedOnThreadEventArgs FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Hosting.XamlShutdownCompletedOnThreadEventArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Hosting.XamlShutdownCompletedOnThreadEventArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Hosting.XamlShutdownCompletedOnThreadEventArgs>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Hosting.XamlShutdownCompletedOnThreadEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Hosting.XamlShutdownCompletedOnThreadEventArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Hosting.XamlShutdownCompletedOnThreadEventArgs>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Hosting.XamlShutdownCompletedOnThreadEventArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Hosting.XamlShutdownCompletedOnThreadEventArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Hosting.XamlShutdownCompletedOnThreadEventArgs[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Hosting.XamlShutdownCompletedOnThreadEventArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Hosting.XamlShutdownCompletedOnThreadEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Hosting.XamlShutdownCompletedOnThreadEventArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Hosting.XamlShutdownCompletedOnThreadEventArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Hosting.XamlShutdownCompletedOnThreadEventArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class XamlShutdownCompletedOnThreadEventArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Hosting.XamlShutdownCompletedOnThreadEventArgs(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct XamlSourceFocusNavigationRequest
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Hosting.XamlSourceFocusNavigationRequest obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Hosting.XamlSourceFocusNavigationRequest>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Hosting.IXamlSourceFocusNavigationRequestMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Hosting.XamlSourceFocusNavigationRequest obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Hosting.IXamlSourceFocusNavigationRequestMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Hosting.XamlSourceFocusNavigationRequest FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Hosting.XamlSourceFocusNavigationRequest.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Hosting.XamlSourceFocusNavigationRequest obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Hosting.XamlSourceFocusNavigationRequest>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Hosting.XamlSourceFocusNavigationRequest[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Hosting.XamlSourceFocusNavigationRequest>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Hosting.XamlSourceFocusNavigationRequest>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Hosting.XamlSourceFocusNavigationRequest[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Hosting.XamlSourceFocusNavigationRequest>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Hosting.XamlSourceFocusNavigationRequest[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Hosting.XamlSourceFocusNavigationRequest>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Hosting.XamlSourceFocusNavigationRequest[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Hosting.XamlSourceFocusNavigationRequest>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Hosting.XamlSourceFocusNavigationRequest>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Hosting.XamlSourceFocusNavigationRequest>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class XamlSourceFocusNavigationRequestRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Hosting.XamlSourceFocusNavigationRequest(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct XamlSourceFocusNavigationResult
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Hosting.XamlSourceFocusNavigationResult obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Hosting.XamlSourceFocusNavigationResult>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Hosting.IXamlSourceFocusNavigationResultMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Hosting.XamlSourceFocusNavigationResult obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Hosting.IXamlSourceFocusNavigationResultMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Hosting.XamlSourceFocusNavigationResult FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Hosting.XamlSourceFocusNavigationResult.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Hosting.XamlSourceFocusNavigationResult obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Hosting.XamlSourceFocusNavigationResult>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Hosting.XamlSourceFocusNavigationResult[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Hosting.XamlSourceFocusNavigationResult>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Hosting.XamlSourceFocusNavigationResult>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Hosting.XamlSourceFocusNavigationResult[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Hosting.XamlSourceFocusNavigationResult>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Hosting.XamlSourceFocusNavigationResult[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Hosting.XamlSourceFocusNavigationResult>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Hosting.XamlSourceFocusNavigationResult[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Hosting.XamlSourceFocusNavigationResult>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Hosting.XamlSourceFocusNavigationResult>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Hosting.XamlSourceFocusNavigationResult>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class XamlSourceFocusNavigationResultRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Hosting.XamlSourceFocusNavigationResult(inspectable.ObjRef);
    }
}
#pragma warning restore CA1416
