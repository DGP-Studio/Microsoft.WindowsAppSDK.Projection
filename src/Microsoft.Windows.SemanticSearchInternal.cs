//------------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by cswinrt.exe version 2.2.0.241111.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq.Expressions;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using WinRT;
using WinRT.Interop;


#pragma warning disable 0169 // warning CS0169: The field '...' is never used
#pragma warning disable 0649 // warning CS0169: Field '...' is never assigned to
#pragma warning disable CA2207, CA1063, CA1033, CA1001, CA2213

namespace Microsoft.Windows.SemanticSearchInternal
{
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.SemanticSearchInternal")][Guid("06288198-0682-5754-8FC2-087D3219A4D3")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.SemanticSearchInternal.IImageSearchImageEmbeddingsSession))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(SearchEmbeddingsSessionContract), 65536u)]
    public interface IImageSearchImageEmbeddingsSession : global::System.IDisposable
    {
        global::Windows.Foundation.IAsyncOperation<global::Microsoft.Windows.SemanticSearch.EmbeddingVector> CreateAsync(global::Microsoft.Windows.PrivateCommon.ImageBufferView imageBufferView, global::Microsoft.Windows.PrivateCommon.ImageBufferViewData imageBufferViewData);
        string ModelVersion { get; }
        uint OutputLength { get; }
        Guid VectorSpaceId { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.SemanticSearchInternal")][Guid("3570366F-5111-4585-975E-A0A24394008D")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.SemanticSearchInternal.IImageSearchImageEmbeddingsSession2))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(SearchEmbeddingsSessionContract), 131072u)]
    public interface IImageSearchImageEmbeddingsSession2 : IImageSearchImageEmbeddingsSession, global::System.IDisposable
    {
        global::Windows.Foundation.IAsyncOperation<global::Microsoft.Windows.SemanticSearch.EmbeddingVector> CreateAsync(global::Microsoft.Windows.PrivateCommon.ImageBufferView imageBufferView, global::Microsoft.Windows.PrivateCommon.ImageBufferViewData imageBufferViewData, uint priority, uint frequency);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.SemanticSearchInternal")][Guid("18FC4D6A-893C-5886-9727-6F5996D5B977")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.SemanticSearchInternal.IImageSearchImageEmbeddingsSession3))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(SearchEmbeddingsSessionContract), 196608u)]
    public interface IImageSearchImageEmbeddingsSession3 : IImageSearchImageEmbeddingsSession2, IImageSearchImageEmbeddingsSession, global::System.IDisposable
    {
        global::Microsoft.Windows.SemanticSearch.EmbeddingVector Create(global::Microsoft.Windows.PrivateCommon.ImageBufferResource inputImageBufferResource, uint priority, uint frequency);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.SemanticSearchInternal")][Guid("A2A51C1F-3E02-5C8E-832F-C4FB15CE5CDD")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.SemanticSearchInternal.IImageSearchImageEmbeddingsSession4))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(SearchEmbeddingsSessionContract), 327680u)]
    public interface IImageSearchImageEmbeddingsSession4 : IImageSearchImageEmbeddingsSession3, IImageSearchImageEmbeddingsSession2, IImageSearchImageEmbeddingsSession, global::System.IDisposable
    {
        uint GetIntermediateOutputLength();
        float[] ProcessIntermediate(global::Microsoft.Windows.PrivateCommon.ImageBufferResource image, uint outputLength, uint priority);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.SemanticSearchInternal")][Guid("7D0C86ED-25E9-5E2A-B9AC-288967A79E1E")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.SemanticSearchInternal.IImageSearchTextEmbeddingsSession))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(SearchEmbeddingsSessionContract), 65536u)]
    public interface IImageSearchTextEmbeddingsSession : global::System.IDisposable
    {
        global::Windows.Foundation.IAsyncOperation<global::Microsoft.Windows.SemanticSearch.EmbeddingVector> CreateAsync(string text);
        string ModelVersion { get; }
        uint OutputLength { get; }
        Guid VectorSpaceId { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.SemanticSearchInternal")][Guid("F736791B-824F-4A4F-8716-0BCDFECE32E8")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.SemanticSearchInternal.IImageSearchTextEmbeddingsSession2))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(SearchEmbeddingsSessionContract), 131072u)]
    public interface IImageSearchTextEmbeddingsSession2 : IImageSearchTextEmbeddingsSession, global::System.IDisposable
    {
        global::Windows.Foundation.IAsyncOperation<global::Microsoft.Windows.SemanticSearch.EmbeddingVector> CreateAsync(string text, uint priority, uint frequency);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.SemanticSearchInternal")][Guid("74EBC6A4-8320-51CB-9CAA-510F3F5BDC8A")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.SemanticSearchInternal.IImageSearchTextEmbeddingsSession3))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(SearchEmbeddingsSessionContract), 196608u)]
    public interface IImageSearchTextEmbeddingsSession3 : IImageSearchTextEmbeddingsSession2, IImageSearchTextEmbeddingsSession, global::System.IDisposable
    {
        global::Microsoft.Windows.SemanticSearch.EmbeddingVector Create(string text, uint priority, uint frequency);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.SemanticSearchInternal")][Guid("12DC66B6-324A-5FA0-8A35-A1BF74B4A788")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.SemanticSearchInternal.IImageSearchTextEmbeddingsSession4))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(SearchEmbeddingsSessionContract), 262144u)]
    public interface IImageSearchTextEmbeddingsSession4 : IImageSearchTextEmbeddingsSession3, IImageSearchTextEmbeddingsSession2, IImageSearchTextEmbeddingsSession, global::System.IDisposable
    {
        global::Microsoft.Windows.SemanticSearch.EmbeddingVector CreateFromTokens(long[] tokens, uint priority, uint frequency);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.SemanticSearchInternal")][Guid("4B174608-58B5-5976-B6B2-1AC8BCD69396")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.SemanticSearchInternal.IQueryBlockListMatch))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(QueryBlockListContract), 65539u)]
    public interface IQueryBlockListMatch
    {
        QueryBlockListMatchReason Reason { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.SemanticSearchInternal")][Guid("9ABE3085-B246-5486-AD21-F13776722980")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.SemanticSearchInternal.IQueryBlockListSession))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(QueryBlockListContract), 65536u)]
    public interface IQueryBlockListSession : global::System.IDisposable
    {
        bool IsQueryBlocked(string query, string inputLanguage);
        string Version { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.SemanticSearchInternal")][Guid("83033278-0AC2-5ED4-886F-885C00483138")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.SemanticSearchInternal.IQueryBlockListSession2))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(QueryBlockListContract), 65537u)]
    public interface IQueryBlockListSession2
    {
        bool IsQueryBlocked(string query, string inputLanguage, string correlationId);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.SemanticSearchInternal")][Guid("7CEA750C-EDBD-5FDC-87AD-3D3C39A60A24")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.SemanticSearchInternal.IQueryBlockListSession3))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(QueryBlockListContract), 65539u)]
    public interface IQueryBlockListSession3 : IQueryBlockListSession2
    {
        IQueryBlockListMatch[] FindMatches(string query, string inputLanguage, string correlationId);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.SemanticSearchInternal")][Guid("3E5386FB-375C-507C-9413-3DB32CA5A4AC")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.SemanticSearchInternal.IQueryProcessorSession))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(QueryProcessorSessionContract), 65536u)]
    public interface IQueryProcessorSession : global::System.IDisposable
    {
        global::Windows.Foundation.IAsyncOperation<QueryParametersInternal> GetQueryParametersAsync(string naturalLanguageQuery);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.SemanticSearchInternal")][Guid("68FE6A62-809F-4111-90D1-9A88D1B963A7")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.SemanticSearchInternal.IQueryProcessorSession2))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(QueryProcessorSessionContract), 131072u)]
    public interface IQueryProcessorSession2 : IQueryProcessorSession, global::System.IDisposable
    {
        global::Windows.Foundation.IAsyncOperation<QueryParametersInternal> GetQueryParametersAsync(string naturalLanguageQuery, uint priority, uint frequency);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.SemanticSearchInternal")][Guid("D7E45E37-5D84-5E82-91EC-72F1D2BA9AA8")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.SemanticSearchInternal.IQueryProcessorSession3))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(QueryProcessorSessionContract), 196608u)]
    public interface IQueryProcessorSession3 : IQueryProcessorSession2, IQueryProcessorSession, global::System.IDisposable
    {
        QueryParametersInternal GetQueryParameters(string naturalLanguageQuery, uint priority, uint frequency);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.SemanticSearchInternal")][Guid("7A90FB2C-7FDC-5F64-A568-003A6DB181E4")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.SemanticSearchInternal.ISemanticTextSession))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(SemanticTextSessionContract), 65536u)]
    public interface ISemanticTextSession : global::System.IDisposable
    {
        global::Windows.Foundation.IAsyncAction CreateAsync(string text, float[] values);
        global::Windows.Foundation.IAsyncAction CreateFromTokensAsync(long[] tokens, float[] values);
        void Create(string text, float[] values);
        void CreateFromTokens(long[] tokens, float[] values);
        string ModelVersion { get; }
        uint OutputLength { get; }
        Guid VectorSpaceId { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.SemanticSearchInternal")][Guid("41F72BCF-858F-4376-A536-DCD13634F780")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.SemanticSearchInternal.ISemanticTextSession2))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(SemanticTextSessionContract), 131072u)]
    public interface ISemanticTextSession2 : ISemanticTextSession, global::System.IDisposable
    {
        global::Windows.Foundation.IAsyncAction CreateAsync(string text, float[] values, uint priority, uint frequency);
        global::Windows.Foundation.IAsyncAction CreateFromTokensAsync(long[] tokens, float[] values, uint priority, uint frequency);
        void Create(string text, float[] values, uint priority, uint frequency);
        void CreateFromTokens(long[] tokens, float[] values, uint priority, uint frequency);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.SemanticSearchInternal")][Guid("42A8AFF8-9C3F-5A57-8B7A-94EB51183F7B")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.SemanticSearchInternal.ITokenizerSession))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(TokenizerSessionContract), 65536u)]
    public interface ITokenizerSession : global::System.IDisposable
    {
        bool ShouldTokenize(ulong charCount, ulong maxTokenCount);
        void Tokenize(ulong maxTokenCount, string text, long[] tokens, out ulong tokensUsed, ulong[] indices, out ulong indicesUsed);
        string ModelVersion { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.SemanticSearchInternal")][Guid("6CB09CEC-7207-5087-A50D-93A9210D9A4B")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.SemanticSearchInternal.ITopicProcessorSession))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(TopicProcessorSessionContract), 65536u)]
    public interface ITopicProcessorSession : global::System.IDisposable
    {
        global::Windows.Foundation.IAsyncOperation<global::System.Collections.Generic.IReadOnlyList<TopicInternal>> GetTopicsAsync(string text, uint maxCount);
        global::System.Collections.Generic.IReadOnlyList<TopicInternal> GetTopics(string text, uint maxCount);
        string GetDisplayName(string className, string languageTag);
        string ModelVersion { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.SemanticSearchInternal")][Guid("C7D57E7B-6935-4513-AE1E-30F6F5669DCA")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.SemanticSearchInternal.ITopicProcessorSession2))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(TopicProcessorSessionContract), 131072u)]
    public interface ITopicProcessorSession2 : ITopicProcessorSession, global::System.IDisposable
    {
        global::Windows.Foundation.IAsyncOperation<global::System.Collections.Generic.IReadOnlyList<TopicInternal>> GetTopicsAsync(string text, uint maxCount, uint priority, uint frequency);
        global::System.Collections.Generic.IReadOnlyList<TopicInternal> GetTopics(string text, uint maxCount, uint priority, uint frequency);
    }
    [global::Windows.Foundation.Metadata.ContractVersion(65539u)]
    public enum QueryBlockListContract
    {
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.SemanticSearchInternal")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<QueryBlockListMatchReason>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(QueryBlockListContract), 65539u)]
    public enum QueryBlockListMatchReason : int
    {
        Term = unchecked((int)0),
        Name = unchecked((int)0x1),
        Emoji = unchecked((int)0x2),
        SemanticSearchDisabled = unchecked((int)0x3),
        UnsupportedLanguage = unchecked((int)0x4),
        Other = unchecked((int)0x5),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.SemanticSearchInternal", "struct(Microsoft.Windows.SemanticSearchInternal.QueryParametersInternal;string;string;string)")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.SemanticSearchInternal.QueryParametersInternal))][global::WinRT.WinRTExposedType(typeof(global::WinRT.StructTypeDetails<QueryParametersInternal, global::ABI.Microsoft.Windows.SemanticSearchInternal.QueryParametersInternal>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(QueryProcessorSessionContract), 65536u)]
    public struct QueryParametersInternal: IEquatable<QueryParametersInternal>
    {
        public string FileType;
        public string Content;
        public string TimeStatement;

        public QueryParametersInternal(string _FileType, string _Content, string _TimeStatement)
        {
            FileType = _FileType; Content = _Content; TimeStatement = _TimeStatement; 
        }

        public static bool operator ==(QueryParametersInternal x, QueryParametersInternal y) => x.FileType == y.FileType && x.Content == y.Content && x.TimeStatement == y.TimeStatement;
        public static bool operator !=(QueryParametersInternal x, QueryParametersInternal y) => !(x == y);
        public bool Equals(QueryParametersInternal other) => this == other;
        public override bool Equals(object obj) => obj is QueryParametersInternal that && this == that;
        public override int GetHashCode() => FileType.GetHashCode() ^ Content.GetHashCode() ^ TimeStatement.GetHashCode();
    }
    [global::Windows.Foundation.Metadata.ContractVersion(196608u)]
    public enum QueryProcessorSessionContract
    {
    }
    [global::Windows.Foundation.Metadata.ContractVersion(327680u)]
    public enum SearchEmbeddingsSessionContract
    {
    }
    [global::Windows.Foundation.Metadata.ContractVersion(131072u)]
    public enum SemanticTextSessionContract
    {
    }
    [global::Windows.Foundation.Metadata.ContractVersion(65536u)]
    public enum TokenizerSessionContract
    {
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.SemanticSearchInternal", "struct(Microsoft.Windows.SemanticSearchInternal.TopicInternal;string;f4)")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.SemanticSearchInternal.TopicInternal))][global::WinRT.WinRTExposedType(typeof(global::WinRT.StructTypeDetails<TopicInternal, global::ABI.Microsoft.Windows.SemanticSearchInternal.TopicInternal>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(TopicProcessorSessionContract), 65536u)]
    public struct TopicInternal: IEquatable<TopicInternal>
    {
        public string ClassName;
        public float Score;

        public TopicInternal(string _ClassName, float _Score)
        {
            ClassName = _ClassName; Score = _Score; 
        }

        public static bool operator ==(TopicInternal x, TopicInternal y) => x.ClassName == y.ClassName && x.Score == y.Score;
        public static bool operator !=(TopicInternal x, TopicInternal y) => !(x == y);
        public bool Equals(TopicInternal other) => this == other;
        public override bool Equals(object obj) => obj is TopicInternal that && this == that;
        public override int GetHashCode() => ClassName.GetHashCode() ^ Score.GetHashCode();
    }
    [global::Windows.Foundation.Metadata.ContractVersion(131072u)]
    public enum TopicProcessorSessionContract
    {
    }
}

#pragma warning disable CA1416
namespace ABI.Microsoft.Windows.SemanticSearchInternal
{
    public static class IImageSearchImageEmbeddingsSessionMethods
    {


        public static unsafe global::Windows.Foundation.IAsyncOperation<global::Microsoft.Windows.SemanticSearch.EmbeddingVector> CreateAsync(IObjectReference _obj, global::Microsoft.Windows.PrivateCommon.ImageBufferView imageBufferView, global::Microsoft.Windows.PrivateCommon.ImageBufferViewData imageBufferViewData)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Windows.PrivateCommon.ImageBufferView, global::Microsoft.Windows.PrivateCommon.ImageBufferViewData, IntPtr*, int>**)ThisPtr)[6](ThisPtr, imageBufferView, imageBufferViewData, &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperation_1_Microsoft_Windows_SemanticSearch_EmbeddingVector.EnsureInitialized();
                return MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Microsoft.Windows.SemanticSearch.EmbeddingVector>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Microsoft.Windows.SemanticSearch.EmbeddingVector>>.DisposeAbi(__retval);
            }
        }
        public static unsafe string get_ModelVersion(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[9](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }

        public static unsafe uint get_OutputLength(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            uint __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, uint*, int>**)ThisPtr)[7](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        public static unsafe Guid get_VectorSpaceId(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            Guid __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, Guid*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x98, 0x81, 0x28, 0x6, 0x82, 0x6, 0x54, 0x57, 0x8F, 0xC2, 0x8, 0x7D, 0x32, 0x19, 0xA4, 0xD3 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

        public static global::System.IntPtr AbiToProjectionVftablePtr => IImageSearchImageEmbeddingsSession.AbiToProjectionVftablePtr;

    }
    [DynamicInterfaceCastableImplementation]
    [Guid("06288198-0682-5754-8FC2-087D3219A4D3")]
    internal unsafe interface IImageSearchImageEmbeddingsSession : global::Microsoft.Windows.SemanticSearchInternal.IImageSearchImageEmbeddingsSession
    {

        public static readonly IntPtr AbiToProjectionVftablePtr;
        static unsafe IImageSearchImageEmbeddingsSession()
        {
            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(IImageSearchImageEmbeddingsSession), sizeof(IInspectable.Vftbl) + sizeof(IntPtr) * 4);
            *(IInspectable.Vftbl*)AbiToProjectionVftablePtr = IInspectable.Vftbl.AbiToProjectionVftable;
            ((delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Windows.PrivateCommon.ImageBufferView, global::Microsoft.Windows.PrivateCommon.ImageBufferViewData, IntPtr*, int>*)AbiToProjectionVftablePtr)[6] = &Do_Abi_CreateAsync_0;
            ((delegate* unmanaged[Stdcall]<IntPtr, uint*, int>*)AbiToProjectionVftablePtr)[7] = &Do_Abi_get_OutputLength_1;
            ((delegate* unmanaged[Stdcall]<IntPtr, Guid*, int>*)AbiToProjectionVftablePtr)[8] = &Do_Abi_get_VectorSpaceId_2;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>*)AbiToProjectionVftablePtr)[9] = &Do_Abi_get_ModelVersion_3;
        }

        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_CreateAsync_0(IntPtr thisPtr, global::Microsoft.Windows.PrivateCommon.ImageBufferView imageBufferView, global::Microsoft.Windows.PrivateCommon.ImageBufferViewData imageBufferViewData, IntPtr* operation)
        {
            _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperation_1_Microsoft_Windows_SemanticSearch_EmbeddingVector.EnsureInitialized();

            global::Windows.Foundation.IAsyncOperation<global::Microsoft.Windows.SemanticSearch.EmbeddingVector> __operation = default;

            *operation = default;

            try
            {
                __operation = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.Windows.SemanticSearchInternal.IImageSearchImageEmbeddingsSession>(thisPtr).CreateAsync(imageBufferView, imageBufferViewData);
                *operation = MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Microsoft.Windows.SemanticSearch.EmbeddingVector>>.FromManaged(__operation);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_ModelVersion_3(IntPtr thisPtr, IntPtr* value)
        {

            string __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.Windows.SemanticSearchInternal.IImageSearchImageEmbeddingsSession>(thisPtr).ModelVersion;
                *value = MarshalString.FromManaged(__value);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_OutputLength_1(IntPtr thisPtr, uint* value)
        {

            uint __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.Windows.SemanticSearchInternal.IImageSearchImageEmbeddingsSession>(thisPtr).OutputLength;
                *value = __value;

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_VectorSpaceId_2(IntPtr thisPtr, Guid* value)
        {

            Guid __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.Windows.SemanticSearchInternal.IImageSearchImageEmbeddingsSession>(thisPtr).VectorSpaceId;
                *value = __value;

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }

        unsafe global::Windows.Foundation.IAsyncOperation<global::Microsoft.Windows.SemanticSearch.EmbeddingVector> global::Microsoft.Windows.SemanticSearchInternal.IImageSearchImageEmbeddingsSession.CreateAsync(global::Microsoft.Windows.PrivateCommon.ImageBufferView imageBufferView, global::Microsoft.Windows.PrivateCommon.ImageBufferViewData imageBufferViewData)
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.Windows.SemanticSearchInternal.IImageSearchImageEmbeddingsSession).TypeHandle));
            return global::ABI.Microsoft.Windows.SemanticSearchInternal.IImageSearchImageEmbeddingsSessionMethods.CreateAsync(_obj, imageBufferView, imageBufferViewData);
        }

        unsafe string global::Microsoft.Windows.SemanticSearchInternal.IImageSearchImageEmbeddingsSession.ModelVersion
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.Windows.SemanticSearchInternal.IImageSearchImageEmbeddingsSession).TypeHandle));
                return global::ABI.Microsoft.Windows.SemanticSearchInternal.IImageSearchImageEmbeddingsSessionMethods.get_ModelVersion(_obj);
            }
        }

        unsafe uint global::Microsoft.Windows.SemanticSearchInternal.IImageSearchImageEmbeddingsSession.OutputLength
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.Windows.SemanticSearchInternal.IImageSearchImageEmbeddingsSession).TypeHandle));
                return global::ABI.Microsoft.Windows.SemanticSearchInternal.IImageSearchImageEmbeddingsSessionMethods.get_OutputLength(_obj);
            }
        }

        unsafe Guid global::Microsoft.Windows.SemanticSearchInternal.IImageSearchImageEmbeddingsSession.VectorSpaceId
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.Windows.SemanticSearchInternal.IImageSearchImageEmbeddingsSession).TypeHandle));
                return global::ABI.Microsoft.Windows.SemanticSearchInternal.IImageSearchImageEmbeddingsSessionMethods.get_VectorSpaceId(_obj);
            }
        }

        void global::System.IDisposable.Dispose() => ((global::System.IDisposable)(IWinRTObject)this).Dispose();
    }

    public static class IImageSearchImageEmbeddingsSession2Methods
    {


        public static unsafe global::Windows.Foundation.IAsyncOperation<global::Microsoft.Windows.SemanticSearch.EmbeddingVector> CreateAsync(IObjectReference _obj, global::Microsoft.Windows.PrivateCommon.ImageBufferView imageBufferView, global::Microsoft.Windows.PrivateCommon.ImageBufferViewData imageBufferViewData, uint priority, uint frequency)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Windows.PrivateCommon.ImageBufferView, global::Microsoft.Windows.PrivateCommon.ImageBufferViewData, uint, uint, IntPtr*, int>**)ThisPtr)[6](ThisPtr, imageBufferView, imageBufferViewData, priority, frequency, &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperation_1_Microsoft_Windows_SemanticSearch_EmbeddingVector.EnsureInitialized();
                return MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Microsoft.Windows.SemanticSearch.EmbeddingVector>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Microsoft.Windows.SemanticSearch.EmbeddingVector>>.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x6F, 0x36, 0x70, 0x35, 0x11, 0x51, 0x85, 0x45, 0x97, 0x5E, 0xA0, 0xA2, 0x43, 0x94, 0x0, 0x8D };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

        public static global::System.IntPtr AbiToProjectionVftablePtr => IImageSearchImageEmbeddingsSession2.AbiToProjectionVftablePtr;

    }
    [DynamicInterfaceCastableImplementation]
    [Guid("3570366F-5111-4585-975E-A0A24394008D")]
    internal unsafe interface IImageSearchImageEmbeddingsSession2 : global::Microsoft.Windows.SemanticSearchInternal.IImageSearchImageEmbeddingsSession2
    {

        public static readonly IntPtr AbiToProjectionVftablePtr;
        static unsafe IImageSearchImageEmbeddingsSession2()
        {
            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(IImageSearchImageEmbeddingsSession2), sizeof(IInspectable.Vftbl) + sizeof(IntPtr) * 1);
            *(IInspectable.Vftbl*)AbiToProjectionVftablePtr = IInspectable.Vftbl.AbiToProjectionVftable;
            ((delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Windows.PrivateCommon.ImageBufferView, global::Microsoft.Windows.PrivateCommon.ImageBufferViewData, uint, uint, IntPtr*, int>*)AbiToProjectionVftablePtr)[6] = &Do_Abi_CreateAsync_0;
        }

        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_CreateAsync_0(IntPtr thisPtr, global::Microsoft.Windows.PrivateCommon.ImageBufferView imageBufferView, global::Microsoft.Windows.PrivateCommon.ImageBufferViewData imageBufferViewData, uint priority, uint frequency, IntPtr* operation)
        {
            _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperation_1_Microsoft_Windows_SemanticSearch_EmbeddingVector.EnsureInitialized();

            global::Windows.Foundation.IAsyncOperation<global::Microsoft.Windows.SemanticSearch.EmbeddingVector> __operation = default;

            *operation = default;

            try
            {
                __operation = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.Windows.SemanticSearchInternal.IImageSearchImageEmbeddingsSession2>(thisPtr).CreateAsync(imageBufferView, imageBufferViewData, priority, frequency);
                *operation = MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Microsoft.Windows.SemanticSearch.EmbeddingVector>>.FromManaged(__operation);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }

        unsafe global::Windows.Foundation.IAsyncOperation<global::Microsoft.Windows.SemanticSearch.EmbeddingVector> global::Microsoft.Windows.SemanticSearchInternal.IImageSearchImageEmbeddingsSession2.CreateAsync(global::Microsoft.Windows.PrivateCommon.ImageBufferView imageBufferView, global::Microsoft.Windows.PrivateCommon.ImageBufferViewData imageBufferViewData, uint priority, uint frequency)
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.Windows.SemanticSearchInternal.IImageSearchImageEmbeddingsSession2).TypeHandle));
            return global::ABI.Microsoft.Windows.SemanticSearchInternal.IImageSearchImageEmbeddingsSession2Methods.CreateAsync(_obj, imageBufferView, imageBufferViewData, priority, frequency);
        }

        global::Windows.Foundation.IAsyncOperation<global::Microsoft.Windows.SemanticSearch.EmbeddingVector> global::Microsoft.Windows.SemanticSearchInternal.IImageSearchImageEmbeddingsSession.CreateAsync(global::Microsoft.Windows.PrivateCommon.ImageBufferView imageBufferView, global::Microsoft.Windows.PrivateCommon.ImageBufferViewData imageBufferViewData) => ((global::Microsoft.Windows.SemanticSearchInternal.IImageSearchImageEmbeddingsSession)(IWinRTObject)this).CreateAsync(imageBufferView, imageBufferViewData);

        string global::Microsoft.Windows.SemanticSearchInternal.IImageSearchImageEmbeddingsSession.ModelVersion => ((global::Microsoft.Windows.SemanticSearchInternal.IImageSearchImageEmbeddingsSession)(IWinRTObject)this).ModelVersion;

        uint global::Microsoft.Windows.SemanticSearchInternal.IImageSearchImageEmbeddingsSession.OutputLength => ((global::Microsoft.Windows.SemanticSearchInternal.IImageSearchImageEmbeddingsSession)(IWinRTObject)this).OutputLength;

        Guid global::Microsoft.Windows.SemanticSearchInternal.IImageSearchImageEmbeddingsSession.VectorSpaceId => ((global::Microsoft.Windows.SemanticSearchInternal.IImageSearchImageEmbeddingsSession)(IWinRTObject)this).VectorSpaceId;

        void global::System.IDisposable.Dispose() => ((global::System.IDisposable)(IWinRTObject)this).Dispose();
    }

    public static class IImageSearchImageEmbeddingsSession3Methods
    {


        public static unsafe global::Microsoft.Windows.SemanticSearch.EmbeddingVector Create(IObjectReference _obj, global::Microsoft.Windows.PrivateCommon.ImageBufferResource inputImageBufferResource, uint priority, uint frequency)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __inputImageBufferResource = default;
            IntPtr __retval = default;
            try
            {
                __inputImageBufferResource = global::ABI.Microsoft.Windows.PrivateCommon.ImageBufferResource.CreateMarshaler2(inputImageBufferResource);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, uint, uint, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__inputImageBufferResource), priority, frequency, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.Windows.SemanticSearch.EmbeddingVector.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__inputImageBufferResource);
                global::ABI.Microsoft.Windows.SemanticSearch.EmbeddingVector.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x6A, 0x4D, 0xFC, 0x18, 0x3C, 0x89, 0x86, 0x58, 0x97, 0x27, 0x6F, 0x59, 0x96, 0xD5, 0xB9, 0x77 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

        public static global::System.IntPtr AbiToProjectionVftablePtr => IImageSearchImageEmbeddingsSession3.AbiToProjectionVftablePtr;

    }
    [DynamicInterfaceCastableImplementation]
    [Guid("18FC4D6A-893C-5886-9727-6F5996D5B977")]
    internal unsafe interface IImageSearchImageEmbeddingsSession3 : global::Microsoft.Windows.SemanticSearchInternal.IImageSearchImageEmbeddingsSession3
    {

        public static readonly IntPtr AbiToProjectionVftablePtr;
        static unsafe IImageSearchImageEmbeddingsSession3()
        {
            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(IImageSearchImageEmbeddingsSession3), sizeof(IInspectable.Vftbl) + sizeof(IntPtr) * 1);
            *(IInspectable.Vftbl*)AbiToProjectionVftablePtr = IInspectable.Vftbl.AbiToProjectionVftable;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, uint, uint, IntPtr*, int>*)AbiToProjectionVftablePtr)[6] = &Do_Abi_Create_0;
        }

        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_Create_0(IntPtr thisPtr, IntPtr inputImageBufferResource, uint priority, uint frequency, IntPtr* result)
        {

            global::Microsoft.Windows.SemanticSearch.EmbeddingVector __result = default;

            *result = default;

            try
            {
                __result = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.Windows.SemanticSearchInternal.IImageSearchImageEmbeddingsSession3>(thisPtr).Create(global::ABI.Microsoft.Windows.PrivateCommon.ImageBufferResource.FromAbi(inputImageBufferResource), priority, frequency);
                *result = global::ABI.Microsoft.Windows.SemanticSearch.EmbeddingVector.FromManaged(__result);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }

        unsafe global::Microsoft.Windows.SemanticSearch.EmbeddingVector global::Microsoft.Windows.SemanticSearchInternal.IImageSearchImageEmbeddingsSession3.Create(global::Microsoft.Windows.PrivateCommon.ImageBufferResource inputImageBufferResource, uint priority, uint frequency)
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.Windows.SemanticSearchInternal.IImageSearchImageEmbeddingsSession3).TypeHandle));
            return global::ABI.Microsoft.Windows.SemanticSearchInternal.IImageSearchImageEmbeddingsSession3Methods.Create(_obj, inputImageBufferResource, priority, frequency);
        }

        global::Windows.Foundation.IAsyncOperation<global::Microsoft.Windows.SemanticSearch.EmbeddingVector> global::Microsoft.Windows.SemanticSearchInternal.IImageSearchImageEmbeddingsSession.CreateAsync(global::Microsoft.Windows.PrivateCommon.ImageBufferView imageBufferView, global::Microsoft.Windows.PrivateCommon.ImageBufferViewData imageBufferViewData) => ((global::Microsoft.Windows.SemanticSearchInternal.IImageSearchImageEmbeddingsSession)(IWinRTObject)this).CreateAsync(imageBufferView, imageBufferViewData);

        string global::Microsoft.Windows.SemanticSearchInternal.IImageSearchImageEmbeddingsSession.ModelVersion => ((global::Microsoft.Windows.SemanticSearchInternal.IImageSearchImageEmbeddingsSession)(IWinRTObject)this).ModelVersion;

        uint global::Microsoft.Windows.SemanticSearchInternal.IImageSearchImageEmbeddingsSession.OutputLength => ((global::Microsoft.Windows.SemanticSearchInternal.IImageSearchImageEmbeddingsSession)(IWinRTObject)this).OutputLength;

        Guid global::Microsoft.Windows.SemanticSearchInternal.IImageSearchImageEmbeddingsSession.VectorSpaceId => ((global::Microsoft.Windows.SemanticSearchInternal.IImageSearchImageEmbeddingsSession)(IWinRTObject)this).VectorSpaceId;

        global::Windows.Foundation.IAsyncOperation<global::Microsoft.Windows.SemanticSearch.EmbeddingVector> global::Microsoft.Windows.SemanticSearchInternal.IImageSearchImageEmbeddingsSession2.CreateAsync(global::Microsoft.Windows.PrivateCommon.ImageBufferView imageBufferView, global::Microsoft.Windows.PrivateCommon.ImageBufferViewData imageBufferViewData, uint priority, uint frequency) => ((global::Microsoft.Windows.SemanticSearchInternal.IImageSearchImageEmbeddingsSession2)(IWinRTObject)this).CreateAsync(imageBufferView, imageBufferViewData, priority, frequency);

        void global::System.IDisposable.Dispose() => ((global::System.IDisposable)(IWinRTObject)this).Dispose();
    }

    public static class IImageSearchImageEmbeddingsSession4Methods
    {


        public static unsafe uint GetIntermediateOutputLength(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            uint __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, uint*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        public static unsafe float[] ProcessIntermediate(IObjectReference _obj, global::Microsoft.Windows.PrivateCommon.ImageBufferResource image, uint outputLength, uint priority)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __image = default;
            int __retval_length = default;
            IntPtr __retval_data = default;
            try
            {
                __image = global::ABI.Microsoft.Windows.PrivateCommon.ImageBufferResource.CreateMarshaler2(image);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, uint, uint, int*, IntPtr*, int>**)ThisPtr)[7](ThisPtr, MarshalInspectable<object>.GetAbi(__image), outputLength, priority, &__retval_length, &__retval_data));
                global::System.GC.KeepAlive(_obj);
                return MarshalBlittable<float>.FromAbiArray((__retval_length, __retval_data));
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__image);
                MarshalBlittable<float>.DisposeAbiArray((__retval_length, __retval_data));
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x1F, 0x1C, 0xA5, 0xA2, 0x2, 0x3E, 0x8E, 0x5C, 0x83, 0x2F, 0xC4, 0xFB, 0x15, 0xCE, 0x5C, 0xDD };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

        public static global::System.IntPtr AbiToProjectionVftablePtr => IImageSearchImageEmbeddingsSession4.AbiToProjectionVftablePtr;

    }
    [DynamicInterfaceCastableImplementation]
    [Guid("A2A51C1F-3E02-5C8E-832F-C4FB15CE5CDD")]
    internal unsafe interface IImageSearchImageEmbeddingsSession4 : global::Microsoft.Windows.SemanticSearchInternal.IImageSearchImageEmbeddingsSession4
    {

        public static readonly IntPtr AbiToProjectionVftablePtr;
        static unsafe IImageSearchImageEmbeddingsSession4()
        {
            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(IImageSearchImageEmbeddingsSession4), sizeof(IInspectable.Vftbl) + sizeof(IntPtr) * 2);
            *(IInspectable.Vftbl*)AbiToProjectionVftablePtr = IInspectable.Vftbl.AbiToProjectionVftable;
            ((delegate* unmanaged[Stdcall]<IntPtr, uint*, int>*)AbiToProjectionVftablePtr)[6] = &Do_Abi_GetIntermediateOutputLength_0;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, uint, uint, int*, IntPtr*, int>*)AbiToProjectionVftablePtr)[7] = &Do_Abi_ProcessIntermediate_1;
        }

        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_GetIntermediateOutputLength_0(IntPtr thisPtr, uint* result)
        {

            uint __result = default;

            *result = default;

            try
            {
                __result = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.Windows.SemanticSearchInternal.IImageSearchImageEmbeddingsSession4>(thisPtr).GetIntermediateOutputLength();
                *result = __result;

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_ProcessIntermediate_1(IntPtr thisPtr, IntPtr image, uint outputLength, uint priority, int* __resultSize, IntPtr* result)
        {

            float[] __result = default;

            *result = default;
            *__resultSize = default;

            try
            {
                __result = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.Windows.SemanticSearchInternal.IImageSearchImageEmbeddingsSession4>(thisPtr).ProcessIntermediate(global::ABI.Microsoft.Windows.PrivateCommon.ImageBufferResource.FromAbi(image), outputLength, priority);
                (*__resultSize, *result) = MarshalBlittable<float>.FromManagedArray(__result);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }

        unsafe uint global::Microsoft.Windows.SemanticSearchInternal.IImageSearchImageEmbeddingsSession4.GetIntermediateOutputLength()
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.Windows.SemanticSearchInternal.IImageSearchImageEmbeddingsSession4).TypeHandle));
            return global::ABI.Microsoft.Windows.SemanticSearchInternal.IImageSearchImageEmbeddingsSession4Methods.GetIntermediateOutputLength(_obj);
        }

        unsafe float[] global::Microsoft.Windows.SemanticSearchInternal.IImageSearchImageEmbeddingsSession4.ProcessIntermediate(global::Microsoft.Windows.PrivateCommon.ImageBufferResource image, uint outputLength, uint priority)
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.Windows.SemanticSearchInternal.IImageSearchImageEmbeddingsSession4).TypeHandle));
            return global::ABI.Microsoft.Windows.SemanticSearchInternal.IImageSearchImageEmbeddingsSession4Methods.ProcessIntermediate(_obj, image, outputLength, priority);
        }

        global::Windows.Foundation.IAsyncOperation<global::Microsoft.Windows.SemanticSearch.EmbeddingVector> global::Microsoft.Windows.SemanticSearchInternal.IImageSearchImageEmbeddingsSession.CreateAsync(global::Microsoft.Windows.PrivateCommon.ImageBufferView imageBufferView, global::Microsoft.Windows.PrivateCommon.ImageBufferViewData imageBufferViewData) => ((global::Microsoft.Windows.SemanticSearchInternal.IImageSearchImageEmbeddingsSession)(IWinRTObject)this).CreateAsync(imageBufferView, imageBufferViewData);

        string global::Microsoft.Windows.SemanticSearchInternal.IImageSearchImageEmbeddingsSession.ModelVersion => ((global::Microsoft.Windows.SemanticSearchInternal.IImageSearchImageEmbeddingsSession)(IWinRTObject)this).ModelVersion;

        uint global::Microsoft.Windows.SemanticSearchInternal.IImageSearchImageEmbeddingsSession.OutputLength => ((global::Microsoft.Windows.SemanticSearchInternal.IImageSearchImageEmbeddingsSession)(IWinRTObject)this).OutputLength;

        Guid global::Microsoft.Windows.SemanticSearchInternal.IImageSearchImageEmbeddingsSession.VectorSpaceId => ((global::Microsoft.Windows.SemanticSearchInternal.IImageSearchImageEmbeddingsSession)(IWinRTObject)this).VectorSpaceId;

        global::Windows.Foundation.IAsyncOperation<global::Microsoft.Windows.SemanticSearch.EmbeddingVector> global::Microsoft.Windows.SemanticSearchInternal.IImageSearchImageEmbeddingsSession2.CreateAsync(global::Microsoft.Windows.PrivateCommon.ImageBufferView imageBufferView, global::Microsoft.Windows.PrivateCommon.ImageBufferViewData imageBufferViewData, uint priority, uint frequency) => ((global::Microsoft.Windows.SemanticSearchInternal.IImageSearchImageEmbeddingsSession2)(IWinRTObject)this).CreateAsync(imageBufferView, imageBufferViewData, priority, frequency);

        global::Microsoft.Windows.SemanticSearch.EmbeddingVector global::Microsoft.Windows.SemanticSearchInternal.IImageSearchImageEmbeddingsSession3.Create(global::Microsoft.Windows.PrivateCommon.ImageBufferResource inputImageBufferResource, uint priority, uint frequency) => ((global::Microsoft.Windows.SemanticSearchInternal.IImageSearchImageEmbeddingsSession3)(IWinRTObject)this).Create(inputImageBufferResource, priority, frequency);

        void global::System.IDisposable.Dispose() => ((global::System.IDisposable)(IWinRTObject)this).Dispose();
    }

    public static class IImageSearchTextEmbeddingsSessionMethods
    {


        public static unsafe global::Windows.Foundation.IAsyncOperation<global::Microsoft.Windows.SemanticSearch.EmbeddingVector> CreateAsync(IObjectReference _obj, string text)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                MarshalString.Pinnable __text = new(text);
                fixed(void* ___text = __text)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalString.GetAbi(ref __text), &__retval));
                    global::System.GC.KeepAlive(_obj);
                    _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperation_1_Microsoft_Windows_SemanticSearch_EmbeddingVector.EnsureInitialized();
                    return MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Microsoft.Windows.SemanticSearch.EmbeddingVector>>.FromAbi(__retval);
                }
            }
            finally
            {
                MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Microsoft.Windows.SemanticSearch.EmbeddingVector>>.DisposeAbi(__retval);
            }
        }
        public static unsafe string get_ModelVersion(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[9](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }

        public static unsafe uint get_OutputLength(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            uint __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, uint*, int>**)ThisPtr)[7](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        public static unsafe Guid get_VectorSpaceId(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            Guid __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, Guid*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xED, 0x86, 0xC, 0x7D, 0xE9, 0x25, 0x2A, 0x5E, 0xB9, 0xAC, 0x28, 0x89, 0x67, 0xA7, 0x9E, 0x1E };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

        public static global::System.IntPtr AbiToProjectionVftablePtr => IImageSearchTextEmbeddingsSession.AbiToProjectionVftablePtr;

    }
    [DynamicInterfaceCastableImplementation]
    [Guid("7D0C86ED-25E9-5E2A-B9AC-288967A79E1E")]
    internal unsafe interface IImageSearchTextEmbeddingsSession : global::Microsoft.Windows.SemanticSearchInternal.IImageSearchTextEmbeddingsSession
    {

        public static readonly IntPtr AbiToProjectionVftablePtr;
        static unsafe IImageSearchTextEmbeddingsSession()
        {
            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(IImageSearchTextEmbeddingsSession), sizeof(IInspectable.Vftbl) + sizeof(IntPtr) * 4);
            *(IInspectable.Vftbl*)AbiToProjectionVftablePtr = IInspectable.Vftbl.AbiToProjectionVftable;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>*)AbiToProjectionVftablePtr)[6] = &Do_Abi_CreateAsync_0;
            ((delegate* unmanaged[Stdcall]<IntPtr, uint*, int>*)AbiToProjectionVftablePtr)[7] = &Do_Abi_get_OutputLength_1;
            ((delegate* unmanaged[Stdcall]<IntPtr, Guid*, int>*)AbiToProjectionVftablePtr)[8] = &Do_Abi_get_VectorSpaceId_2;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>*)AbiToProjectionVftablePtr)[9] = &Do_Abi_get_ModelVersion_3;
        }

        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_CreateAsync_0(IntPtr thisPtr, IntPtr text, IntPtr* operation)
        {
            _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperation_1_Microsoft_Windows_SemanticSearch_EmbeddingVector.EnsureInitialized();

            global::Windows.Foundation.IAsyncOperation<global::Microsoft.Windows.SemanticSearch.EmbeddingVector> __operation = default;

            *operation = default;

            try
            {
                __operation = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.Windows.SemanticSearchInternal.IImageSearchTextEmbeddingsSession>(thisPtr).CreateAsync(MarshalString.FromAbi(text));
                *operation = MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Microsoft.Windows.SemanticSearch.EmbeddingVector>>.FromManaged(__operation);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_ModelVersion_3(IntPtr thisPtr, IntPtr* value)
        {

            string __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.Windows.SemanticSearchInternal.IImageSearchTextEmbeddingsSession>(thisPtr).ModelVersion;
                *value = MarshalString.FromManaged(__value);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_OutputLength_1(IntPtr thisPtr, uint* value)
        {

            uint __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.Windows.SemanticSearchInternal.IImageSearchTextEmbeddingsSession>(thisPtr).OutputLength;
                *value = __value;

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_VectorSpaceId_2(IntPtr thisPtr, Guid* value)
        {

            Guid __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.Windows.SemanticSearchInternal.IImageSearchTextEmbeddingsSession>(thisPtr).VectorSpaceId;
                *value = __value;

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }

        unsafe global::Windows.Foundation.IAsyncOperation<global::Microsoft.Windows.SemanticSearch.EmbeddingVector> global::Microsoft.Windows.SemanticSearchInternal.IImageSearchTextEmbeddingsSession.CreateAsync(string text)
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.Windows.SemanticSearchInternal.IImageSearchTextEmbeddingsSession).TypeHandle));
            return global::ABI.Microsoft.Windows.SemanticSearchInternal.IImageSearchTextEmbeddingsSessionMethods.CreateAsync(_obj, text);
        }

        unsafe string global::Microsoft.Windows.SemanticSearchInternal.IImageSearchTextEmbeddingsSession.ModelVersion
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.Windows.SemanticSearchInternal.IImageSearchTextEmbeddingsSession).TypeHandle));
                return global::ABI.Microsoft.Windows.SemanticSearchInternal.IImageSearchTextEmbeddingsSessionMethods.get_ModelVersion(_obj);
            }
        }

        unsafe uint global::Microsoft.Windows.SemanticSearchInternal.IImageSearchTextEmbeddingsSession.OutputLength
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.Windows.SemanticSearchInternal.IImageSearchTextEmbeddingsSession).TypeHandle));
                return global::ABI.Microsoft.Windows.SemanticSearchInternal.IImageSearchTextEmbeddingsSessionMethods.get_OutputLength(_obj);
            }
        }

        unsafe Guid global::Microsoft.Windows.SemanticSearchInternal.IImageSearchTextEmbeddingsSession.VectorSpaceId
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.Windows.SemanticSearchInternal.IImageSearchTextEmbeddingsSession).TypeHandle));
                return global::ABI.Microsoft.Windows.SemanticSearchInternal.IImageSearchTextEmbeddingsSessionMethods.get_VectorSpaceId(_obj);
            }
        }

        void global::System.IDisposable.Dispose() => ((global::System.IDisposable)(IWinRTObject)this).Dispose();
    }

    public static class IImageSearchTextEmbeddingsSession2Methods
    {


        public static unsafe global::Windows.Foundation.IAsyncOperation<global::Microsoft.Windows.SemanticSearch.EmbeddingVector> CreateAsync(IObjectReference _obj, string text, uint priority, uint frequency)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                MarshalString.Pinnable __text = new(text);
                fixed(void* ___text = __text)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, uint, uint, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalString.GetAbi(ref __text), priority, frequency, &__retval));
                    global::System.GC.KeepAlive(_obj);
                    _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperation_1_Microsoft_Windows_SemanticSearch_EmbeddingVector.EnsureInitialized();
                    return MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Microsoft.Windows.SemanticSearch.EmbeddingVector>>.FromAbi(__retval);
                }
            }
            finally
            {
                MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Microsoft.Windows.SemanticSearch.EmbeddingVector>>.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x1B, 0x79, 0x36, 0xF7, 0x4F, 0x82, 0x4F, 0x4A, 0x87, 0x16, 0xB, 0xCD, 0xFE, 0xCE, 0x32, 0xE8 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

        public static global::System.IntPtr AbiToProjectionVftablePtr => IImageSearchTextEmbeddingsSession2.AbiToProjectionVftablePtr;

    }
    [DynamicInterfaceCastableImplementation]
    [Guid("F736791B-824F-4A4F-8716-0BCDFECE32E8")]
    internal unsafe interface IImageSearchTextEmbeddingsSession2 : global::Microsoft.Windows.SemanticSearchInternal.IImageSearchTextEmbeddingsSession2
    {

        public static readonly IntPtr AbiToProjectionVftablePtr;
        static unsafe IImageSearchTextEmbeddingsSession2()
        {
            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(IImageSearchTextEmbeddingsSession2), sizeof(IInspectable.Vftbl) + sizeof(IntPtr) * 1);
            *(IInspectable.Vftbl*)AbiToProjectionVftablePtr = IInspectable.Vftbl.AbiToProjectionVftable;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, uint, uint, IntPtr*, int>*)AbiToProjectionVftablePtr)[6] = &Do_Abi_CreateAsync_0;
        }

        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_CreateAsync_0(IntPtr thisPtr, IntPtr text, uint priority, uint frequency, IntPtr* operation)
        {
            _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperation_1_Microsoft_Windows_SemanticSearch_EmbeddingVector.EnsureInitialized();

            global::Windows.Foundation.IAsyncOperation<global::Microsoft.Windows.SemanticSearch.EmbeddingVector> __operation = default;

            *operation = default;

            try
            {
                __operation = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.Windows.SemanticSearchInternal.IImageSearchTextEmbeddingsSession2>(thisPtr).CreateAsync(MarshalString.FromAbi(text), priority, frequency);
                *operation = MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Microsoft.Windows.SemanticSearch.EmbeddingVector>>.FromManaged(__operation);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }

        unsafe global::Windows.Foundation.IAsyncOperation<global::Microsoft.Windows.SemanticSearch.EmbeddingVector> global::Microsoft.Windows.SemanticSearchInternal.IImageSearchTextEmbeddingsSession2.CreateAsync(string text, uint priority, uint frequency)
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.Windows.SemanticSearchInternal.IImageSearchTextEmbeddingsSession2).TypeHandle));
            return global::ABI.Microsoft.Windows.SemanticSearchInternal.IImageSearchTextEmbeddingsSession2Methods.CreateAsync(_obj, text, priority, frequency);
        }

        global::Windows.Foundation.IAsyncOperation<global::Microsoft.Windows.SemanticSearch.EmbeddingVector> global::Microsoft.Windows.SemanticSearchInternal.IImageSearchTextEmbeddingsSession.CreateAsync(string text) => ((global::Microsoft.Windows.SemanticSearchInternal.IImageSearchTextEmbeddingsSession)(IWinRTObject)this).CreateAsync(text);

        string global::Microsoft.Windows.SemanticSearchInternal.IImageSearchTextEmbeddingsSession.ModelVersion => ((global::Microsoft.Windows.SemanticSearchInternal.IImageSearchTextEmbeddingsSession)(IWinRTObject)this).ModelVersion;

        uint global::Microsoft.Windows.SemanticSearchInternal.IImageSearchTextEmbeddingsSession.OutputLength => ((global::Microsoft.Windows.SemanticSearchInternal.IImageSearchTextEmbeddingsSession)(IWinRTObject)this).OutputLength;

        Guid global::Microsoft.Windows.SemanticSearchInternal.IImageSearchTextEmbeddingsSession.VectorSpaceId => ((global::Microsoft.Windows.SemanticSearchInternal.IImageSearchTextEmbeddingsSession)(IWinRTObject)this).VectorSpaceId;

        void global::System.IDisposable.Dispose() => ((global::System.IDisposable)(IWinRTObject)this).Dispose();
    }

    public static class IImageSearchTextEmbeddingsSession3Methods
    {


        public static unsafe global::Microsoft.Windows.SemanticSearch.EmbeddingVector Create(IObjectReference _obj, string text, uint priority, uint frequency)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                MarshalString.Pinnable __text = new(text);
                fixed(void* ___text = __text)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, uint, uint, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalString.GetAbi(ref __text), priority, frequency, &__retval));
                    global::System.GC.KeepAlive(_obj);
                    return global::ABI.Microsoft.Windows.SemanticSearch.EmbeddingVector.FromAbi(__retval);
                }
            }
            finally
            {
                global::ABI.Microsoft.Windows.SemanticSearch.EmbeddingVector.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xA4, 0xC6, 0xEB, 0x74, 0x20, 0x83, 0xCB, 0x51, 0x9C, 0xAA, 0x51, 0xF, 0x3F, 0x5B, 0xDC, 0x8A };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

        public static global::System.IntPtr AbiToProjectionVftablePtr => IImageSearchTextEmbeddingsSession3.AbiToProjectionVftablePtr;

    }
    [DynamicInterfaceCastableImplementation]
    [Guid("74EBC6A4-8320-51CB-9CAA-510F3F5BDC8A")]
    internal unsafe interface IImageSearchTextEmbeddingsSession3 : global::Microsoft.Windows.SemanticSearchInternal.IImageSearchTextEmbeddingsSession3
    {

        public static readonly IntPtr AbiToProjectionVftablePtr;
        static unsafe IImageSearchTextEmbeddingsSession3()
        {
            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(IImageSearchTextEmbeddingsSession3), sizeof(IInspectable.Vftbl) + sizeof(IntPtr) * 1);
            *(IInspectable.Vftbl*)AbiToProjectionVftablePtr = IInspectable.Vftbl.AbiToProjectionVftable;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, uint, uint, IntPtr*, int>*)AbiToProjectionVftablePtr)[6] = &Do_Abi_Create_0;
        }

        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_Create_0(IntPtr thisPtr, IntPtr text, uint priority, uint frequency, IntPtr* result)
        {

            global::Microsoft.Windows.SemanticSearch.EmbeddingVector __result = default;

            *result = default;

            try
            {
                __result = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.Windows.SemanticSearchInternal.IImageSearchTextEmbeddingsSession3>(thisPtr).Create(MarshalString.FromAbi(text), priority, frequency);
                *result = global::ABI.Microsoft.Windows.SemanticSearch.EmbeddingVector.FromManaged(__result);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }

        unsafe global::Microsoft.Windows.SemanticSearch.EmbeddingVector global::Microsoft.Windows.SemanticSearchInternal.IImageSearchTextEmbeddingsSession3.Create(string text, uint priority, uint frequency)
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.Windows.SemanticSearchInternal.IImageSearchTextEmbeddingsSession3).TypeHandle));
            return global::ABI.Microsoft.Windows.SemanticSearchInternal.IImageSearchTextEmbeddingsSession3Methods.Create(_obj, text, priority, frequency);
        }

        global::Windows.Foundation.IAsyncOperation<global::Microsoft.Windows.SemanticSearch.EmbeddingVector> global::Microsoft.Windows.SemanticSearchInternal.IImageSearchTextEmbeddingsSession.CreateAsync(string text) => ((global::Microsoft.Windows.SemanticSearchInternal.IImageSearchTextEmbeddingsSession)(IWinRTObject)this).CreateAsync(text);

        string global::Microsoft.Windows.SemanticSearchInternal.IImageSearchTextEmbeddingsSession.ModelVersion => ((global::Microsoft.Windows.SemanticSearchInternal.IImageSearchTextEmbeddingsSession)(IWinRTObject)this).ModelVersion;

        uint global::Microsoft.Windows.SemanticSearchInternal.IImageSearchTextEmbeddingsSession.OutputLength => ((global::Microsoft.Windows.SemanticSearchInternal.IImageSearchTextEmbeddingsSession)(IWinRTObject)this).OutputLength;

        Guid global::Microsoft.Windows.SemanticSearchInternal.IImageSearchTextEmbeddingsSession.VectorSpaceId => ((global::Microsoft.Windows.SemanticSearchInternal.IImageSearchTextEmbeddingsSession)(IWinRTObject)this).VectorSpaceId;

        global::Windows.Foundation.IAsyncOperation<global::Microsoft.Windows.SemanticSearch.EmbeddingVector> global::Microsoft.Windows.SemanticSearchInternal.IImageSearchTextEmbeddingsSession2.CreateAsync(string text, uint priority, uint frequency) => ((global::Microsoft.Windows.SemanticSearchInternal.IImageSearchTextEmbeddingsSession2)(IWinRTObject)this).CreateAsync(text, priority, frequency);

        void global::System.IDisposable.Dispose() => ((global::System.IDisposable)(IWinRTObject)this).Dispose();
    }

    public static class IImageSearchTextEmbeddingsSession4Methods
    {


        public static unsafe global::Microsoft.Windows.SemanticSearch.EmbeddingVector CreateFromTokens(IObjectReference _obj, long[] tokens, uint priority, uint frequency)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalBlittable<long>.MarshalerArray __tokens = default;
            int __tokens_length = default;
            IntPtr __tokens_data = default;
            IntPtr __retval = default;
            try
            {
                __tokens = MarshalBlittable<long>.CreateMarshalerArray(tokens);
                (__tokens_length, __tokens_data) = MarshalBlittable<long>.GetAbiArray(__tokens);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int, IntPtr, uint, uint, IntPtr*, int>**)ThisPtr)[6](ThisPtr, __tokens_length, __tokens_data, priority, frequency, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.Windows.SemanticSearch.EmbeddingVector.FromAbi(__retval);
            }
            finally
            {
                MarshalBlittable<long>.DisposeMarshalerArray(__tokens);
                global::ABI.Microsoft.Windows.SemanticSearch.EmbeddingVector.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xB6, 0x66, 0xDC, 0x12, 0x4A, 0x32, 0xA0, 0x5F, 0x8A, 0x35, 0xA1, 0xBF, 0x74, 0xB4, 0xA7, 0x88 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

        public static global::System.IntPtr AbiToProjectionVftablePtr => IImageSearchTextEmbeddingsSession4.AbiToProjectionVftablePtr;

    }
    [DynamicInterfaceCastableImplementation]
    [Guid("12DC66B6-324A-5FA0-8A35-A1BF74B4A788")]
    internal unsafe interface IImageSearchTextEmbeddingsSession4 : global::Microsoft.Windows.SemanticSearchInternal.IImageSearchTextEmbeddingsSession4
    {

        public static readonly IntPtr AbiToProjectionVftablePtr;
        static unsafe IImageSearchTextEmbeddingsSession4()
        {
            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(IImageSearchTextEmbeddingsSession4), sizeof(IInspectable.Vftbl) + sizeof(IntPtr) * 1);
            *(IInspectable.Vftbl*)AbiToProjectionVftablePtr = IInspectable.Vftbl.AbiToProjectionVftable;
            ((delegate* unmanaged[Stdcall]<IntPtr, int, IntPtr, uint, uint, IntPtr*, int>*)AbiToProjectionVftablePtr)[6] = &Do_Abi_CreateFromTokens_0;
        }

        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_CreateFromTokens_0(IntPtr thisPtr, int __tokensSize, IntPtr tokens, uint priority, uint frequency, IntPtr* result)
        {

            global::Microsoft.Windows.SemanticSearch.EmbeddingVector __result = default;

            *result = default;

            try
            {
                __result = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.Windows.SemanticSearchInternal.IImageSearchTextEmbeddingsSession4>(thisPtr).CreateFromTokens(MarshalBlittable<long>.FromAbiArray((__tokensSize, tokens)), priority, frequency);
                *result = global::ABI.Microsoft.Windows.SemanticSearch.EmbeddingVector.FromManaged(__result);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }

        unsafe global::Microsoft.Windows.SemanticSearch.EmbeddingVector global::Microsoft.Windows.SemanticSearchInternal.IImageSearchTextEmbeddingsSession4.CreateFromTokens(long[] tokens, uint priority, uint frequency)
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.Windows.SemanticSearchInternal.IImageSearchTextEmbeddingsSession4).TypeHandle));
            return global::ABI.Microsoft.Windows.SemanticSearchInternal.IImageSearchTextEmbeddingsSession4Methods.CreateFromTokens(_obj, tokens, priority, frequency);
        }

        global::Windows.Foundation.IAsyncOperation<global::Microsoft.Windows.SemanticSearch.EmbeddingVector> global::Microsoft.Windows.SemanticSearchInternal.IImageSearchTextEmbeddingsSession.CreateAsync(string text) => ((global::Microsoft.Windows.SemanticSearchInternal.IImageSearchTextEmbeddingsSession)(IWinRTObject)this).CreateAsync(text);

        string global::Microsoft.Windows.SemanticSearchInternal.IImageSearchTextEmbeddingsSession.ModelVersion => ((global::Microsoft.Windows.SemanticSearchInternal.IImageSearchTextEmbeddingsSession)(IWinRTObject)this).ModelVersion;

        uint global::Microsoft.Windows.SemanticSearchInternal.IImageSearchTextEmbeddingsSession.OutputLength => ((global::Microsoft.Windows.SemanticSearchInternal.IImageSearchTextEmbeddingsSession)(IWinRTObject)this).OutputLength;

        Guid global::Microsoft.Windows.SemanticSearchInternal.IImageSearchTextEmbeddingsSession.VectorSpaceId => ((global::Microsoft.Windows.SemanticSearchInternal.IImageSearchTextEmbeddingsSession)(IWinRTObject)this).VectorSpaceId;

        global::Windows.Foundation.IAsyncOperation<global::Microsoft.Windows.SemanticSearch.EmbeddingVector> global::Microsoft.Windows.SemanticSearchInternal.IImageSearchTextEmbeddingsSession2.CreateAsync(string text, uint priority, uint frequency) => ((global::Microsoft.Windows.SemanticSearchInternal.IImageSearchTextEmbeddingsSession2)(IWinRTObject)this).CreateAsync(text, priority, frequency);

        global::Microsoft.Windows.SemanticSearch.EmbeddingVector global::Microsoft.Windows.SemanticSearchInternal.IImageSearchTextEmbeddingsSession3.Create(string text, uint priority, uint frequency) => ((global::Microsoft.Windows.SemanticSearchInternal.IImageSearchTextEmbeddingsSession3)(IWinRTObject)this).Create(text, priority, frequency);

        void global::System.IDisposable.Dispose() => ((global::System.IDisposable)(IWinRTObject)this).Dispose();
    }

    public static class IQueryBlockListMatchMethods
    {

        public static unsafe global::Microsoft.Windows.SemanticSearchInternal.QueryBlockListMatchReason get_Reason(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.Windows.SemanticSearchInternal.QueryBlockListMatchReason __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Windows.SemanticSearchInternal.QueryBlockListMatchReason*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x8, 0x46, 0x17, 0x4B, 0xB5, 0x58, 0x76, 0x59, 0xB6, 0xB2, 0x1A, 0xC8, 0xBC, 0xD6, 0x93, 0x96 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

        public static global::System.IntPtr AbiToProjectionVftablePtr => IQueryBlockListMatch.AbiToProjectionVftablePtr;

    }
    [DynamicInterfaceCastableImplementation]
    [Guid("4B174608-58B5-5976-B6B2-1AC8BCD69396")]
    internal unsafe interface IQueryBlockListMatch : global::Microsoft.Windows.SemanticSearchInternal.IQueryBlockListMatch
    {

        public static readonly IntPtr AbiToProjectionVftablePtr;
        static unsafe IQueryBlockListMatch()
        {
            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(IQueryBlockListMatch), sizeof(IInspectable.Vftbl) + sizeof(IntPtr) * 1);
            *(IInspectable.Vftbl*)AbiToProjectionVftablePtr = IInspectable.Vftbl.AbiToProjectionVftable;
            ((delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Windows.SemanticSearchInternal.QueryBlockListMatchReason*, int>*)AbiToProjectionVftablePtr)[6] = &Do_Abi_get_Reason_0;
        }

        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_Reason_0(IntPtr thisPtr, global::Microsoft.Windows.SemanticSearchInternal.QueryBlockListMatchReason* value)
        {

            global::Microsoft.Windows.SemanticSearchInternal.QueryBlockListMatchReason __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.Windows.SemanticSearchInternal.IQueryBlockListMatch>(thisPtr).Reason;
                *value = __value;

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }

        unsafe global::Microsoft.Windows.SemanticSearchInternal.QueryBlockListMatchReason global::Microsoft.Windows.SemanticSearchInternal.IQueryBlockListMatch.Reason
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.Windows.SemanticSearchInternal.IQueryBlockListMatch).TypeHandle));
                return global::ABI.Microsoft.Windows.SemanticSearchInternal.IQueryBlockListMatchMethods.get_Reason(_obj);
            }
        }
    }

    public static class IQueryBlockListSessionMethods
    {


        public static unsafe bool IsQueryBlocked(IObjectReference _obj, string query, string inputLanguage)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            MarshalString.Pinnable __query = new(query);
            MarshalString.Pinnable __inputLanguage = new(inputLanguage);
            fixed(void* ___query = __query, ___inputLanguage = __inputLanguage)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, byte*, int>**)ThisPtr)[6](ThisPtr, MarshalString.GetAbi(ref __query), MarshalString.GetAbi(ref __inputLanguage), &__retval));
                global::System.GC.KeepAlive(_obj);
                return __retval != 0;
            }
        }
        public static unsafe string get_Version(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x85, 0x30, 0xBE, 0x9A, 0x46, 0xB2, 0x86, 0x54, 0xAD, 0x21, 0xF1, 0x37, 0x76, 0x72, 0x29, 0x80 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

        public static global::System.IntPtr AbiToProjectionVftablePtr => IQueryBlockListSession.AbiToProjectionVftablePtr;

    }
    [DynamicInterfaceCastableImplementation]
    [Guid("9ABE3085-B246-5486-AD21-F13776722980")]
    internal unsafe interface IQueryBlockListSession : global::Microsoft.Windows.SemanticSearchInternal.IQueryBlockListSession
    {

        public static readonly IntPtr AbiToProjectionVftablePtr;
        static unsafe IQueryBlockListSession()
        {
            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(IQueryBlockListSession), sizeof(IInspectable.Vftbl) + sizeof(IntPtr) * 2);
            *(IInspectable.Vftbl*)AbiToProjectionVftablePtr = IInspectable.Vftbl.AbiToProjectionVftable;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, byte*, int>*)AbiToProjectionVftablePtr)[6] = &Do_Abi_IsQueryBlocked_0;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>*)AbiToProjectionVftablePtr)[7] = &Do_Abi_get_Version_1;
        }

        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_IsQueryBlocked_0(IntPtr thisPtr, IntPtr query, IntPtr inputLanguage, byte* result)
        {

            bool __result = default;

            *result = default;

            try
            {
                __result = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.Windows.SemanticSearchInternal.IQueryBlockListSession>(thisPtr).IsQueryBlocked(MarshalString.FromAbi(query), MarshalString.FromAbi(inputLanguage));
                *result = (byte)(__result ? 1 : 0);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_Version_1(IntPtr thisPtr, IntPtr* value)
        {

            string __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.Windows.SemanticSearchInternal.IQueryBlockListSession>(thisPtr).Version;
                *value = MarshalString.FromManaged(__value);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }

        unsafe bool global::Microsoft.Windows.SemanticSearchInternal.IQueryBlockListSession.IsQueryBlocked(string query, string inputLanguage)
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.Windows.SemanticSearchInternal.IQueryBlockListSession).TypeHandle));
            return global::ABI.Microsoft.Windows.SemanticSearchInternal.IQueryBlockListSessionMethods.IsQueryBlocked(_obj, query, inputLanguage);
        }

        unsafe string global::Microsoft.Windows.SemanticSearchInternal.IQueryBlockListSession.Version
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.Windows.SemanticSearchInternal.IQueryBlockListSession).TypeHandle));
                return global::ABI.Microsoft.Windows.SemanticSearchInternal.IQueryBlockListSessionMethods.get_Version(_obj);
            }
        }

        void global::System.IDisposable.Dispose() => ((global::System.IDisposable)(IWinRTObject)this).Dispose();
    }

    public static class IQueryBlockListSession2Methods
    {


        public static unsafe bool IsQueryBlocked(IObjectReference _obj, string query, string inputLanguage, string correlationId)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            MarshalString.Pinnable __query = new(query);
            MarshalString.Pinnable __inputLanguage = new(inputLanguage);
            MarshalString.Pinnable __correlationId = new(correlationId);
            fixed(void* ___query = __query, ___inputLanguage = __inputLanguage, ___correlationId = __correlationId)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, IntPtr, byte*, int>**)ThisPtr)[6](ThisPtr, MarshalString.GetAbi(ref __query), MarshalString.GetAbi(ref __inputLanguage), MarshalString.GetAbi(ref __correlationId), &__retval));
                global::System.GC.KeepAlive(_obj);
                return __retval != 0;
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x78, 0x32, 0x3, 0x83, 0xC2, 0xA, 0xD4, 0x5E, 0x88, 0x6F, 0x88, 0x5C, 0x0, 0x48, 0x31, 0x38 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

        public static global::System.IntPtr AbiToProjectionVftablePtr => IQueryBlockListSession2.AbiToProjectionVftablePtr;

    }
    [DynamicInterfaceCastableImplementation]
    [Guid("83033278-0AC2-5ED4-886F-885C00483138")]
    internal unsafe interface IQueryBlockListSession2 : global::Microsoft.Windows.SemanticSearchInternal.IQueryBlockListSession2
    {

        public static readonly IntPtr AbiToProjectionVftablePtr;
        static unsafe IQueryBlockListSession2()
        {
            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(IQueryBlockListSession2), sizeof(IInspectable.Vftbl) + sizeof(IntPtr) * 1);
            *(IInspectable.Vftbl*)AbiToProjectionVftablePtr = IInspectable.Vftbl.AbiToProjectionVftable;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, IntPtr, byte*, int>*)AbiToProjectionVftablePtr)[6] = &Do_Abi_IsQueryBlocked_0;
        }

        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_IsQueryBlocked_0(IntPtr thisPtr, IntPtr query, IntPtr inputLanguage, IntPtr correlationId, byte* result)
        {

            bool __result = default;

            *result = default;

            try
            {
                __result = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.Windows.SemanticSearchInternal.IQueryBlockListSession2>(thisPtr).IsQueryBlocked(MarshalString.FromAbi(query), MarshalString.FromAbi(inputLanguage), MarshalString.FromAbi(correlationId));
                *result = (byte)(__result ? 1 : 0);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }

        unsafe bool global::Microsoft.Windows.SemanticSearchInternal.IQueryBlockListSession2.IsQueryBlocked(string query, string inputLanguage, string correlationId)
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.Windows.SemanticSearchInternal.IQueryBlockListSession2).TypeHandle));
            return global::ABI.Microsoft.Windows.SemanticSearchInternal.IQueryBlockListSession2Methods.IsQueryBlocked(_obj, query, inputLanguage, correlationId);
        }
    }

    public static class IQueryBlockListSession3Methods
    {


        public static unsafe global::Microsoft.Windows.SemanticSearchInternal.IQueryBlockListMatch[] FindMatches(IObjectReference _obj, string query, string inputLanguage, string correlationId)
        {
            var ThisPtr = _obj.ThisPtr;

            int __retval_length = default;
            IntPtr __retval_data = default;
            try
            {
                MarshalString.Pinnable __query = new(query);
                MarshalString.Pinnable __inputLanguage = new(inputLanguage);
                MarshalString.Pinnable __correlationId = new(correlationId);
                fixed(void* ___query = __query, ___inputLanguage = __inputLanguage, ___correlationId = __correlationId)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, IntPtr, int*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalString.GetAbi(ref __query), MarshalString.GetAbi(ref __inputLanguage), MarshalString.GetAbi(ref __correlationId), &__retval_length, &__retval_data));
                    global::System.GC.KeepAlive(_obj);
                    return MarshalInterface<global::Microsoft.Windows.SemanticSearchInternal.IQueryBlockListMatch>.FromAbiArray((__retval_length, __retval_data));
                }
            }
            finally
            {
                MarshalInterface<global::Microsoft.Windows.SemanticSearchInternal.IQueryBlockListMatch>.DisposeAbiArray((__retval_length, __retval_data));
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xC, 0x75, 0xEA, 0x7C, 0xBD, 0xED, 0xDC, 0x5F, 0x87, 0xAD, 0x3D, 0x3C, 0x39, 0xA6, 0xA, 0x24 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

        public static global::System.IntPtr AbiToProjectionVftablePtr => IQueryBlockListSession3.AbiToProjectionVftablePtr;

    }
    [DynamicInterfaceCastableImplementation]
    [Guid("7CEA750C-EDBD-5FDC-87AD-3D3C39A60A24")]
    internal unsafe interface IQueryBlockListSession3 : global::Microsoft.Windows.SemanticSearchInternal.IQueryBlockListSession3
    {

        public static readonly IntPtr AbiToProjectionVftablePtr;
        static unsafe IQueryBlockListSession3()
        {
            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(IQueryBlockListSession3), sizeof(IInspectable.Vftbl) + sizeof(IntPtr) * 1);
            *(IInspectable.Vftbl*)AbiToProjectionVftablePtr = IInspectable.Vftbl.AbiToProjectionVftable;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, IntPtr, int*, IntPtr*, int>*)AbiToProjectionVftablePtr)[6] = &Do_Abi_FindMatches_0;
        }

        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_FindMatches_0(IntPtr thisPtr, IntPtr query, IntPtr inputLanguage, IntPtr correlationId, int* __resultSize, IntPtr* result)
        {

            global::Microsoft.Windows.SemanticSearchInternal.IQueryBlockListMatch[] __result = default;

            *result = default;
            *__resultSize = default;

            try
            {
                __result = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.Windows.SemanticSearchInternal.IQueryBlockListSession3>(thisPtr).FindMatches(MarshalString.FromAbi(query), MarshalString.FromAbi(inputLanguage), MarshalString.FromAbi(correlationId));
                (*__resultSize, *result) = MarshalInterface<global::Microsoft.Windows.SemanticSearchInternal.IQueryBlockListMatch>.FromManagedArray(__result);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }

        unsafe global::Microsoft.Windows.SemanticSearchInternal.IQueryBlockListMatch[] global::Microsoft.Windows.SemanticSearchInternal.IQueryBlockListSession3.FindMatches(string query, string inputLanguage, string correlationId)
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.Windows.SemanticSearchInternal.IQueryBlockListSession3).TypeHandle));
            return global::ABI.Microsoft.Windows.SemanticSearchInternal.IQueryBlockListSession3Methods.FindMatches(_obj, query, inputLanguage, correlationId);
        }

        bool global::Microsoft.Windows.SemanticSearchInternal.IQueryBlockListSession2.IsQueryBlocked(string query, string inputLanguage, string correlationId) => ((global::Microsoft.Windows.SemanticSearchInternal.IQueryBlockListSession2)(IWinRTObject)this).IsQueryBlocked(query, inputLanguage, correlationId);
    }

    public static class IQueryProcessorSessionMethods
    {


        public static unsafe global::Windows.Foundation.IAsyncOperation<global::Microsoft.Windows.SemanticSearchInternal.QueryParametersInternal> GetQueryParametersAsync(IObjectReference _obj, string naturalLanguageQuery)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                MarshalString.Pinnable __naturalLanguageQuery = new(naturalLanguageQuery);
                fixed(void* ___naturalLanguageQuery = __naturalLanguageQuery)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalString.GetAbi(ref __naturalLanguageQuery), &__retval));
                    global::System.GC.KeepAlive(_obj);
                    _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperation_1_Microsoft_Windows_SemanticSearchInternal_QueryParametersInternal.EnsureInitialized();
                    return MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Microsoft.Windows.SemanticSearchInternal.QueryParametersInternal>>.FromAbi(__retval);
                }
            }
            finally
            {
                MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Microsoft.Windows.SemanticSearchInternal.QueryParametersInternal>>.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xFB, 0x86, 0x53, 0x3E, 0x5C, 0x37, 0x7C, 0x50, 0x94, 0x13, 0x3D, 0xB3, 0x2C, 0xA5, 0xA4, 0xAC };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

        public static global::System.IntPtr AbiToProjectionVftablePtr => IQueryProcessorSession.AbiToProjectionVftablePtr;

    }
    [DynamicInterfaceCastableImplementation]
    [Guid("3E5386FB-375C-507C-9413-3DB32CA5A4AC")]
    internal unsafe interface IQueryProcessorSession : global::Microsoft.Windows.SemanticSearchInternal.IQueryProcessorSession
    {

        public static readonly IntPtr AbiToProjectionVftablePtr;
        static unsafe IQueryProcessorSession()
        {
            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(IQueryProcessorSession), sizeof(IInspectable.Vftbl) + sizeof(IntPtr) * 1);
            *(IInspectable.Vftbl*)AbiToProjectionVftablePtr = IInspectable.Vftbl.AbiToProjectionVftable;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>*)AbiToProjectionVftablePtr)[6] = &Do_Abi_GetQueryParametersAsync_0;
        }

        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_GetQueryParametersAsync_0(IntPtr thisPtr, IntPtr naturalLanguageQuery, IntPtr* operation)
        {
            _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperation_1_Microsoft_Windows_SemanticSearchInternal_QueryParametersInternal.EnsureInitialized();

            global::Windows.Foundation.IAsyncOperation<global::Microsoft.Windows.SemanticSearchInternal.QueryParametersInternal> __operation = default;

            *operation = default;

            try
            {
                __operation = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.Windows.SemanticSearchInternal.IQueryProcessorSession>(thisPtr).GetQueryParametersAsync(MarshalString.FromAbi(naturalLanguageQuery));
                *operation = MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Microsoft.Windows.SemanticSearchInternal.QueryParametersInternal>>.FromManaged(__operation);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }

        unsafe global::Windows.Foundation.IAsyncOperation<global::Microsoft.Windows.SemanticSearchInternal.QueryParametersInternal> global::Microsoft.Windows.SemanticSearchInternal.IQueryProcessorSession.GetQueryParametersAsync(string naturalLanguageQuery)
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.Windows.SemanticSearchInternal.IQueryProcessorSession).TypeHandle));
            return global::ABI.Microsoft.Windows.SemanticSearchInternal.IQueryProcessorSessionMethods.GetQueryParametersAsync(_obj, naturalLanguageQuery);
        }

        void global::System.IDisposable.Dispose() => ((global::System.IDisposable)(IWinRTObject)this).Dispose();
    }

    public static class IQueryProcessorSession2Methods
    {


        public static unsafe global::Windows.Foundation.IAsyncOperation<global::Microsoft.Windows.SemanticSearchInternal.QueryParametersInternal> GetQueryParametersAsync(IObjectReference _obj, string naturalLanguageQuery, uint priority, uint frequency)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                MarshalString.Pinnable __naturalLanguageQuery = new(naturalLanguageQuery);
                fixed(void* ___naturalLanguageQuery = __naturalLanguageQuery)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, uint, uint, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalString.GetAbi(ref __naturalLanguageQuery), priority, frequency, &__retval));
                    global::System.GC.KeepAlive(_obj);
                    _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperation_1_Microsoft_Windows_SemanticSearchInternal_QueryParametersInternal.EnsureInitialized();
                    return MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Microsoft.Windows.SemanticSearchInternal.QueryParametersInternal>>.FromAbi(__retval);
                }
            }
            finally
            {
                MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Microsoft.Windows.SemanticSearchInternal.QueryParametersInternal>>.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x62, 0x6A, 0xFE, 0x68, 0x9F, 0x80, 0x11, 0x41, 0x90, 0xD1, 0x9A, 0x88, 0xD1, 0xB9, 0x63, 0xA7 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

        public static global::System.IntPtr AbiToProjectionVftablePtr => IQueryProcessorSession2.AbiToProjectionVftablePtr;

    }
    [DynamicInterfaceCastableImplementation]
    [Guid("68FE6A62-809F-4111-90D1-9A88D1B963A7")]
    internal unsafe interface IQueryProcessorSession2 : global::Microsoft.Windows.SemanticSearchInternal.IQueryProcessorSession2
    {

        public static readonly IntPtr AbiToProjectionVftablePtr;
        static unsafe IQueryProcessorSession2()
        {
            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(IQueryProcessorSession2), sizeof(IInspectable.Vftbl) + sizeof(IntPtr) * 1);
            *(IInspectable.Vftbl*)AbiToProjectionVftablePtr = IInspectable.Vftbl.AbiToProjectionVftable;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, uint, uint, IntPtr*, int>*)AbiToProjectionVftablePtr)[6] = &Do_Abi_GetQueryParametersAsync_0;
        }

        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_GetQueryParametersAsync_0(IntPtr thisPtr, IntPtr naturalLanguageQuery, uint priority, uint frequency, IntPtr* operation)
        {
            _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperation_1_Microsoft_Windows_SemanticSearchInternal_QueryParametersInternal.EnsureInitialized();

            global::Windows.Foundation.IAsyncOperation<global::Microsoft.Windows.SemanticSearchInternal.QueryParametersInternal> __operation = default;

            *operation = default;

            try
            {
                __operation = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.Windows.SemanticSearchInternal.IQueryProcessorSession2>(thisPtr).GetQueryParametersAsync(MarshalString.FromAbi(naturalLanguageQuery), priority, frequency);
                *operation = MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Microsoft.Windows.SemanticSearchInternal.QueryParametersInternal>>.FromManaged(__operation);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }

        unsafe global::Windows.Foundation.IAsyncOperation<global::Microsoft.Windows.SemanticSearchInternal.QueryParametersInternal> global::Microsoft.Windows.SemanticSearchInternal.IQueryProcessorSession2.GetQueryParametersAsync(string naturalLanguageQuery, uint priority, uint frequency)
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.Windows.SemanticSearchInternal.IQueryProcessorSession2).TypeHandle));
            return global::ABI.Microsoft.Windows.SemanticSearchInternal.IQueryProcessorSession2Methods.GetQueryParametersAsync(_obj, naturalLanguageQuery, priority, frequency);
        }

        global::Windows.Foundation.IAsyncOperation<global::Microsoft.Windows.SemanticSearchInternal.QueryParametersInternal> global::Microsoft.Windows.SemanticSearchInternal.IQueryProcessorSession.GetQueryParametersAsync(string naturalLanguageQuery) => ((global::Microsoft.Windows.SemanticSearchInternal.IQueryProcessorSession)(IWinRTObject)this).GetQueryParametersAsync(naturalLanguageQuery);

        void global::System.IDisposable.Dispose() => ((global::System.IDisposable)(IWinRTObject)this).Dispose();
    }

    public static class IQueryProcessorSession3Methods
    {


        public static unsafe global::Microsoft.Windows.SemanticSearchInternal.QueryParametersInternal GetQueryParameters(IObjectReference _obj, string naturalLanguageQuery, uint priority, uint frequency)
        {
            var ThisPtr = _obj.ThisPtr;

            QueryParametersInternal __retval = default;
            try
            {
                MarshalString.Pinnable __naturalLanguageQuery = new(naturalLanguageQuery);
                fixed(void* ___naturalLanguageQuery = __naturalLanguageQuery)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, uint, uint, QueryParametersInternal*, int>**)ThisPtr)[6](ThisPtr, MarshalString.GetAbi(ref __naturalLanguageQuery), priority, frequency, &__retval));
                    global::System.GC.KeepAlive(_obj);
                    return QueryParametersInternal.FromAbi(__retval);
                }
            }
            finally
            {
                QueryParametersInternal.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x37, 0x5E, 0xE4, 0xD7, 0x84, 0x5D, 0x82, 0x5E, 0x91, 0xEC, 0x72, 0xF1, 0xD2, 0xBA, 0x9A, 0xA8 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

        public static global::System.IntPtr AbiToProjectionVftablePtr => IQueryProcessorSession3.AbiToProjectionVftablePtr;

    }
    [DynamicInterfaceCastableImplementation]
    [Guid("D7E45E37-5D84-5E82-91EC-72F1D2BA9AA8")]
    internal unsafe interface IQueryProcessorSession3 : global::Microsoft.Windows.SemanticSearchInternal.IQueryProcessorSession3
    {

        public static readonly IntPtr AbiToProjectionVftablePtr;
        static unsafe IQueryProcessorSession3()
        {
            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(IQueryProcessorSession3), sizeof(IInspectable.Vftbl) + sizeof(IntPtr) * 1);
            *(IInspectable.Vftbl*)AbiToProjectionVftablePtr = IInspectable.Vftbl.AbiToProjectionVftable;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, uint, uint, QueryParametersInternal*, int>*)AbiToProjectionVftablePtr)[6] = &Do_Abi_GetQueryParameters_0;
        }

        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_GetQueryParameters_0(IntPtr thisPtr, IntPtr naturalLanguageQuery, uint priority, uint frequency, QueryParametersInternal* result)
        {

            global::Microsoft.Windows.SemanticSearchInternal.QueryParametersInternal __result = default;

            *result = default;

            try
            {
                __result = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.Windows.SemanticSearchInternal.IQueryProcessorSession3>(thisPtr).GetQueryParameters(MarshalString.FromAbi(naturalLanguageQuery), priority, frequency);
                *result = global::ABI.Microsoft.Windows.SemanticSearchInternal.QueryParametersInternal.FromManaged(__result);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }

        unsafe global::Microsoft.Windows.SemanticSearchInternal.QueryParametersInternal global::Microsoft.Windows.SemanticSearchInternal.IQueryProcessorSession3.GetQueryParameters(string naturalLanguageQuery, uint priority, uint frequency)
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.Windows.SemanticSearchInternal.IQueryProcessorSession3).TypeHandle));
            return global::ABI.Microsoft.Windows.SemanticSearchInternal.IQueryProcessorSession3Methods.GetQueryParameters(_obj, naturalLanguageQuery, priority, frequency);
        }

        global::Windows.Foundation.IAsyncOperation<global::Microsoft.Windows.SemanticSearchInternal.QueryParametersInternal> global::Microsoft.Windows.SemanticSearchInternal.IQueryProcessorSession.GetQueryParametersAsync(string naturalLanguageQuery) => ((global::Microsoft.Windows.SemanticSearchInternal.IQueryProcessorSession)(IWinRTObject)this).GetQueryParametersAsync(naturalLanguageQuery);

        global::Windows.Foundation.IAsyncOperation<global::Microsoft.Windows.SemanticSearchInternal.QueryParametersInternal> global::Microsoft.Windows.SemanticSearchInternal.IQueryProcessorSession2.GetQueryParametersAsync(string naturalLanguageQuery, uint priority, uint frequency) => ((global::Microsoft.Windows.SemanticSearchInternal.IQueryProcessorSession2)(IWinRTObject)this).GetQueryParametersAsync(naturalLanguageQuery, priority, frequency);

        void global::System.IDisposable.Dispose() => ((global::System.IDisposable)(IWinRTObject)this).Dispose();
    }

    public static class ISemanticTextSessionMethods
    {


        public static unsafe global::Windows.Foundation.IAsyncAction CreateAsync(IObjectReference _obj, string text, float[] values)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalBlittable<float>.MarshalerArray __values = default;
            int __values_length = default;
            IntPtr __values_data = default;
            IntPtr __retval = default;
            try
            {
                __values = MarshalBlittable<float>.CreateMarshalerArray(values);
                (__values_length, __values_data) = MarshalBlittable<float>.GetAbiArray(__values);
                MarshalString.Pinnable __text = new(text);
                fixed(void* ___text = __text)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int, IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalString.GetAbi(ref __text), __values_length, __values_data, &__retval));
                    global::System.GC.KeepAlive(_obj);
                    return MarshalInterface<global::Windows.Foundation.IAsyncAction>.FromAbi(__retval);
                }
            }
            finally
            {
                MarshalBlittable<float>.DisposeMarshalerArray(__values);
                MarshalInterface<global::Windows.Foundation.IAsyncAction>.DisposeAbi(__retval);
            }
        }

        public static unsafe global::Windows.Foundation.IAsyncAction CreateFromTokensAsync(IObjectReference _obj, long[] tokens, float[] values)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalBlittable<long>.MarshalerArray __tokens = default;
            int __tokens_length = default;
            IntPtr __tokens_data = default;
            MarshalBlittable<float>.MarshalerArray __values = default;
            int __values_length = default;
            IntPtr __values_data = default;
            IntPtr __retval = default;
            try
            {
                __tokens = MarshalBlittable<long>.CreateMarshalerArray(tokens);
                (__tokens_length, __tokens_data) = MarshalBlittable<long>.GetAbiArray(__tokens);
                __values = MarshalBlittable<float>.CreateMarshalerArray(values);
                (__values_length, __values_data) = MarshalBlittable<float>.GetAbiArray(__values);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int, IntPtr, int, IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, __tokens_length, __tokens_data, __values_length, __values_data, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInterface<global::Windows.Foundation.IAsyncAction>.FromAbi(__retval);
            }
            finally
            {
                MarshalBlittable<long>.DisposeMarshalerArray(__tokens);
                MarshalBlittable<float>.DisposeMarshalerArray(__values);
                MarshalInterface<global::Windows.Foundation.IAsyncAction>.DisposeAbi(__retval);
            }
        }

        public static unsafe void Create(IObjectReference _obj, string text, float[] values)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalBlittable<float>.MarshalerArray __values = default;
            int __values_length = default;
            IntPtr __values_data = default;
            try
            {
                __values = MarshalBlittable<float>.CreateMarshalerArray(values);
                (__values_length, __values_data) = MarshalBlittable<float>.GetAbiArray(__values);
                MarshalString.Pinnable __text = new(text);
                fixed(void* ___text = __text)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int, IntPtr, int>**)ThisPtr)[8](ThisPtr, MarshalString.GetAbi(ref __text), __values_length, __values_data));
                    global::System.GC.KeepAlive(_obj);
                }
            }
            finally
            {
                MarshalBlittable<float>.DisposeMarshalerArray(__values);
            }
        }

        public static unsafe void CreateFromTokens(IObjectReference _obj, long[] tokens, float[] values)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalBlittable<long>.MarshalerArray __tokens = default;
            int __tokens_length = default;
            IntPtr __tokens_data = default;
            MarshalBlittable<float>.MarshalerArray __values = default;
            int __values_length = default;
            IntPtr __values_data = default;
            try
            {
                __tokens = MarshalBlittable<long>.CreateMarshalerArray(tokens);
                (__tokens_length, __tokens_data) = MarshalBlittable<long>.GetAbiArray(__tokens);
                __values = MarshalBlittable<float>.CreateMarshalerArray(values);
                (__values_length, __values_data) = MarshalBlittable<float>.GetAbiArray(__values);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int, IntPtr, int, IntPtr, int>**)ThisPtr)[9](ThisPtr, __tokens_length, __tokens_data, __values_length, __values_data));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalBlittable<long>.DisposeMarshalerArray(__tokens);
                MarshalBlittable<float>.DisposeMarshalerArray(__values);
            }
        }
        public static unsafe string get_ModelVersion(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[12](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }

        public static unsafe uint get_OutputLength(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            uint __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, uint*, int>**)ThisPtr)[10](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        public static unsafe Guid get_VectorSpaceId(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            Guid __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, Guid*, int>**)ThisPtr)[11](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x2C, 0xFB, 0x90, 0x7A, 0xDC, 0x7F, 0x64, 0x5F, 0xA5, 0x68, 0x0, 0x3A, 0x6D, 0xB1, 0x81, 0xE4 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

        public static global::System.IntPtr AbiToProjectionVftablePtr => ISemanticTextSession.AbiToProjectionVftablePtr;

    }
    [DynamicInterfaceCastableImplementation]
    [Guid("7A90FB2C-7FDC-5F64-A568-003A6DB181E4")]
    internal unsafe interface ISemanticTextSession : global::Microsoft.Windows.SemanticSearchInternal.ISemanticTextSession
    {

        public static readonly IntPtr AbiToProjectionVftablePtr;
        static unsafe ISemanticTextSession()
        {
            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(ISemanticTextSession), sizeof(IInspectable.Vftbl) + sizeof(IntPtr) * 7);
            *(IInspectable.Vftbl*)AbiToProjectionVftablePtr = IInspectable.Vftbl.AbiToProjectionVftable;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int, IntPtr, IntPtr*, int>*)AbiToProjectionVftablePtr)[6] = &Do_Abi_CreateAsync_0;
            ((delegate* unmanaged[Stdcall]<IntPtr, int, IntPtr, int, IntPtr, IntPtr*, int>*)AbiToProjectionVftablePtr)[7] = &Do_Abi_CreateFromTokensAsync_1;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int, IntPtr, int>*)AbiToProjectionVftablePtr)[8] = &Do_Abi_Create_2;
            ((delegate* unmanaged[Stdcall]<IntPtr, int, IntPtr, int, IntPtr, int>*)AbiToProjectionVftablePtr)[9] = &Do_Abi_CreateFromTokens_3;
            ((delegate* unmanaged[Stdcall]<IntPtr, uint*, int>*)AbiToProjectionVftablePtr)[10] = &Do_Abi_get_OutputLength_4;
            ((delegate* unmanaged[Stdcall]<IntPtr, Guid*, int>*)AbiToProjectionVftablePtr)[11] = &Do_Abi_get_VectorSpaceId_5;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>*)AbiToProjectionVftablePtr)[12] = &Do_Abi_get_ModelVersion_6;
        }

        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_CreateAsync_0(IntPtr thisPtr, IntPtr text, int __valuesSize, IntPtr values, IntPtr* operation)
        {

            global::Windows.Foundation.IAsyncAction __operation = default;

            *operation = default;
            float[] __values = MarshalBlittable<float>.FromAbiArray((__valuesSize, values));

            try
            {
                __operation = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.Windows.SemanticSearchInternal.ISemanticTextSession>(thisPtr).CreateAsync(MarshalString.FromAbi(text),  __values);
                MarshalBlittable<float>.CopyManagedArray(__values, values);
                *operation = MarshalInterface<global::Windows.Foundation.IAsyncAction>.FromManaged(__operation);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_CreateFromTokensAsync_1(IntPtr thisPtr, int __tokensSize, IntPtr tokens, int __valuesSize, IntPtr values, IntPtr* operation)
        {

            global::Windows.Foundation.IAsyncAction __operation = default;

            *operation = default;
            float[] __values = MarshalBlittable<float>.FromAbiArray((__valuesSize, values));

            try
            {
                __operation = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.Windows.SemanticSearchInternal.ISemanticTextSession>(thisPtr).CreateFromTokensAsync(MarshalBlittable<long>.FromAbiArray((__tokensSize, tokens)),  __values);
                MarshalBlittable<float>.CopyManagedArray(__values, values);
                *operation = MarshalInterface<global::Windows.Foundation.IAsyncAction>.FromManaged(__operation);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_Create_2(IntPtr thisPtr, IntPtr text, int __valuesSize, IntPtr values)
        {


            float[] __values = MarshalBlittable<float>.FromAbiArray((__valuesSize, values));

            try
            {
                global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.Windows.SemanticSearchInternal.ISemanticTextSession>(thisPtr).Create(MarshalString.FromAbi(text),  __values);
                MarshalBlittable<float>.CopyManagedArray(__values, values);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_CreateFromTokens_3(IntPtr thisPtr, int __tokensSize, IntPtr tokens, int __valuesSize, IntPtr values)
        {


            float[] __values = MarshalBlittable<float>.FromAbiArray((__valuesSize, values));

            try
            {
                global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.Windows.SemanticSearchInternal.ISemanticTextSession>(thisPtr).CreateFromTokens(MarshalBlittable<long>.FromAbiArray((__tokensSize, tokens)),  __values);
                MarshalBlittable<float>.CopyManagedArray(__values, values);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_ModelVersion_6(IntPtr thisPtr, IntPtr* value)
        {

            string __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.Windows.SemanticSearchInternal.ISemanticTextSession>(thisPtr).ModelVersion;
                *value = MarshalString.FromManaged(__value);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_OutputLength_4(IntPtr thisPtr, uint* value)
        {

            uint __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.Windows.SemanticSearchInternal.ISemanticTextSession>(thisPtr).OutputLength;
                *value = __value;

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_VectorSpaceId_5(IntPtr thisPtr, Guid* value)
        {

            Guid __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.Windows.SemanticSearchInternal.ISemanticTextSession>(thisPtr).VectorSpaceId;
                *value = __value;

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }

        unsafe global::Windows.Foundation.IAsyncAction global::Microsoft.Windows.SemanticSearchInternal.ISemanticTextSession.CreateAsync(string text, float[] values)
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.Windows.SemanticSearchInternal.ISemanticTextSession).TypeHandle));
            return global::ABI.Microsoft.Windows.SemanticSearchInternal.ISemanticTextSessionMethods.CreateAsync(_obj, text, values);
        }

        unsafe global::Windows.Foundation.IAsyncAction global::Microsoft.Windows.SemanticSearchInternal.ISemanticTextSession.CreateFromTokensAsync(long[] tokens, float[] values)
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.Windows.SemanticSearchInternal.ISemanticTextSession).TypeHandle));
            return global::ABI.Microsoft.Windows.SemanticSearchInternal.ISemanticTextSessionMethods.CreateFromTokensAsync(_obj, tokens, values);
        }

        unsafe void global::Microsoft.Windows.SemanticSearchInternal.ISemanticTextSession.Create(string text, float[] values)
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.Windows.SemanticSearchInternal.ISemanticTextSession).TypeHandle));
            global::ABI.Microsoft.Windows.SemanticSearchInternal.ISemanticTextSessionMethods.Create(_obj, text, values);
        }

        unsafe void global::Microsoft.Windows.SemanticSearchInternal.ISemanticTextSession.CreateFromTokens(long[] tokens, float[] values)
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.Windows.SemanticSearchInternal.ISemanticTextSession).TypeHandle));
            global::ABI.Microsoft.Windows.SemanticSearchInternal.ISemanticTextSessionMethods.CreateFromTokens(_obj, tokens, values);
        }

        unsafe string global::Microsoft.Windows.SemanticSearchInternal.ISemanticTextSession.ModelVersion
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.Windows.SemanticSearchInternal.ISemanticTextSession).TypeHandle));
                return global::ABI.Microsoft.Windows.SemanticSearchInternal.ISemanticTextSessionMethods.get_ModelVersion(_obj);
            }
        }

        unsafe uint global::Microsoft.Windows.SemanticSearchInternal.ISemanticTextSession.OutputLength
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.Windows.SemanticSearchInternal.ISemanticTextSession).TypeHandle));
                return global::ABI.Microsoft.Windows.SemanticSearchInternal.ISemanticTextSessionMethods.get_OutputLength(_obj);
            }
        }

        unsafe Guid global::Microsoft.Windows.SemanticSearchInternal.ISemanticTextSession.VectorSpaceId
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.Windows.SemanticSearchInternal.ISemanticTextSession).TypeHandle));
                return global::ABI.Microsoft.Windows.SemanticSearchInternal.ISemanticTextSessionMethods.get_VectorSpaceId(_obj);
            }
        }

        void global::System.IDisposable.Dispose() => ((global::System.IDisposable)(IWinRTObject)this).Dispose();
    }

    public static class ISemanticTextSession2Methods
    {


        public static unsafe global::Windows.Foundation.IAsyncAction CreateAsync(IObjectReference _obj, string text, float[] values, uint priority, uint frequency)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalBlittable<float>.MarshalerArray __values = default;
            int __values_length = default;
            IntPtr __values_data = default;
            IntPtr __retval = default;
            try
            {
                __values = MarshalBlittable<float>.CreateMarshalerArray(values);
                (__values_length, __values_data) = MarshalBlittable<float>.GetAbiArray(__values);
                MarshalString.Pinnable __text = new(text);
                fixed(void* ___text = __text)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int, IntPtr, uint, uint, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalString.GetAbi(ref __text), __values_length, __values_data, priority, frequency, &__retval));
                    global::System.GC.KeepAlive(_obj);
                    return MarshalInterface<global::Windows.Foundation.IAsyncAction>.FromAbi(__retval);
                }
            }
            finally
            {
                MarshalBlittable<float>.DisposeMarshalerArray(__values);
                MarshalInterface<global::Windows.Foundation.IAsyncAction>.DisposeAbi(__retval);
            }
        }

        public static unsafe global::Windows.Foundation.IAsyncAction CreateFromTokensAsync(IObjectReference _obj, long[] tokens, float[] values, uint priority, uint frequency)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalBlittable<long>.MarshalerArray __tokens = default;
            int __tokens_length = default;
            IntPtr __tokens_data = default;
            MarshalBlittable<float>.MarshalerArray __values = default;
            int __values_length = default;
            IntPtr __values_data = default;
            IntPtr __retval = default;
            try
            {
                __tokens = MarshalBlittable<long>.CreateMarshalerArray(tokens);
                (__tokens_length, __tokens_data) = MarshalBlittable<long>.GetAbiArray(__tokens);
                __values = MarshalBlittable<float>.CreateMarshalerArray(values);
                (__values_length, __values_data) = MarshalBlittable<float>.GetAbiArray(__values);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int, IntPtr, int, IntPtr, uint, uint, IntPtr*, int>**)ThisPtr)[7](ThisPtr, __tokens_length, __tokens_data, __values_length, __values_data, priority, frequency, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInterface<global::Windows.Foundation.IAsyncAction>.FromAbi(__retval);
            }
            finally
            {
                MarshalBlittable<long>.DisposeMarshalerArray(__tokens);
                MarshalBlittable<float>.DisposeMarshalerArray(__values);
                MarshalInterface<global::Windows.Foundation.IAsyncAction>.DisposeAbi(__retval);
            }
        }

        public static unsafe void Create(IObjectReference _obj, string text, float[] values, uint priority, uint frequency)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalBlittable<float>.MarshalerArray __values = default;
            int __values_length = default;
            IntPtr __values_data = default;
            try
            {
                __values = MarshalBlittable<float>.CreateMarshalerArray(values);
                (__values_length, __values_data) = MarshalBlittable<float>.GetAbiArray(__values);
                MarshalString.Pinnable __text = new(text);
                fixed(void* ___text = __text)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int, IntPtr, uint, uint, int>**)ThisPtr)[8](ThisPtr, MarshalString.GetAbi(ref __text), __values_length, __values_data, priority, frequency));
                    global::System.GC.KeepAlive(_obj);
                }
            }
            finally
            {
                MarshalBlittable<float>.DisposeMarshalerArray(__values);
            }
        }

        public static unsafe void CreateFromTokens(IObjectReference _obj, long[] tokens, float[] values, uint priority, uint frequency)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalBlittable<long>.MarshalerArray __tokens = default;
            int __tokens_length = default;
            IntPtr __tokens_data = default;
            MarshalBlittable<float>.MarshalerArray __values = default;
            int __values_length = default;
            IntPtr __values_data = default;
            try
            {
                __tokens = MarshalBlittable<long>.CreateMarshalerArray(tokens);
                (__tokens_length, __tokens_data) = MarshalBlittable<long>.GetAbiArray(__tokens);
                __values = MarshalBlittable<float>.CreateMarshalerArray(values);
                (__values_length, __values_data) = MarshalBlittable<float>.GetAbiArray(__values);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int, IntPtr, int, IntPtr, uint, uint, int>**)ThisPtr)[9](ThisPtr, __tokens_length, __tokens_data, __values_length, __values_data, priority, frequency));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalBlittable<long>.DisposeMarshalerArray(__tokens);
                MarshalBlittable<float>.DisposeMarshalerArray(__values);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xCF, 0x2B, 0xF7, 0x41, 0x8F, 0x85, 0x76, 0x43, 0xA5, 0x36, 0xDC, 0xD1, 0x36, 0x34, 0xF7, 0x80 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

        public static global::System.IntPtr AbiToProjectionVftablePtr => ISemanticTextSession2.AbiToProjectionVftablePtr;

    }
    [DynamicInterfaceCastableImplementation]
    [Guid("41F72BCF-858F-4376-A536-DCD13634F780")]
    internal unsafe interface ISemanticTextSession2 : global::Microsoft.Windows.SemanticSearchInternal.ISemanticTextSession2
    {

        public static readonly IntPtr AbiToProjectionVftablePtr;
        static unsafe ISemanticTextSession2()
        {
            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(ISemanticTextSession2), sizeof(IInspectable.Vftbl) + sizeof(IntPtr) * 4);
            *(IInspectable.Vftbl*)AbiToProjectionVftablePtr = IInspectable.Vftbl.AbiToProjectionVftable;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int, IntPtr, uint, uint, IntPtr*, int>*)AbiToProjectionVftablePtr)[6] = &Do_Abi_CreateAsync_0;
            ((delegate* unmanaged[Stdcall]<IntPtr, int, IntPtr, int, IntPtr, uint, uint, IntPtr*, int>*)AbiToProjectionVftablePtr)[7] = &Do_Abi_CreateFromTokensAsync_1;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int, IntPtr, uint, uint, int>*)AbiToProjectionVftablePtr)[8] = &Do_Abi_Create_2;
            ((delegate* unmanaged[Stdcall]<IntPtr, int, IntPtr, int, IntPtr, uint, uint, int>*)AbiToProjectionVftablePtr)[9] = &Do_Abi_CreateFromTokens_3;
        }

        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_CreateAsync_0(IntPtr thisPtr, IntPtr text, int __valuesSize, IntPtr values, uint priority, uint frequency, IntPtr* operation)
        {

            global::Windows.Foundation.IAsyncAction __operation = default;

            *operation = default;
            float[] __values = MarshalBlittable<float>.FromAbiArray((__valuesSize, values));

            try
            {
                __operation = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.Windows.SemanticSearchInternal.ISemanticTextSession2>(thisPtr).CreateAsync(MarshalString.FromAbi(text),  __values, priority, frequency);
                MarshalBlittable<float>.CopyManagedArray(__values, values);
                *operation = MarshalInterface<global::Windows.Foundation.IAsyncAction>.FromManaged(__operation);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_CreateFromTokensAsync_1(IntPtr thisPtr, int __tokensSize, IntPtr tokens, int __valuesSize, IntPtr values, uint priority, uint frequency, IntPtr* operation)
        {

            global::Windows.Foundation.IAsyncAction __operation = default;

            *operation = default;
            float[] __values = MarshalBlittable<float>.FromAbiArray((__valuesSize, values));

            try
            {
                __operation = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.Windows.SemanticSearchInternal.ISemanticTextSession2>(thisPtr).CreateFromTokensAsync(MarshalBlittable<long>.FromAbiArray((__tokensSize, tokens)),  __values, priority, frequency);
                MarshalBlittable<float>.CopyManagedArray(__values, values);
                *operation = MarshalInterface<global::Windows.Foundation.IAsyncAction>.FromManaged(__operation);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_Create_2(IntPtr thisPtr, IntPtr text, int __valuesSize, IntPtr values, uint priority, uint frequency)
        {


            float[] __values = MarshalBlittable<float>.FromAbiArray((__valuesSize, values));

            try
            {
                global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.Windows.SemanticSearchInternal.ISemanticTextSession2>(thisPtr).Create(MarshalString.FromAbi(text),  __values, priority, frequency);
                MarshalBlittable<float>.CopyManagedArray(__values, values);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_CreateFromTokens_3(IntPtr thisPtr, int __tokensSize, IntPtr tokens, int __valuesSize, IntPtr values, uint priority, uint frequency)
        {


            float[] __values = MarshalBlittable<float>.FromAbiArray((__valuesSize, values));

            try
            {
                global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.Windows.SemanticSearchInternal.ISemanticTextSession2>(thisPtr).CreateFromTokens(MarshalBlittable<long>.FromAbiArray((__tokensSize, tokens)),  __values, priority, frequency);
                MarshalBlittable<float>.CopyManagedArray(__values, values);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }

        unsafe global::Windows.Foundation.IAsyncAction global::Microsoft.Windows.SemanticSearchInternal.ISemanticTextSession2.CreateAsync(string text, float[] values, uint priority, uint frequency)
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.Windows.SemanticSearchInternal.ISemanticTextSession2).TypeHandle));
            return global::ABI.Microsoft.Windows.SemanticSearchInternal.ISemanticTextSession2Methods.CreateAsync(_obj, text, values, priority, frequency);
        }

        unsafe global::Windows.Foundation.IAsyncAction global::Microsoft.Windows.SemanticSearchInternal.ISemanticTextSession2.CreateFromTokensAsync(long[] tokens, float[] values, uint priority, uint frequency)
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.Windows.SemanticSearchInternal.ISemanticTextSession2).TypeHandle));
            return global::ABI.Microsoft.Windows.SemanticSearchInternal.ISemanticTextSession2Methods.CreateFromTokensAsync(_obj, tokens, values, priority, frequency);
        }

        unsafe void global::Microsoft.Windows.SemanticSearchInternal.ISemanticTextSession2.Create(string text, float[] values, uint priority, uint frequency)
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.Windows.SemanticSearchInternal.ISemanticTextSession2).TypeHandle));
            global::ABI.Microsoft.Windows.SemanticSearchInternal.ISemanticTextSession2Methods.Create(_obj, text, values, priority, frequency);
        }

        unsafe void global::Microsoft.Windows.SemanticSearchInternal.ISemanticTextSession2.CreateFromTokens(long[] tokens, float[] values, uint priority, uint frequency)
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.Windows.SemanticSearchInternal.ISemanticTextSession2).TypeHandle));
            global::ABI.Microsoft.Windows.SemanticSearchInternal.ISemanticTextSession2Methods.CreateFromTokens(_obj, tokens, values, priority, frequency);
        }

        global::Windows.Foundation.IAsyncAction global::Microsoft.Windows.SemanticSearchInternal.ISemanticTextSession.CreateAsync(string text, float[] values) => ((global::Microsoft.Windows.SemanticSearchInternal.ISemanticTextSession)(IWinRTObject)this).CreateAsync(text, values);

        global::Windows.Foundation.IAsyncAction global::Microsoft.Windows.SemanticSearchInternal.ISemanticTextSession.CreateFromTokensAsync(long[] tokens, float[] values) => ((global::Microsoft.Windows.SemanticSearchInternal.ISemanticTextSession)(IWinRTObject)this).CreateFromTokensAsync(tokens, values);

        void global::Microsoft.Windows.SemanticSearchInternal.ISemanticTextSession.Create(string text, float[] values) => ((global::Microsoft.Windows.SemanticSearchInternal.ISemanticTextSession)(IWinRTObject)this).Create(text, values);

        void global::Microsoft.Windows.SemanticSearchInternal.ISemanticTextSession.CreateFromTokens(long[] tokens, float[] values) => ((global::Microsoft.Windows.SemanticSearchInternal.ISemanticTextSession)(IWinRTObject)this).CreateFromTokens(tokens, values);

        string global::Microsoft.Windows.SemanticSearchInternal.ISemanticTextSession.ModelVersion => ((global::Microsoft.Windows.SemanticSearchInternal.ISemanticTextSession)(IWinRTObject)this).ModelVersion;

        uint global::Microsoft.Windows.SemanticSearchInternal.ISemanticTextSession.OutputLength => ((global::Microsoft.Windows.SemanticSearchInternal.ISemanticTextSession)(IWinRTObject)this).OutputLength;

        Guid global::Microsoft.Windows.SemanticSearchInternal.ISemanticTextSession.VectorSpaceId => ((global::Microsoft.Windows.SemanticSearchInternal.ISemanticTextSession)(IWinRTObject)this).VectorSpaceId;

        void global::System.IDisposable.Dispose() => ((global::System.IDisposable)(IWinRTObject)this).Dispose();
    }

    public static class ITokenizerSessionMethods
    {


        public static unsafe bool ShouldTokenize(IObjectReference _obj, ulong charCount, ulong maxTokenCount)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, ulong, ulong, byte*, int>**)ThisPtr)[6](ThisPtr, charCount, maxTokenCount, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        public static unsafe void Tokenize(IObjectReference _obj, ulong maxTokenCount, string text, long[] tokens, out ulong tokensUsed, ulong[] indices, out ulong indicesUsed)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalBlittable<long>.MarshalerArray __tokens = default;
            int __tokens_length = default;
            IntPtr __tokens_data = default;
            ulong __tokensUsed = default;
            MarshalBlittable<ulong>.MarshalerArray __indices = default;
            int __indices_length = default;
            IntPtr __indices_data = default;
            ulong __indicesUsed = default;
            try
            {
                __tokens = MarshalBlittable<long>.CreateMarshalerArray(tokens);
                (__tokens_length, __tokens_data) = MarshalBlittable<long>.GetAbiArray(__tokens);
                __indices = MarshalBlittable<ulong>.CreateMarshalerArray(indices);
                (__indices_length, __indices_data) = MarshalBlittable<ulong>.GetAbiArray(__indices);
                MarshalString.Pinnable __text = new(text);
                fixed(void* ___text = __text)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, ulong, IntPtr, int, IntPtr, ulong*, int, IntPtr, ulong*, int>**)ThisPtr)[7](ThisPtr, maxTokenCount, MarshalString.GetAbi(ref __text), __tokens_length, __tokens_data, &__tokensUsed, __indices_length, __indices_data, &__indicesUsed));
                    global::System.GC.KeepAlive(_obj);
                    tokensUsed = __tokensUsed;
                    indicesUsed = __indicesUsed;
                }
            }
            finally
            {
                MarshalBlittable<long>.DisposeMarshalerArray(__tokens);
                MarshalBlittable<ulong>.DisposeMarshalerArray(__indices);
            }
        }
        public static unsafe string get_ModelVersion(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xF8, 0xAF, 0xA8, 0x42, 0x3F, 0x9C, 0x57, 0x5A, 0x8B, 0x7A, 0x94, 0xEB, 0x51, 0x18, 0x3F, 0x7B };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

        public static global::System.IntPtr AbiToProjectionVftablePtr => ITokenizerSession.AbiToProjectionVftablePtr;

    }
    [DynamicInterfaceCastableImplementation]
    [Guid("42A8AFF8-9C3F-5A57-8B7A-94EB51183F7B")]
    internal unsafe interface ITokenizerSession : global::Microsoft.Windows.SemanticSearchInternal.ITokenizerSession
    {

        public static readonly IntPtr AbiToProjectionVftablePtr;
        static unsafe ITokenizerSession()
        {
            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(ITokenizerSession), sizeof(IInspectable.Vftbl) + sizeof(IntPtr) * 3);
            *(IInspectable.Vftbl*)AbiToProjectionVftablePtr = IInspectable.Vftbl.AbiToProjectionVftable;
            ((delegate* unmanaged[Stdcall]<IntPtr, ulong, ulong, byte*, int>*)AbiToProjectionVftablePtr)[6] = &Do_Abi_ShouldTokenize_0;
            ((delegate* unmanaged[Stdcall]<IntPtr, ulong, IntPtr, int, IntPtr, ulong*, int, IntPtr, ulong*, int>*)AbiToProjectionVftablePtr)[7] = &Do_Abi_Tokenize_1;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>*)AbiToProjectionVftablePtr)[8] = &Do_Abi_get_ModelVersion_2;
        }

        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_ShouldTokenize_0(IntPtr thisPtr, ulong charCount, ulong maxTokenCount, byte* result)
        {

            bool __result = default;

            *result = default;

            try
            {
                __result = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.Windows.SemanticSearchInternal.ITokenizerSession>(thisPtr).ShouldTokenize(charCount, maxTokenCount);
                *result = (byte)(__result ? 1 : 0);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_Tokenize_1(IntPtr thisPtr, ulong maxTokenCount, IntPtr text, int __tokensSize, IntPtr tokens, ulong* tokensUsed, int __indicesSize, IntPtr indices, ulong* indicesUsed)
        {


            *tokensUsed = default;
            *indicesUsed = default;
            long[] __tokens = MarshalBlittable<long>.FromAbiArray((__tokensSize, tokens));
            ulong __tokensUsed = default;
            ulong[] __indices = MarshalBlittable<ulong>.FromAbiArray((__indicesSize, indices));
            ulong __indicesUsed = default;

            try
            {
                global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.Windows.SemanticSearchInternal.ITokenizerSession>(thisPtr).Tokenize(maxTokenCount, MarshalString.FromAbi(text),  __tokens, out __tokensUsed,  __indices, out __indicesUsed);
                MarshalBlittable<long>.CopyManagedArray(__tokens, tokens);
                *tokensUsed = __tokensUsed;
                MarshalBlittable<ulong>.CopyManagedArray(__indices, indices);
                *indicesUsed = __indicesUsed;

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_ModelVersion_2(IntPtr thisPtr, IntPtr* value)
        {

            string __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.Windows.SemanticSearchInternal.ITokenizerSession>(thisPtr).ModelVersion;
                *value = MarshalString.FromManaged(__value);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }

        unsafe bool global::Microsoft.Windows.SemanticSearchInternal.ITokenizerSession.ShouldTokenize(ulong charCount, ulong maxTokenCount)
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.Windows.SemanticSearchInternal.ITokenizerSession).TypeHandle));
            return global::ABI.Microsoft.Windows.SemanticSearchInternal.ITokenizerSessionMethods.ShouldTokenize(_obj, charCount, maxTokenCount);
        }

        unsafe void global::Microsoft.Windows.SemanticSearchInternal.ITokenizerSession.Tokenize(ulong maxTokenCount, string text, long[] tokens, out ulong tokensUsed, ulong[] indices, out ulong indicesUsed)
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.Windows.SemanticSearchInternal.ITokenizerSession).TypeHandle));
            global::ABI.Microsoft.Windows.SemanticSearchInternal.ITokenizerSessionMethods.Tokenize(_obj, maxTokenCount, text, tokens, out tokensUsed, indices, out indicesUsed);
        }

        unsafe string global::Microsoft.Windows.SemanticSearchInternal.ITokenizerSession.ModelVersion
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.Windows.SemanticSearchInternal.ITokenizerSession).TypeHandle));
                return global::ABI.Microsoft.Windows.SemanticSearchInternal.ITokenizerSessionMethods.get_ModelVersion(_obj);
            }
        }

        void global::System.IDisposable.Dispose() => ((global::System.IDisposable)(IWinRTObject)this).Dispose();
    }

    public static class ITopicProcessorSessionMethods
    {


        public static unsafe global::Windows.Foundation.IAsyncOperation<global::System.Collections.Generic.IReadOnlyList<global::Microsoft.Windows.SemanticSearchInternal.TopicInternal>> GetTopicsAsync(IObjectReference _obj, string text, uint maxCount)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                MarshalString.Pinnable __text = new(text);
                fixed(void* ___text = __text)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, uint, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalString.GetAbi(ref __text), maxCount, &__retval));
                    global::System.GC.KeepAlive(_obj);
                    _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperation_1_Windows_Foundation_Collections_IVectorView_1_Microsoft_Windows_SemanticSearchInternal_TopicInternal_.EnsureInitialized();
                    return MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::System.Collections.Generic.IReadOnlyList<global::Microsoft.Windows.SemanticSearchInternal.TopicInternal>>>.FromAbi(__retval);
                }
            }
            finally
            {
                MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::System.Collections.Generic.IReadOnlyList<global::Microsoft.Windows.SemanticSearchInternal.TopicInternal>>>.DisposeAbi(__retval);
            }
        }

        public static unsafe global::System.Collections.Generic.IReadOnlyList<global::Microsoft.Windows.SemanticSearchInternal.TopicInternal> GetTopics(IObjectReference _obj, string text, uint maxCount)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                MarshalString.Pinnable __text = new(text);
                fixed(void* ___text = __text)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, uint, IntPtr*, int>**)ThisPtr)[7](ThisPtr, MarshalString.GetAbi(ref __text), maxCount, &__retval));
                    global::System.GC.KeepAlive(_obj);
                    _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IVectorView_1_Microsoft_Windows_SemanticSearchInternal_TopicInternal.EnsureInitialized();
                    return MarshalInterface<global::System.Collections.Generic.IReadOnlyList<global::Microsoft.Windows.SemanticSearchInternal.TopicInternal>>.FromAbi(__retval);
                }
            }
            finally
            {
                MarshalInterface<global::System.Collections.Generic.IReadOnlyList<global::Microsoft.Windows.SemanticSearchInternal.TopicInternal>>.DisposeAbi(__retval);
            }
        }

        public static unsafe string GetDisplayName(IObjectReference _obj, string className, string languageTag)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                MarshalString.Pinnable __className = new(className);
                MarshalString.Pinnable __languageTag = new(languageTag);
                fixed(void* ___className = __className, ___languageTag = __languageTag)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, MarshalString.GetAbi(ref __className), MarshalString.GetAbi(ref __languageTag), &__retval));
                    global::System.GC.KeepAlive(_obj);
                    return MarshalString.FromAbi(__retval);
                }
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }
        public static unsafe string get_ModelVersion(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[9](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xEC, 0x9C, 0xB0, 0x6C, 0x7, 0x72, 0x87, 0x50, 0xA5, 0xD, 0x93, 0xA9, 0x21, 0xD, 0x9A, 0x4B };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

        public static global::System.IntPtr AbiToProjectionVftablePtr => ITopicProcessorSession.AbiToProjectionVftablePtr;

    }
    [DynamicInterfaceCastableImplementation]
    [Guid("6CB09CEC-7207-5087-A50D-93A9210D9A4B")]
    internal unsafe interface ITopicProcessorSession : global::Microsoft.Windows.SemanticSearchInternal.ITopicProcessorSession
    {

        public static readonly IntPtr AbiToProjectionVftablePtr;
        static unsafe ITopicProcessorSession()
        {
            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(ITopicProcessorSession), sizeof(IInspectable.Vftbl) + sizeof(IntPtr) * 4);
            *(IInspectable.Vftbl*)AbiToProjectionVftablePtr = IInspectable.Vftbl.AbiToProjectionVftable;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, uint, IntPtr*, int>*)AbiToProjectionVftablePtr)[6] = &Do_Abi_GetTopicsAsync_0;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, uint, IntPtr*, int>*)AbiToProjectionVftablePtr)[7] = &Do_Abi_GetTopics_1;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, IntPtr*, int>*)AbiToProjectionVftablePtr)[8] = &Do_Abi_GetDisplayName_2;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>*)AbiToProjectionVftablePtr)[9] = &Do_Abi_get_ModelVersion_3;
        }

        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_GetTopicsAsync_0(IntPtr thisPtr, IntPtr text, uint maxCount, IntPtr* operation)
        {
            _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperation_1_Windows_Foundation_Collections_IVectorView_1_Microsoft_Windows_SemanticSearchInternal_TopicInternal_.EnsureInitialized();

            global::Windows.Foundation.IAsyncOperation<global::System.Collections.Generic.IReadOnlyList<global::Microsoft.Windows.SemanticSearchInternal.TopicInternal>> __operation = default;

            *operation = default;

            try
            {
                __operation = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.Windows.SemanticSearchInternal.ITopicProcessorSession>(thisPtr).GetTopicsAsync(MarshalString.FromAbi(text), maxCount);
                *operation = MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::System.Collections.Generic.IReadOnlyList<global::Microsoft.Windows.SemanticSearchInternal.TopicInternal>>>.FromManaged(__operation);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_GetTopics_1(IntPtr thisPtr, IntPtr text, uint maxCount, IntPtr* result)
        {
            _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IVectorView_1_Microsoft_Windows_SemanticSearchInternal_TopicInternal.EnsureInitialized();

            global::System.Collections.Generic.IReadOnlyList<global::Microsoft.Windows.SemanticSearchInternal.TopicInternal> __result = default;

            *result = default;

            try
            {
                __result = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.Windows.SemanticSearchInternal.ITopicProcessorSession>(thisPtr).GetTopics(MarshalString.FromAbi(text), maxCount);
                *result = MarshalInterface<global::System.Collections.Generic.IReadOnlyList<global::Microsoft.Windows.SemanticSearchInternal.TopicInternal>>.FromManaged(__result);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_GetDisplayName_2(IntPtr thisPtr, IntPtr className, IntPtr languageTag, IntPtr* result)
        {

            string __result = default;

            *result = default;

            try
            {
                __result = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.Windows.SemanticSearchInternal.ITopicProcessorSession>(thisPtr).GetDisplayName(MarshalString.FromAbi(className), MarshalString.FromAbi(languageTag));
                *result = MarshalString.FromManaged(__result);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_ModelVersion_3(IntPtr thisPtr, IntPtr* value)
        {

            string __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.Windows.SemanticSearchInternal.ITopicProcessorSession>(thisPtr).ModelVersion;
                *value = MarshalString.FromManaged(__value);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }

        unsafe global::Windows.Foundation.IAsyncOperation<global::System.Collections.Generic.IReadOnlyList<global::Microsoft.Windows.SemanticSearchInternal.TopicInternal>> global::Microsoft.Windows.SemanticSearchInternal.ITopicProcessorSession.GetTopicsAsync(string text, uint maxCount)
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.Windows.SemanticSearchInternal.ITopicProcessorSession).TypeHandle));
            return global::ABI.Microsoft.Windows.SemanticSearchInternal.ITopicProcessorSessionMethods.GetTopicsAsync(_obj, text, maxCount);
        }

        unsafe global::System.Collections.Generic.IReadOnlyList<global::Microsoft.Windows.SemanticSearchInternal.TopicInternal> global::Microsoft.Windows.SemanticSearchInternal.ITopicProcessorSession.GetTopics(string text, uint maxCount)
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.Windows.SemanticSearchInternal.ITopicProcessorSession).TypeHandle));
            return global::ABI.Microsoft.Windows.SemanticSearchInternal.ITopicProcessorSessionMethods.GetTopics(_obj, text, maxCount);
        }

        unsafe string global::Microsoft.Windows.SemanticSearchInternal.ITopicProcessorSession.GetDisplayName(string className, string languageTag)
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.Windows.SemanticSearchInternal.ITopicProcessorSession).TypeHandle));
            return global::ABI.Microsoft.Windows.SemanticSearchInternal.ITopicProcessorSessionMethods.GetDisplayName(_obj, className, languageTag);
        }

        unsafe string global::Microsoft.Windows.SemanticSearchInternal.ITopicProcessorSession.ModelVersion
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.Windows.SemanticSearchInternal.ITopicProcessorSession).TypeHandle));
                return global::ABI.Microsoft.Windows.SemanticSearchInternal.ITopicProcessorSessionMethods.get_ModelVersion(_obj);
            }
        }

        void global::System.IDisposable.Dispose() => ((global::System.IDisposable)(IWinRTObject)this).Dispose();
    }

    public static class ITopicProcessorSession2Methods
    {


        public static unsafe global::Windows.Foundation.IAsyncOperation<global::System.Collections.Generic.IReadOnlyList<global::Microsoft.Windows.SemanticSearchInternal.TopicInternal>> GetTopicsAsync(IObjectReference _obj, string text, uint maxCount, uint priority, uint frequency)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                MarshalString.Pinnable __text = new(text);
                fixed(void* ___text = __text)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, uint, uint, uint, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalString.GetAbi(ref __text), maxCount, priority, frequency, &__retval));
                    global::System.GC.KeepAlive(_obj);
                    _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperation_1_Windows_Foundation_Collections_IVectorView_1_Microsoft_Windows_SemanticSearchInternal_TopicInternal_.EnsureInitialized();
                    return MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::System.Collections.Generic.IReadOnlyList<global::Microsoft.Windows.SemanticSearchInternal.TopicInternal>>>.FromAbi(__retval);
                }
            }
            finally
            {
                MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::System.Collections.Generic.IReadOnlyList<global::Microsoft.Windows.SemanticSearchInternal.TopicInternal>>>.DisposeAbi(__retval);
            }
        }

        public static unsafe global::System.Collections.Generic.IReadOnlyList<global::Microsoft.Windows.SemanticSearchInternal.TopicInternal> GetTopics(IObjectReference _obj, string text, uint maxCount, uint priority, uint frequency)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                MarshalString.Pinnable __text = new(text);
                fixed(void* ___text = __text)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, uint, uint, uint, IntPtr*, int>**)ThisPtr)[7](ThisPtr, MarshalString.GetAbi(ref __text), maxCount, priority, frequency, &__retval));
                    global::System.GC.KeepAlive(_obj);
                    _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IVectorView_1_Microsoft_Windows_SemanticSearchInternal_TopicInternal.EnsureInitialized();
                    return MarshalInterface<global::System.Collections.Generic.IReadOnlyList<global::Microsoft.Windows.SemanticSearchInternal.TopicInternal>>.FromAbi(__retval);
                }
            }
            finally
            {
                MarshalInterface<global::System.Collections.Generic.IReadOnlyList<global::Microsoft.Windows.SemanticSearchInternal.TopicInternal>>.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x7B, 0x7E, 0xD5, 0xC7, 0x35, 0x69, 0x13, 0x45, 0xAE, 0x1E, 0x30, 0xF6, 0xF5, 0x66, 0x9D, 0xCA };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

        public static global::System.IntPtr AbiToProjectionVftablePtr => ITopicProcessorSession2.AbiToProjectionVftablePtr;

    }
    [DynamicInterfaceCastableImplementation]
    [Guid("C7D57E7B-6935-4513-AE1E-30F6F5669DCA")]
    internal unsafe interface ITopicProcessorSession2 : global::Microsoft.Windows.SemanticSearchInternal.ITopicProcessorSession2
    {

        public static readonly IntPtr AbiToProjectionVftablePtr;
        static unsafe ITopicProcessorSession2()
        {
            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(ITopicProcessorSession2), sizeof(IInspectable.Vftbl) + sizeof(IntPtr) * 2);
            *(IInspectable.Vftbl*)AbiToProjectionVftablePtr = IInspectable.Vftbl.AbiToProjectionVftable;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, uint, uint, uint, IntPtr*, int>*)AbiToProjectionVftablePtr)[6] = &Do_Abi_GetTopicsAsync_0;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, uint, uint, uint, IntPtr*, int>*)AbiToProjectionVftablePtr)[7] = &Do_Abi_GetTopics_1;
        }

        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_GetTopicsAsync_0(IntPtr thisPtr, IntPtr text, uint maxCount, uint priority, uint frequency, IntPtr* operation)
        {
            _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperation_1_Windows_Foundation_Collections_IVectorView_1_Microsoft_Windows_SemanticSearchInternal_TopicInternal_.EnsureInitialized();

            global::Windows.Foundation.IAsyncOperation<global::System.Collections.Generic.IReadOnlyList<global::Microsoft.Windows.SemanticSearchInternal.TopicInternal>> __operation = default;

            *operation = default;

            try
            {
                __operation = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.Windows.SemanticSearchInternal.ITopicProcessorSession2>(thisPtr).GetTopicsAsync(MarshalString.FromAbi(text), maxCount, priority, frequency);
                *operation = MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::System.Collections.Generic.IReadOnlyList<global::Microsoft.Windows.SemanticSearchInternal.TopicInternal>>>.FromManaged(__operation);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_GetTopics_1(IntPtr thisPtr, IntPtr text, uint maxCount, uint priority, uint frequency, IntPtr* result)
        {
            _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IVectorView_1_Microsoft_Windows_SemanticSearchInternal_TopicInternal.EnsureInitialized();

            global::System.Collections.Generic.IReadOnlyList<global::Microsoft.Windows.SemanticSearchInternal.TopicInternal> __result = default;

            *result = default;

            try
            {
                __result = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.Windows.SemanticSearchInternal.ITopicProcessorSession2>(thisPtr).GetTopics(MarshalString.FromAbi(text), maxCount, priority, frequency);
                *result = MarshalInterface<global::System.Collections.Generic.IReadOnlyList<global::Microsoft.Windows.SemanticSearchInternal.TopicInternal>>.FromManaged(__result);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }

        unsafe global::Windows.Foundation.IAsyncOperation<global::System.Collections.Generic.IReadOnlyList<global::Microsoft.Windows.SemanticSearchInternal.TopicInternal>> global::Microsoft.Windows.SemanticSearchInternal.ITopicProcessorSession2.GetTopicsAsync(string text, uint maxCount, uint priority, uint frequency)
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.Windows.SemanticSearchInternal.ITopicProcessorSession2).TypeHandle));
            return global::ABI.Microsoft.Windows.SemanticSearchInternal.ITopicProcessorSession2Methods.GetTopicsAsync(_obj, text, maxCount, priority, frequency);
        }

        unsafe global::System.Collections.Generic.IReadOnlyList<global::Microsoft.Windows.SemanticSearchInternal.TopicInternal> global::Microsoft.Windows.SemanticSearchInternal.ITopicProcessorSession2.GetTopics(string text, uint maxCount, uint priority, uint frequency)
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.Windows.SemanticSearchInternal.ITopicProcessorSession2).TypeHandle));
            return global::ABI.Microsoft.Windows.SemanticSearchInternal.ITopicProcessorSession2Methods.GetTopics(_obj, text, maxCount, priority, frequency);
        }

        global::Windows.Foundation.IAsyncOperation<global::System.Collections.Generic.IReadOnlyList<global::Microsoft.Windows.SemanticSearchInternal.TopicInternal>> global::Microsoft.Windows.SemanticSearchInternal.ITopicProcessorSession.GetTopicsAsync(string text, uint maxCount) => ((global::Microsoft.Windows.SemanticSearchInternal.ITopicProcessorSession)(IWinRTObject)this).GetTopicsAsync(text, maxCount);

        global::System.Collections.Generic.IReadOnlyList<global::Microsoft.Windows.SemanticSearchInternal.TopicInternal> global::Microsoft.Windows.SemanticSearchInternal.ITopicProcessorSession.GetTopics(string text, uint maxCount) => ((global::Microsoft.Windows.SemanticSearchInternal.ITopicProcessorSession)(IWinRTObject)this).GetTopics(text, maxCount);

        string global::Microsoft.Windows.SemanticSearchInternal.ITopicProcessorSession.GetDisplayName(string className, string languageTag) => ((global::Microsoft.Windows.SemanticSearchInternal.ITopicProcessorSession)(IWinRTObject)this).GetDisplayName(className, languageTag);

        string global::Microsoft.Windows.SemanticSearchInternal.ITopicProcessorSession.ModelVersion => ((global::Microsoft.Windows.SemanticSearchInternal.ITopicProcessorSession)(IWinRTObject)this).ModelVersion;

        void global::System.IDisposable.Dispose() => ((global::System.IDisposable)(IWinRTObject)this).Dispose();
    }

    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct QueryParametersInternal
    {
        public IntPtr FileType;
        public IntPtr Content;
        public IntPtr TimeStatement;

        public struct Marshaler
        {
            public MarshalString _FileType;
            public MarshalString _Content;
            public MarshalString _TimeStatement;
            public QueryParametersInternal __abi;
            public void Dispose()
            {
                MarshalString.DisposeMarshaler(_FileType);
                MarshalString.DisposeMarshaler(_Content);
                MarshalString.DisposeMarshaler(_TimeStatement);
            }
        }

        public static Marshaler CreateMarshaler(global::Microsoft.Windows.SemanticSearchInternal.QueryParametersInternal arg)
        {
            var m = new Marshaler();
            bool success = false;
            try
            {
                m._FileType = MarshalString.CreateMarshaler(arg.FileType);
                m._Content = MarshalString.CreateMarshaler(arg.Content);
                m._TimeStatement = MarshalString.CreateMarshaler(arg.TimeStatement);
                m.__abi = new QueryParametersInternal()
                {
                    FileType = MarshalString.GetAbi(m._FileType)
                    , Content = MarshalString.GetAbi(m._Content)
                    , TimeStatement = MarshalString.GetAbi(m._TimeStatement)
                };
                success = true;
                return m;
            }
            finally
            {
                if (!success)
                {
                    m.Dispose();
                }
            }
        }

        public static QueryParametersInternal GetAbi(Marshaler m) => m.__abi;

        public static global::Microsoft.Windows.SemanticSearchInternal.QueryParametersInternal FromAbi(QueryParametersInternal arg)
        {
            return new global::Microsoft.Windows.SemanticSearchInternal.QueryParametersInternal()
            {
                FileType = MarshalString.FromAbi(arg.FileType)
                , Content = MarshalString.FromAbi(arg.Content)
                , TimeStatement = MarshalString.FromAbi(arg.TimeStatement)
            };
        }

        public static QueryParametersInternal FromManaged(global::Microsoft.Windows.SemanticSearchInternal.QueryParametersInternal arg)
        {
            return new QueryParametersInternal()
            {
                FileType = MarshalString.FromManaged(arg.FileType)
                , Content = MarshalString.FromManaged(arg.Content)
                , TimeStatement = MarshalString.FromManaged(arg.TimeStatement)
            };
        }

        public static unsafe void CopyAbi(Marshaler arg, IntPtr dest) => 
            *(QueryParametersInternal*)dest.ToPointer() = GetAbi(arg);

        public static unsafe void CopyManaged(global::Microsoft.Windows.SemanticSearchInternal.QueryParametersInternal arg, IntPtr dest) =>
            *(QueryParametersInternal*)dest.ToPointer() = FromManaged(arg);

        public static void DisposeMarshaler(Marshaler m) => m.Dispose();

        public static void DisposeAbi(QueryParametersInternal abi)
        {
            MarshalString.DisposeAbi(abi.FileType);
            MarshalString.DisposeAbi(abi.Content);
            MarshalString.DisposeAbi(abi.TimeStatement);
        }
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct TopicInternal
    {
        public IntPtr ClassName;
        public float Score;

        public struct Marshaler
        {
            public MarshalString _ClassName;
            public TopicInternal __abi;
            public void Dispose()
            {
                MarshalString.DisposeMarshaler(_ClassName);
            }
        }

        public static Marshaler CreateMarshaler(global::Microsoft.Windows.SemanticSearchInternal.TopicInternal arg)
        {
            var m = new Marshaler();
            bool success = false;
            try
            {
                m._ClassName = MarshalString.CreateMarshaler(arg.ClassName);
                m.__abi = new TopicInternal()
                {
                    ClassName = MarshalString.GetAbi(m._ClassName)
                    , Score = arg.Score
                };
                success = true;
                return m;
            }
            finally
            {
                if (!success)
                {
                    m.Dispose();
                }
            }
        }

        public static TopicInternal GetAbi(Marshaler m) => m.__abi;

        public static global::Microsoft.Windows.SemanticSearchInternal.TopicInternal FromAbi(TopicInternal arg)
        {
            return new global::Microsoft.Windows.SemanticSearchInternal.TopicInternal()
            {
                ClassName = MarshalString.FromAbi(arg.ClassName)
                , Score = arg.Score
            };
        }

        public static TopicInternal FromManaged(global::Microsoft.Windows.SemanticSearchInternal.TopicInternal arg)
        {
            return new TopicInternal()
            {
                ClassName = MarshalString.FromManaged(arg.ClassName)
                , Score = arg.Score
            };
        }

        public static unsafe void CopyAbi(Marshaler arg, IntPtr dest) => 
            *(TopicInternal*)dest.ToPointer() = GetAbi(arg);

        public static unsafe void CopyManaged(global::Microsoft.Windows.SemanticSearchInternal.TopicInternal arg, IntPtr dest) =>
            *(TopicInternal*)dest.ToPointer() = FromManaged(arg);

        public static void DisposeMarshaler(Marshaler m) => m.Dispose();

        public static void DisposeAbi(TopicInternal abi)
        {
            MarshalString.DisposeAbi(abi.ClassName);
        }
    }
}
#pragma warning restore CA1416
