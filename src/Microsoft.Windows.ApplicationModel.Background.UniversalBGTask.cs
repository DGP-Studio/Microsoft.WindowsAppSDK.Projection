//------------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by cswinrt.exe version 2.2.0.241111.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq.Expressions;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using WinRT;
using WinRT.Interop;


#pragma warning disable 0169 // warning CS0169: The field '...' is never used
#pragma warning disable 0649 // warning CS0169: Field '...' is never assigned to
#pragma warning disable CA2207, CA1063, CA1033, CA1001, CA2213

namespace Microsoft.Windows.ApplicationModel.Background.UniversalBGTask
{
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.ApplicationModel.Background.UniversalBGTask")][Guid("D47C97E5-A23F-5B32-8A2E-B93C8CAE4299")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.ApplicationModel.Background.UniversalBGTask.ITask))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(UniversalBackgroundTaskContract), 65536u)]
    internal interface ITask
    {
        void Run(global::Windows.ApplicationModel.Background.IBackgroundTaskInstance taskInstance);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.ApplicationModel.Background.UniversalBGTask")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.ApplicationModel.Background.UniversalBGTask.Task))]
    [global::ABI.Microsoft.Windows.ApplicationModel.Background.UniversalBGTask.TaskRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ITask))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(UniversalBackgroundTaskContract), 65536u)]
    public sealed class Task : global::Microsoft.Windows.ApplicationModel.Background.UniversalBGTask.ITask, global::Windows.ApplicationModel.Background.IBackgroundTask, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<Task>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_Windows_ApplicationModel_Background_UniversalBGTask_ITask => _inner;
        private volatile IObjectReference ___objRef_global__Windows_ApplicationModel_Background_IBackgroundTask;
        private IObjectReference Make___objRef_global__Windows_ApplicationModel_Background_IBackgroundTask()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Windows_ApplicationModel_Background_IBackgroundTask, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Windows.ApplicationModel.Background.IBackgroundTaskMethods.IID), null);
            return ___objRef_global__Windows_ApplicationModel_Background_IBackgroundTask;
        }
        private IObjectReference _objRef_global__Windows_ApplicationModel_Background_IBackgroundTask => ___objRef_global__Windows_ApplicationModel_Background_IBackgroundTask ?? Make___objRef_global__Windows_ApplicationModel_Background_IBackgroundTask();



        private static volatile IObjectReference ___objRef_global__Microsoft_Windows_ApplicationModel_Background_UniversalBGTask_Task;
        private static IObjectReference _objRef_global__Microsoft_Windows_ApplicationModel_Background_UniversalBGTask_Task
        {
            get
            {
                var factory = ___objRef_global__Microsoft_Windows_ApplicationModel_Background_UniversalBGTask_Task;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_Windows_ApplicationModel_Background_UniversalBGTask_Task = ActivationFactory.Get("Microsoft.Windows.ApplicationModel.Background.UniversalBGTask.Task");
                }
            }
        }

        public Task()
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_Windows_ApplicationModel_Background_UniversalBGTask_Task, global::ABI.Microsoft.Windows.ApplicationModel.Background.UniversalBGTask.ITaskMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static Task FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<Task>.FromAbi(thisPtr);
        }

        internal Task(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.Windows.ApplicationModel.Background.UniversalBGTask.ITaskMethods.IID);

        }


        public static bool operator ==(Task x, Task y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(Task x, Task y) => !(x == y);
        public bool Equals(Task other) => this == other;
        public override bool Equals(object obj) => obj is Task that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null);
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null);
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        void ITask.Run(global::Windows.ApplicationModel.Background.IBackgroundTaskInstance taskInstance) => global::ABI.Microsoft.Windows.ApplicationModel.Background.UniversalBGTask.ITaskMethods.Run(_objRef_global__Microsoft_Windows_ApplicationModel_Background_UniversalBGTask_ITask, taskInstance);
        [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
        void global::Windows.ApplicationModel.Background.IBackgroundTask.Run(global::Windows.ApplicationModel.Background.IBackgroundTaskInstance taskInstance) => global::ABI.Windows.ApplicationModel.Background.IBackgroundTaskMethods.Run(_objRef_global__Windows_ApplicationModel_Background_IBackgroundTask, taskInstance);
        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::Windows.Foundation.Metadata.ContractVersion(65536u)]
    public enum UniversalBackgroundTaskContract
    {
    }
}

#pragma warning disable CA1416
namespace ABI.Microsoft.Windows.ApplicationModel.Background.UniversalBGTask
{
    internal static class ITaskMethods
    {


        internal static unsafe void Run(IObjectReference _obj, global::Windows.ApplicationModel.Background.IBackgroundTaskInstance taskInstance)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __taskInstance = default;
            try
            {
                __taskInstance = MarshalInterface<global::Windows.ApplicationModel.Background.IBackgroundTaskInstance>.CreateMarshaler2(taskInstance, global::ABI.Windows.ApplicationModel.Background.IBackgroundTaskInstanceMethods.IID);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__taskInstance)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__taskInstance);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xE5, 0x97, 0x7C, 0xD4, 0x3F, 0xA2, 0x32, 0x5B, 0x8A, 0x2E, 0xB9, 0x3C, 0x8C, 0xAE, 0x42, 0x99 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("D47C97E5-A23F-5B32-8A2E-B93C8CAE4299")]
    internal interface ITask : global::Microsoft.Windows.ApplicationModel.Background.UniversalBGTask.ITask
    {
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct Task
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.Windows.ApplicationModel.Background.UniversalBGTask.Task obj) => obj is null ? null : MarshalInspectable<global::Microsoft.Windows.ApplicationModel.Background.UniversalBGTask.Task>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.Windows.ApplicationModel.Background.UniversalBGTask.ITaskMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.Windows.ApplicationModel.Background.UniversalBGTask.Task obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.Windows.ApplicationModel.Background.UniversalBGTask.ITaskMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.Windows.ApplicationModel.Background.UniversalBGTask.Task FromAbi(IntPtr thisPtr) => global::Microsoft.Windows.ApplicationModel.Background.UniversalBGTask.Task.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.Windows.ApplicationModel.Background.UniversalBGTask.Task obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.Windows.ApplicationModel.Background.UniversalBGTask.Task>.MarshalerArray CreateMarshalerArray(global::Microsoft.Windows.ApplicationModel.Background.UniversalBGTask.Task[] array) => MarshalInterfaceHelper<global::Microsoft.Windows.ApplicationModel.Background.UniversalBGTask.Task>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Windows.ApplicationModel.Background.UniversalBGTask.Task>.GetAbiArray(box);
        public static unsafe global::Microsoft.Windows.ApplicationModel.Background.UniversalBGTask.Task[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Windows.ApplicationModel.Background.UniversalBGTask.Task>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.Windows.ApplicationModel.Background.UniversalBGTask.Task[] array, object box) => MarshalInterfaceHelper<global::Microsoft.Windows.ApplicationModel.Background.UniversalBGTask.Task>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.Windows.ApplicationModel.Background.UniversalBGTask.Task[] array) => MarshalInterfaceHelper<global::Microsoft.Windows.ApplicationModel.Background.UniversalBGTask.Task>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.Windows.ApplicationModel.Background.UniversalBGTask.Task>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.Windows.ApplicationModel.Background.UniversalBGTask.Task>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class TaskRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.Windows.ApplicationModel.Background.UniversalBGTask.Task(inspectable.ObjRef);
    }
}
#pragma warning restore CA1416