//------------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by cswinrt.exe version 2.2.0.241111.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq.Expressions;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using WinRT;
using WinRT.Interop;


#pragma warning disable 0169 // warning CS0169: The field '...' is never used
#pragma warning disable 0649 // warning CS0169: Field '...' is never assigned to
#pragma warning disable CA2207, CA1063, CA1033, CA1001, CA2213

namespace Microsoft.UI.Xaml.Media.Imaging
{
    [FlagsAttribute]
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<BitmapCreateOptions>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public enum BitmapCreateOptions : uint
    {
        None = unchecked((uint)0),
        IgnoreImageCache = unchecked((uint)0x8),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Imaging.BitmapImage))]
    [global::ABI.Microsoft.UI.Xaml.Media.Imaging.BitmapImageRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IBitmapImage))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class BitmapImage : BitmapSource, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<BitmapImage>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Imaging_IBitmapImage => _inner;


        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Imaging_BitmapImage;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Imaging_BitmapImage
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Imaging_BitmapImage;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Imaging_BitmapImage = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Imaging.BitmapImage");
                }
            }
        }

        public BitmapImage() :base(global::WinRT.DerivedComposed.Instance)
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Xaml_Media_Imaging_BitmapImage, global::ABI.Microsoft.UI.Xaml.Media.Imaging.IBitmapImageMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        private static class _IBitmapImageFactoryMethods
        {
            public static unsafe IntPtr CreateInstanceWithUriSource(IObjectReference _obj, global::System.Uri uriSource)
            {
                var ThisPtr = _obj.ThisPtr;

                ObjectReferenceValue __uriSource = default;
                IntPtr __retval = default;
                try
                {
                    __uriSource = global::ABI.System.Uri.CreateMarshaler2(uriSource);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__uriSource), &__retval));
                    global::System.GC.KeepAlive(_obj);
                    return __retval;
                }
                finally
                {
                    MarshalInspectable<object>.DisposeMarshaler(__uriSource);
                }
            }
        }

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Imaging_IBitmapImageFactory;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Imaging_IBitmapImageFactory
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Imaging_IBitmapImageFactory;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Imaging_IBitmapImageFactory = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Imaging.BitmapImage", global::ABI.Microsoft.UI.Xaml.Media.Imaging.IBitmapImageFactoryMethods.IID);
                }
            }
        }

        public BitmapImage(global::System.Uri uriSource) :base(global::WinRT.DerivedComposed.Instance)
        { 
        IntPtr ptr = (_IBitmapImageFactoryMethods.CreateInstanceWithUriSource(_objRef_global__Microsoft_UI_Xaml_Media_Imaging_IBitmapImageFactory, uriSource)); 
        try 
        { 
        _inner = ComWrappersSupport.GetObjectReferenceForInterface(ptr, global::ABI.Microsoft.UI.Xaml.Media.Imaging.IBitmapImageMethods.IID, false); 

        } 
        finally 
        { 
        MarshalInspectable<object>.DisposeAbi(ptr); 
        }

        ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
        ComWrappersHelper.Init(_inner, false);
        }

        public static new I As<I>() => ActivationFactory.Get("Microsoft.UI.Xaml.Media.Imaging.BitmapImage").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Imaging_IBitmapImageStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Imaging_IBitmapImageStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Imaging_IBitmapImageStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Imaging_IBitmapImageStatics = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Imaging.BitmapImage", global::ABI.Microsoft.UI.Xaml.Media.Imaging.IBitmapImageStaticsMethods.IID);
                }
            }
        }

        public static global::Microsoft.UI.Xaml.DependencyProperty AutoPlayProperty => global::ABI.Microsoft.UI.Xaml.Media.Imaging.IBitmapImageStaticsMethods.get_AutoPlayProperty(_objRef_global__Microsoft_UI_Xaml_Media_Imaging_IBitmapImageStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty CreateOptionsProperty => global::ABI.Microsoft.UI.Xaml.Media.Imaging.IBitmapImageStaticsMethods.get_CreateOptionsProperty(_objRef_global__Microsoft_UI_Xaml_Media_Imaging_IBitmapImageStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty DecodePixelHeightProperty => global::ABI.Microsoft.UI.Xaml.Media.Imaging.IBitmapImageStaticsMethods.get_DecodePixelHeightProperty(_objRef_global__Microsoft_UI_Xaml_Media_Imaging_IBitmapImageStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty DecodePixelTypeProperty => global::ABI.Microsoft.UI.Xaml.Media.Imaging.IBitmapImageStaticsMethods.get_DecodePixelTypeProperty(_objRef_global__Microsoft_UI_Xaml_Media_Imaging_IBitmapImageStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty DecodePixelWidthProperty => global::ABI.Microsoft.UI.Xaml.Media.Imaging.IBitmapImageStaticsMethods.get_DecodePixelWidthProperty(_objRef_global__Microsoft_UI_Xaml_Media_Imaging_IBitmapImageStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty IsAnimatedBitmapProperty => global::ABI.Microsoft.UI.Xaml.Media.Imaging.IBitmapImageStaticsMethods.get_IsAnimatedBitmapProperty(_objRef_global__Microsoft_UI_Xaml_Media_Imaging_IBitmapImageStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty IsPlayingProperty => global::ABI.Microsoft.UI.Xaml.Media.Imaging.IBitmapImageStaticsMethods.get_IsPlayingProperty(_objRef_global__Microsoft_UI_Xaml_Media_Imaging_IBitmapImageStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty UriSourceProperty => global::ABI.Microsoft.UI.Xaml.Media.Imaging.IBitmapImageStaticsMethods.get_UriSourceProperty(_objRef_global__Microsoft_UI_Xaml_Media_Imaging_IBitmapImageStatics);

        public static new BitmapImage FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<BitmapImage>.FromAbi(thisPtr);
        }

        internal BitmapImage(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Media.Imaging.IBitmapImageMethods.IID);

        }


        public static bool operator ==(BitmapImage x, BitmapImage y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(BitmapImage x, BitmapImage y) => !(x == y);
        public bool Equals(BitmapImage other) => this == other;
        public override bool Equals(object obj) => obj is BitmapImage that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public void Play() => global::ABI.Microsoft.UI.Xaml.Media.Imaging.IBitmapImageMethods.Play(_objRef_global__Microsoft_UI_Xaml_Media_Imaging_IBitmapImage);

        public void Stop() => global::ABI.Microsoft.UI.Xaml.Media.Imaging.IBitmapImageMethods.Stop(_objRef_global__Microsoft_UI_Xaml_Media_Imaging_IBitmapImage);

        public event DownloadProgressEventHandler DownloadProgress
        {
            add => global::ABI.Microsoft.UI.Xaml.Media.Imaging.IBitmapImageMethods.Get_DownloadProgress2(_objRef_global__Microsoft_UI_Xaml_Media_Imaging_IBitmapImage, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Xaml.Media.Imaging.IBitmapImageMethods.Get_DownloadProgress2(_objRef_global__Microsoft_UI_Xaml_Media_Imaging_IBitmapImage, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Microsoft.UI.Xaml.ExceptionRoutedEventHandler ImageFailed
        {
            add => global::ABI.Microsoft.UI.Xaml.Media.Imaging.IBitmapImageMethods.Get_ImageFailed2(_objRef_global__Microsoft_UI_Xaml_Media_Imaging_IBitmapImage, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Xaml.Media.Imaging.IBitmapImageMethods.Get_ImageFailed2(_objRef_global__Microsoft_UI_Xaml_Media_Imaging_IBitmapImage, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Microsoft.UI.Xaml.RoutedEventHandler ImageOpened
        {
            add => global::ABI.Microsoft.UI.Xaml.Media.Imaging.IBitmapImageMethods.Get_ImageOpened2(_objRef_global__Microsoft_UI_Xaml_Media_Imaging_IBitmapImage, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Xaml.Media.Imaging.IBitmapImageMethods.Get_ImageOpened2(_objRef_global__Microsoft_UI_Xaml_Media_Imaging_IBitmapImage, (IWinRTObject)this).Unsubscribe(value);
        }

        public bool AutoPlay
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Imaging.IBitmapImageMethods.get_AutoPlay(_objRef_global__Microsoft_UI_Xaml_Media_Imaging_IBitmapImage);
            set => global::ABI.Microsoft.UI.Xaml.Media.Imaging.IBitmapImageMethods.set_AutoPlay(_objRef_global__Microsoft_UI_Xaml_Media_Imaging_IBitmapImage, value);
        }

        public BitmapCreateOptions CreateOptions
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Imaging.IBitmapImageMethods.get_CreateOptions(_objRef_global__Microsoft_UI_Xaml_Media_Imaging_IBitmapImage);
            set => global::ABI.Microsoft.UI.Xaml.Media.Imaging.IBitmapImageMethods.set_CreateOptions(_objRef_global__Microsoft_UI_Xaml_Media_Imaging_IBitmapImage, value);
        }

        public int DecodePixelHeight
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Imaging.IBitmapImageMethods.get_DecodePixelHeight(_objRef_global__Microsoft_UI_Xaml_Media_Imaging_IBitmapImage);
            set => global::ABI.Microsoft.UI.Xaml.Media.Imaging.IBitmapImageMethods.set_DecodePixelHeight(_objRef_global__Microsoft_UI_Xaml_Media_Imaging_IBitmapImage, value);
        }

        public DecodePixelType DecodePixelType
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Imaging.IBitmapImageMethods.get_DecodePixelType(_objRef_global__Microsoft_UI_Xaml_Media_Imaging_IBitmapImage);
            set => global::ABI.Microsoft.UI.Xaml.Media.Imaging.IBitmapImageMethods.set_DecodePixelType(_objRef_global__Microsoft_UI_Xaml_Media_Imaging_IBitmapImage, value);
        }

        public int DecodePixelWidth
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Imaging.IBitmapImageMethods.get_DecodePixelWidth(_objRef_global__Microsoft_UI_Xaml_Media_Imaging_IBitmapImage);
            set => global::ABI.Microsoft.UI.Xaml.Media.Imaging.IBitmapImageMethods.set_DecodePixelWidth(_objRef_global__Microsoft_UI_Xaml_Media_Imaging_IBitmapImage, value);
        }

        public bool IsAnimatedBitmap => global::ABI.Microsoft.UI.Xaml.Media.Imaging.IBitmapImageMethods.get_IsAnimatedBitmap(_objRef_global__Microsoft_UI_Xaml_Media_Imaging_IBitmapImage);

        public bool IsPlaying => global::ABI.Microsoft.UI.Xaml.Media.Imaging.IBitmapImageMethods.get_IsPlaying(_objRef_global__Microsoft_UI_Xaml_Media_Imaging_IBitmapImage);

        public global::System.Uri UriSource
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Imaging.IBitmapImageMethods.get_UriSource(_objRef_global__Microsoft_UI_Xaml_Media_Imaging_IBitmapImage);
            set => global::ABI.Microsoft.UI.Xaml.Media.Imaging.IBitmapImageMethods.set_UriSource(_objRef_global__Microsoft_UI_Xaml_Media_Imaging_IBitmapImage, value);
        }

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Imaging.BitmapSource))]
    [global::ABI.Microsoft.UI.Xaml.Media.Imaging.BitmapSourceRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IBitmapSource))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public class BitmapSource : global::Microsoft.UI.Xaml.Media.ImageSource, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<BitmapSource>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Imaging_IBitmapSource;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_Media_Imaging_IBitmapSource()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_Media_Imaging_IBitmapSource, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.Media.Imaging.IBitmapSourceMethods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_Media_Imaging_IBitmapSource;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Imaging_IBitmapSource => ___objRef_global__Microsoft_UI_Xaml_Media_Imaging_IBitmapSource ?? Make___objRef_global__Microsoft_UI_Xaml_Media_Imaging_IBitmapSource();



        private static class _IBitmapSourceFactoryMethods
        {
            public static unsafe IntPtr CreateInstance(IObjectReference _obj, object baseInterface, out IntPtr innerInterface)
            {
                var ThisPtr = _obj.ThisPtr;

                ObjectReferenceValue __baseInterface = default;
                IntPtr __innerInterface = default;
                IntPtr __retval = default;
                try
                {
                    __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                    global::System.GC.KeepAlive(_obj);
                    innerInterface = __innerInterface;
                    return __retval;
                }
                finally
                {
                    MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                }
            }
        }

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Imaging_IBitmapSourceFactory;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Imaging_IBitmapSourceFactory
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Imaging_IBitmapSourceFactory;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Imaging_IBitmapSourceFactory = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Imaging.BitmapSource", global::ABI.Microsoft.UI.Xaml.Media.Imaging.IBitmapSourceFactoryMethods.IID);
                }
            }
        }

        protected BitmapSource():base(global::WinRT.DerivedComposed.Instance)
        {
            bool isAggregation = this.GetType() != typeof(BitmapSource);
            object baseInspectable = isAggregation ? this : null;
            IntPtr composed = _IBitmapSourceFactoryMethods.CreateInstance(_objRef_global__Microsoft_UI_Xaml_Media_Imaging_IBitmapSourceFactory,  baseInspectable, out IntPtr inner);
            try
            {
                ComWrappersHelper.Init(isAggregation, this, composed, inner, global::ABI.Microsoft.UI.Xaml.Media.Imaging.IBitmapSourceMethods.IID, out _inner);

            }
            finally
            {
                Marshal.Release(inner);   
            }
        }

        public static I As<I>() => ActivationFactory.Get("Microsoft.UI.Xaml.Media.Imaging.BitmapSource").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Imaging_IBitmapSourceStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Imaging_IBitmapSourceStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Imaging_IBitmapSourceStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Imaging_IBitmapSourceStatics = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Imaging.BitmapSource", global::ABI.Microsoft.UI.Xaml.Media.Imaging.IBitmapSourceStaticsMethods.IID);
                }
            }
        }

        public static global::Microsoft.UI.Xaml.DependencyProperty PixelHeightProperty => global::ABI.Microsoft.UI.Xaml.Media.Imaging.IBitmapSourceStaticsMethods.get_PixelHeightProperty(_objRef_global__Microsoft_UI_Xaml_Media_Imaging_IBitmapSourceStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty PixelWidthProperty => global::ABI.Microsoft.UI.Xaml.Media.Imaging.IBitmapSourceStaticsMethods.get_PixelWidthProperty(_objRef_global__Microsoft_UI_Xaml_Media_Imaging_IBitmapSourceStatics);

        public static new BitmapSource FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<BitmapSource>.FromAbi(thisPtr);
        }

        protected internal BitmapSource(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Media.Imaging.IBitmapSourceMethods.IID);

        }


        public static bool operator ==(BitmapSource x, BitmapSource y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(BitmapSource x, BitmapSource y) => !(x == y);
        public bool Equals(BitmapSource other) => this == other;
        public override bool Equals(object obj) => obj is BitmapSource that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        protected BitmapSource(global::WinRT.DerivedComposed _):base(_)
        {

        }
        bool IWinRTObject.HasUnwrappableNativeObject => this.GetType() == typeof(BitmapSource);
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public void SetSource(global::Windows.Storage.Streams.IRandomAccessStream streamSource) => global::ABI.Microsoft.UI.Xaml.Media.Imaging.IBitmapSourceMethods.SetSource(_objRef_global__Microsoft_UI_Xaml_Media_Imaging_IBitmapSource, streamSource);

        public global::Windows.Foundation.IAsyncAction SetSourceAsync(global::Windows.Storage.Streams.IRandomAccessStream streamSource) => global::ABI.Microsoft.UI.Xaml.Media.Imaging.IBitmapSourceMethods.SetSourceAsync(_objRef_global__Microsoft_UI_Xaml_Media_Imaging_IBitmapSource, streamSource);

        public int PixelHeight => global::ABI.Microsoft.UI.Xaml.Media.Imaging.IBitmapSourceMethods.get_PixelHeight(_objRef_global__Microsoft_UI_Xaml_Media_Imaging_IBitmapSource);

        public int PixelWidth => global::ABI.Microsoft.UI.Xaml.Media.Imaging.IBitmapSourceMethods.get_PixelWidth(_objRef_global__Microsoft_UI_Xaml_Media_Imaging_IBitmapSource);

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<DecodePixelType>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public enum DecodePixelType : int
    {
        Physical = unchecked((int)0),
        Logical = unchecked((int)0x1),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Imaging.DownloadProgressEventArgs))]
    [global::ABI.Microsoft.UI.Xaml.Media.Imaging.DownloadProgressEventArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IDownloadProgressEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class DownloadProgressEventArgs : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<DownloadProgressEventArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Imaging_IDownloadProgressEventArgs => _inner;


        public static DownloadProgressEventArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<DownloadProgressEventArgs>.FromAbi(thisPtr);
        }

        internal DownloadProgressEventArgs(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Media.Imaging.IDownloadProgressEventArgsMethods.IID);

        }


        public static bool operator ==(DownloadProgressEventArgs x, DownloadProgressEventArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(DownloadProgressEventArgs x, DownloadProgressEventArgs y) => !(x == y);
        public bool Equals(DownloadProgressEventArgs other) => this == other;
        public override bool Equals(object obj) => obj is DownloadProgressEventArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public int Progress
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Imaging.IDownloadProgressEventArgsMethods.get_Progress(_objRef_global__Microsoft_UI_Xaml_Media_Imaging_IDownloadProgressEventArgs);
            set => global::ABI.Microsoft.UI.Xaml.Media.Imaging.IDownloadProgressEventArgsMethods.set_Progress(_objRef_global__Microsoft_UI_Xaml_Media_Imaging_IDownloadProgressEventArgs, value);
        }

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Imaging.DownloadProgressEventHandler))][global::WinRT.WinRTExposedType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Imaging.DownloadProgressEventHandlerWinRTTypeDetails))][global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public delegate void DownloadProgressEventHandler(object sender, DownloadProgressEventArgs e);
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("5CC29916-A411-5BC2-A3C5-A00D99A59DA8")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Imaging.IBitmapImage))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IBitmapImage
    {
        void Play();
        void Stop();
        bool AutoPlay { get; set; }
        BitmapCreateOptions CreateOptions { get; set; }
        int DecodePixelHeight { get; set; }
        DecodePixelType DecodePixelType { get; set; }
        int DecodePixelWidth { get; set; }
        bool IsAnimatedBitmap { get; }
        bool IsPlaying { get; }
        global::System.Uri UriSource { get; set; }
        event DownloadProgressEventHandler DownloadProgress;
        event global::Microsoft.UI.Xaml.ExceptionRoutedEventHandler ImageFailed;
        event global::Microsoft.UI.Xaml.RoutedEventHandler ImageOpened;
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("F037E0E9-F229-522E-95C9-DA2211A14B05")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Imaging.IBitmapImageFactory))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IBitmapImageFactory
    {
        BitmapImage CreateInstanceWithUriSource(global::System.Uri uriSource);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("4BCF71A9-1897-51DC-8E3F-2C5C796D1CD9")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Imaging.IBitmapImageStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IBitmapImageStatics
    {
        global::Microsoft.UI.Xaml.DependencyProperty AutoPlayProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty CreateOptionsProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty DecodePixelHeightProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty DecodePixelTypeProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty DecodePixelWidthProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty IsAnimatedBitmapProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty IsPlayingProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty UriSourceProperty { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("8424269D-9B82-534F-8FEA-AF5B5EF96BF2")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Imaging.IBitmapSource))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IBitmapSource
    {
        void SetSource(global::Windows.Storage.Streams.IRandomAccessStream streamSource);
        global::Windows.Foundation.IAsyncAction SetSourceAsync(global::Windows.Storage.Streams.IRandomAccessStream streamSource);
        int PixelHeight { get; }
        int PixelWidth { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("0392F025-1868-5876-AD67-12E94A8DA5BF")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Imaging.IBitmapSourceFactory))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IBitmapSourceFactory
    {
        BitmapSource CreateInstance(object baseInterface, out object innerInterface);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("EFA3745E-4400-5F0B-BDC7-3F2911A3D719")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Imaging.IBitmapSourceStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IBitmapSourceStatics
    {
        global::Microsoft.UI.Xaml.DependencyProperty PixelHeightProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty PixelWidthProperty { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("9A0EA80B-1A17-50D5-83F3-377738212619")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Imaging.IDownloadProgressEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IDownloadProgressEventArgs
    {
        int Progress { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("CF10407D-FA8B-57A3-9574-710529AE0B04")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Imaging.IRenderTargetBitmap))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IRenderTargetBitmap
    {
        [global::Windows.Foundation.Metadata.Overload(@"RenderAsync")]
        global::Windows.Foundation.IAsyncAction RenderAsync(global::Microsoft.UI.Xaml.UIElement element);
        [global::Windows.Foundation.Metadata.Overload(@"RenderToSizeAsync")]
        global::Windows.Foundation.IAsyncAction RenderAsync(global::Microsoft.UI.Xaml.UIElement element, int scaledWidth, int scaledHeight);
        global::Windows.Foundation.IAsyncOperation<global::Windows.Storage.Streams.IBuffer> GetPixelsAsync();
        int PixelHeight { get; }
        int PixelWidth { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("83E822E4-9F84-5986-93B0-E4F7019C367D")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Imaging.IRenderTargetBitmapStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IRenderTargetBitmapStatics
    {
        global::Microsoft.UI.Xaml.DependencyProperty PixelHeightProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty PixelWidthProperty { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("A6ACA802-1F24-5A1E-BF08-781A85ED5511")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Imaging.ISoftwareBitmapSource))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface ISoftwareBitmapSource
    {
        global::Windows.Foundation.IAsyncAction SetBitmapAsync(global::Windows.Graphics.Imaging.SoftwareBitmap softwareBitmap);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("AC078D9C-D0E0-5FF9-B73E-98E82E4C8D36")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Imaging.ISurfaceImageSource))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface ISurfaceImageSource
    {
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("09A26ED2-11B3-5EF1-AC56-20D064CCCA34")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Imaging.ISurfaceImageSourceFactory))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface ISurfaceImageSourceFactory
    {
        SurfaceImageSource CreateInstanceWithDimensions(int pixelWidth, int pixelHeight, object baseInterface, out object innerInterface);
        SurfaceImageSource CreateInstanceWithDimensionsAndOpacity(int pixelWidth, int pixelHeight, bool isOpaque, object baseInterface, out object innerInterface);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("D5B61D3C-B68D-53A2-B07B-BA6ADFDD5887")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Imaging.ISvgImageSource))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface ISvgImageSource
    {
        global::Windows.Foundation.IAsyncOperation<SvgImageSourceLoadStatus> SetSourceAsync(global::Windows.Storage.Streams.IRandomAccessStream streamSource);
        double RasterizePixelHeight { get; set; }
        double RasterizePixelWidth { get; set; }
        global::System.Uri UriSource { get; set; }
        event global::Windows.Foundation.TypedEventHandler<SvgImageSource, SvgImageSourceFailedEventArgs> OpenFailed;
        event global::Windows.Foundation.TypedEventHandler<SvgImageSource, SvgImageSourceOpenedEventArgs> Opened;
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("2F85673F-AC64-570D-9BDA-94FA082EEAD9")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Imaging.ISvgImageSourceFactory))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface ISvgImageSourceFactory
    {
        SvgImageSource CreateInstance(object baseInterface, out object innerInterface);
        SvgImageSource CreateInstanceWithUriSource(global::System.Uri uriSource, object baseInterface, out object innerInterface);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("76E66278-7804-5439-A50D-14C5BA896714")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Imaging.ISvgImageSourceFailedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface ISvgImageSourceFailedEventArgs
    {
        SvgImageSourceLoadStatus Status { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("1C9860D5-38D0-5B21-8D48-072F1E254E39")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Imaging.ISvgImageSourceOpenedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface ISvgImageSourceOpenedEventArgs
    {
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("E3AD1068-F4C6-5513-A777-2980F0BA41BD")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Imaging.ISvgImageSourceStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface ISvgImageSourceStatics
    {
        global::Microsoft.UI.Xaml.DependencyProperty RasterizePixelHeightProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty RasterizePixelWidthProperty { get; }
        global::Microsoft.UI.Xaml.DependencyProperty UriSourceProperty { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("E4FF96A6-FEDE-589C-A007-4178B53B6739")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Imaging.IVirtualSurfaceImageSource))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IVirtualSurfaceImageSource
    {
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("08490F2C-04A8-5031-B9C7-707060D7CD48")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Imaging.IVirtualSurfaceImageSourceFactory))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IVirtualSurfaceImageSourceFactory
    {
        VirtualSurfaceImageSource CreateInstanceWithDimensions(int pixelWidth, int pixelHeight);
        VirtualSurfaceImageSource CreateInstanceWithDimensionsAndOpacity(int pixelWidth, int pixelHeight, bool isOpaque);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("78C824A9-0E43-5F1E-93BC-D046CCA82B7E")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Imaging.IWriteableBitmap))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IWriteableBitmap
    {
        void Invalidate();
        global::Windows.Storage.Streams.IBuffer PixelBuffer { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("26E861D9-B080-512B-96C4-80050E7E08D1")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Imaging.IWriteableBitmapFactory))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IWriteableBitmapFactory
    {
        WriteableBitmap CreateInstanceWithDimensions(int pixelWidth, int pixelHeight);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("7807000C-A050-5121-AC74-3322D5358E39")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Imaging.IXamlRenderingBackgroundTask))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IXamlRenderingBackgroundTask
    {
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("205247A3-9FFE-599A-A21A-7181442A9D75")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Imaging.IXamlRenderingBackgroundTaskFactory))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IXamlRenderingBackgroundTaskFactory
    {
        XamlRenderingBackgroundTask CreateInstance(object baseInterface, out object innerInterface);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("18733237-324B-57C0-89B2-5875472ACC80")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Imaging.IXamlRenderingBackgroundTaskOverrides))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface IXamlRenderingBackgroundTaskOverrides
    {
        void OnRun(global::Windows.ApplicationModel.Background.IBackgroundTaskInstance taskInstance);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Imaging.RenderTargetBitmap))]
    [global::ABI.Microsoft.UI.Xaml.Media.Imaging.RenderTargetBitmapRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IRenderTargetBitmap))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class RenderTargetBitmap : global::Microsoft.UI.Xaml.Media.ImageSource, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<RenderTargetBitmap>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Imaging_IRenderTargetBitmap => _inner;


        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Imaging_RenderTargetBitmap;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Imaging_RenderTargetBitmap
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Imaging_RenderTargetBitmap;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Imaging_RenderTargetBitmap = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Imaging.RenderTargetBitmap");
                }
            }
        }

        public RenderTargetBitmap() :base(global::WinRT.DerivedComposed.Instance)
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Xaml_Media_Imaging_RenderTargetBitmap, global::ABI.Microsoft.UI.Xaml.Media.Imaging.IRenderTargetBitmapMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static I As<I>() => ActivationFactory.Get("Microsoft.UI.Xaml.Media.Imaging.RenderTargetBitmap").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Imaging_IRenderTargetBitmapStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Imaging_IRenderTargetBitmapStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Imaging_IRenderTargetBitmapStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Imaging_IRenderTargetBitmapStatics = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Imaging.RenderTargetBitmap", global::ABI.Microsoft.UI.Xaml.Media.Imaging.IRenderTargetBitmapStaticsMethods.IID);
                }
            }
        }

        public static global::Microsoft.UI.Xaml.DependencyProperty PixelHeightProperty => global::ABI.Microsoft.UI.Xaml.Media.Imaging.IRenderTargetBitmapStaticsMethods.get_PixelHeightProperty(_objRef_global__Microsoft_UI_Xaml_Media_Imaging_IRenderTargetBitmapStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty PixelWidthProperty => global::ABI.Microsoft.UI.Xaml.Media.Imaging.IRenderTargetBitmapStaticsMethods.get_PixelWidthProperty(_objRef_global__Microsoft_UI_Xaml_Media_Imaging_IRenderTargetBitmapStatics);

        public static new RenderTargetBitmap FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<RenderTargetBitmap>.FromAbi(thisPtr);
        }

        internal RenderTargetBitmap(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Media.Imaging.IRenderTargetBitmapMethods.IID);

        }


        public static bool operator ==(RenderTargetBitmap x, RenderTargetBitmap y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(RenderTargetBitmap x, RenderTargetBitmap y) => !(x == y);
        public bool Equals(RenderTargetBitmap other) => this == other;
        public override bool Equals(object obj) => obj is RenderTargetBitmap that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public global::Windows.Foundation.IAsyncAction RenderAsync(global::Microsoft.UI.Xaml.UIElement element) => global::ABI.Microsoft.UI.Xaml.Media.Imaging.IRenderTargetBitmapMethods.RenderAsync(_objRef_global__Microsoft_UI_Xaml_Media_Imaging_IRenderTargetBitmap, element);

        public global::Windows.Foundation.IAsyncAction RenderAsync(global::Microsoft.UI.Xaml.UIElement element, int scaledWidth, int scaledHeight) => global::ABI.Microsoft.UI.Xaml.Media.Imaging.IRenderTargetBitmapMethods.RenderAsync(_objRef_global__Microsoft_UI_Xaml_Media_Imaging_IRenderTargetBitmap, element, scaledWidth, scaledHeight);

        public global::Windows.Foundation.IAsyncOperation<global::Windows.Storage.Streams.IBuffer> GetPixelsAsync() => global::ABI.Microsoft.UI.Xaml.Media.Imaging.IRenderTargetBitmapMethods.GetPixelsAsync(_objRef_global__Microsoft_UI_Xaml_Media_Imaging_IRenderTargetBitmap);

        public int PixelHeight => global::ABI.Microsoft.UI.Xaml.Media.Imaging.IRenderTargetBitmapMethods.get_PixelHeight(_objRef_global__Microsoft_UI_Xaml_Media_Imaging_IRenderTargetBitmap);

        public int PixelWidth => global::ABI.Microsoft.UI.Xaml.Media.Imaging.IRenderTargetBitmapMethods.get_PixelWidth(_objRef_global__Microsoft_UI_Xaml_Media_Imaging_IRenderTargetBitmap);

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Imaging.SoftwareBitmapSource))]
    [global::ABI.Microsoft.UI.Xaml.Media.Imaging.SoftwareBitmapSourceRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ISoftwareBitmapSource))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class SoftwareBitmapSource : global::Microsoft.UI.Xaml.Media.ImageSource, global::System.IDisposable, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<SoftwareBitmapSource>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Imaging_ISoftwareBitmapSource => _inner;
        private volatile IObjectReference ___objRef_global__System_IDisposable;
        private IObjectReference Make___objRef_global__System_IDisposable()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__System_IDisposable, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.System.IDisposableMethods.IID), null);
            return ___objRef_global__System_IDisposable;
        }
        private IObjectReference _objRef_global__System_IDisposable => ___objRef_global__System_IDisposable ?? Make___objRef_global__System_IDisposable();



        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Imaging_SoftwareBitmapSource;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Imaging_SoftwareBitmapSource
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Imaging_SoftwareBitmapSource;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Imaging_SoftwareBitmapSource = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Imaging.SoftwareBitmapSource");
                }
            }
        }

        public SoftwareBitmapSource() :base(global::WinRT.DerivedComposed.Instance)
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Xaml_Media_Imaging_SoftwareBitmapSource, global::ABI.Microsoft.UI.Xaml.Media.Imaging.ISoftwareBitmapSourceMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static new SoftwareBitmapSource FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<SoftwareBitmapSource>.FromAbi(thisPtr);
        }

        internal SoftwareBitmapSource(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Media.Imaging.ISoftwareBitmapSourceMethods.IID);

        }


        public static bool operator ==(SoftwareBitmapSource x, SoftwareBitmapSource y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(SoftwareBitmapSource x, SoftwareBitmapSource y) => !(x == y);
        public bool Equals(SoftwareBitmapSource other) => this == other;
        public override bool Equals(object obj) => obj is SoftwareBitmapSource that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public global::Windows.Foundation.IAsyncAction SetBitmapAsync(global::Windows.Graphics.Imaging.SoftwareBitmap softwareBitmap) => global::ABI.Microsoft.UI.Xaml.Media.Imaging.ISoftwareBitmapSourceMethods.SetBitmapAsync(_objRef_global__Microsoft_UI_Xaml_Media_Imaging_ISoftwareBitmapSource, softwareBitmap);

        public void Dispose() => global::ABI.System.IDisposableMethods.Dispose(_objRef_global__System_IDisposable);

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Imaging.SurfaceImageSource))]
    [global::ABI.Microsoft.UI.Xaml.Media.Imaging.SurfaceImageSourceRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ISurfaceImageSource))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public class SurfaceImageSource : global::Microsoft.UI.Xaml.Media.ImageSource, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<SurfaceImageSource>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Imaging_ISurfaceImageSource;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_Media_Imaging_ISurfaceImageSource()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_Media_Imaging_ISurfaceImageSource, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.Media.Imaging.ISurfaceImageSourceMethods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_Media_Imaging_ISurfaceImageSource;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Imaging_ISurfaceImageSource => ___objRef_global__Microsoft_UI_Xaml_Media_Imaging_ISurfaceImageSource ?? Make___objRef_global__Microsoft_UI_Xaml_Media_Imaging_ISurfaceImageSource();



        private static class _ISurfaceImageSourceFactoryMethods
        {
            public static unsafe IntPtr CreateInstanceWithDimensions(IObjectReference _obj, int pixelWidth, int pixelHeight, object baseInterface, out IntPtr innerInterface)
            {
                var ThisPtr = _obj.ThisPtr;

                ObjectReferenceValue __baseInterface = default;
                IntPtr __innerInterface = default;
                IntPtr __retval = default;
                try
                {
                    __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int, int, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, pixelWidth, pixelHeight, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                    global::System.GC.KeepAlive(_obj);
                    innerInterface = __innerInterface;
                    return __retval;
                }
                finally
                {
                    MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                }
            }

            public static unsafe IntPtr CreateInstanceWithDimensionsAndOpacity(IObjectReference _obj, int pixelWidth, int pixelHeight, bool isOpaque, object baseInterface, out IntPtr innerInterface)
            {
                var ThisPtr = _obj.ThisPtr;

                ObjectReferenceValue __baseInterface = default;
                IntPtr __innerInterface = default;
                IntPtr __retval = default;
                try
                {
                    __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int, int, byte, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[7](ThisPtr, pixelWidth, pixelHeight, (byte)(isOpaque ? 1 : 0), MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                    global::System.GC.KeepAlive(_obj);
                    innerInterface = __innerInterface;
                    return __retval;
                }
                finally
                {
                    MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                }
            }
        }

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Imaging_ISurfaceImageSourceFactory;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Imaging_ISurfaceImageSourceFactory
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Imaging_ISurfaceImageSourceFactory;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Imaging_ISurfaceImageSourceFactory = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Imaging.SurfaceImageSource", global::ABI.Microsoft.UI.Xaml.Media.Imaging.ISurfaceImageSourceFactoryMethods.IID);
                }
            }
        }

        public SurfaceImageSource(int pixelWidth, int pixelHeight):base(global::WinRT.DerivedComposed.Instance)
        {
            bool isAggregation = this.GetType() != typeof(SurfaceImageSource);
            object baseInspectable = isAggregation ? this : null;
            IntPtr composed = _ISurfaceImageSourceFactoryMethods.CreateInstanceWithDimensions(_objRef_global__Microsoft_UI_Xaml_Media_Imaging_ISurfaceImageSourceFactory, pixelWidth, pixelHeight, baseInspectable, out IntPtr inner);
            try
            {
                ComWrappersHelper.Init(isAggregation, this, composed, inner, global::ABI.Microsoft.UI.Xaml.Media.Imaging.ISurfaceImageSourceMethods.IID, out _inner);

            }
            finally
            {
                Marshal.Release(inner);   
            }
        }

        public SurfaceImageSource(int pixelWidth, int pixelHeight, bool isOpaque):base(global::WinRT.DerivedComposed.Instance)
        {
            bool isAggregation = this.GetType() != typeof(SurfaceImageSource);
            object baseInspectable = isAggregation ? this : null;
            IntPtr composed = _ISurfaceImageSourceFactoryMethods.CreateInstanceWithDimensionsAndOpacity(_objRef_global__Microsoft_UI_Xaml_Media_Imaging_ISurfaceImageSourceFactory, pixelWidth, pixelHeight, isOpaque, baseInspectable, out IntPtr inner);
            try
            {
                ComWrappersHelper.Init(isAggregation, this, composed, inner, global::ABI.Microsoft.UI.Xaml.Media.Imaging.ISurfaceImageSourceMethods.IID, out _inner);

            }
            finally
            {
                Marshal.Release(inner);   
            }
        }

        public static new SurfaceImageSource FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<SurfaceImageSource>.FromAbi(thisPtr);
        }

        protected internal SurfaceImageSource(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Media.Imaging.ISurfaceImageSourceMethods.IID);

        }


        public static bool operator ==(SurfaceImageSource x, SurfaceImageSource y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(SurfaceImageSource x, SurfaceImageSource y) => !(x == y);
        public bool Equals(SurfaceImageSource other) => this == other;
        public override bool Equals(object obj) => obj is SurfaceImageSource that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        protected SurfaceImageSource(global::WinRT.DerivedComposed _):base(_)
        {

        }
        bool IWinRTObject.HasUnwrappableNativeObject => this.GetType() == typeof(SurfaceImageSource);
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Imaging.SvgImageSource))]
    [global::ABI.Microsoft.UI.Xaml.Media.Imaging.SvgImageSourceRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ISvgImageSource))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public class SvgImageSource : global::Microsoft.UI.Xaml.Media.ImageSource, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<SvgImageSource>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Imaging_ISvgImageSource;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_Media_Imaging_ISvgImageSource()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_Media_Imaging_ISvgImageSource, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.Media.Imaging.ISvgImageSourceMethods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_Media_Imaging_ISvgImageSource;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Imaging_ISvgImageSource => ___objRef_global__Microsoft_UI_Xaml_Media_Imaging_ISvgImageSource ?? Make___objRef_global__Microsoft_UI_Xaml_Media_Imaging_ISvgImageSource();



        private static class _ISvgImageSourceFactoryMethods
        {
            public static unsafe IntPtr CreateInstance(IObjectReference _obj, object baseInterface, out IntPtr innerInterface)
            {
                var ThisPtr = _obj.ThisPtr;

                ObjectReferenceValue __baseInterface = default;
                IntPtr __innerInterface = default;
                IntPtr __retval = default;
                try
                {
                    __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                    global::System.GC.KeepAlive(_obj);
                    innerInterface = __innerInterface;
                    return __retval;
                }
                finally
                {
                    MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                }
            }

            public static unsafe IntPtr CreateInstanceWithUriSource(IObjectReference _obj, global::System.Uri uriSource, object baseInterface, out IntPtr innerInterface)
            {
                var ThisPtr = _obj.ThisPtr;

                ObjectReferenceValue __uriSource = default;
                ObjectReferenceValue __baseInterface = default;
                IntPtr __innerInterface = default;
                IntPtr __retval = default;
                try
                {
                    __uriSource = global::ABI.System.Uri.CreateMarshaler2(uriSource);
                    __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[7](ThisPtr, MarshalInspectable<object>.GetAbi(__uriSource), MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                    global::System.GC.KeepAlive(_obj);
                    innerInterface = __innerInterface;
                    return __retval;
                }
                finally
                {
                    MarshalInspectable<object>.DisposeMarshaler(__uriSource);
                    MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                }
            }
        }

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Imaging_ISvgImageSourceFactory;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Imaging_ISvgImageSourceFactory
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Imaging_ISvgImageSourceFactory;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Imaging_ISvgImageSourceFactory = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Imaging.SvgImageSource", global::ABI.Microsoft.UI.Xaml.Media.Imaging.ISvgImageSourceFactoryMethods.IID);
                }
            }
        }

        public SvgImageSource():base(global::WinRT.DerivedComposed.Instance)
        {
            bool isAggregation = this.GetType() != typeof(SvgImageSource);
            object baseInspectable = isAggregation ? this : null;
            IntPtr composed = _ISvgImageSourceFactoryMethods.CreateInstance(_objRef_global__Microsoft_UI_Xaml_Media_Imaging_ISvgImageSourceFactory,  baseInspectable, out IntPtr inner);
            try
            {
                ComWrappersHelper.Init(isAggregation, this, composed, inner, global::ABI.Microsoft.UI.Xaml.Media.Imaging.ISvgImageSourceMethods.IID, out _inner);

            }
            finally
            {
                Marshal.Release(inner);   
            }
        }

        public SvgImageSource(global::System.Uri uriSource):base(global::WinRT.DerivedComposed.Instance)
        {
            bool isAggregation = this.GetType() != typeof(SvgImageSource);
            object baseInspectable = isAggregation ? this : null;
            IntPtr composed = _ISvgImageSourceFactoryMethods.CreateInstanceWithUriSource(_objRef_global__Microsoft_UI_Xaml_Media_Imaging_ISvgImageSourceFactory, uriSource, baseInspectable, out IntPtr inner);
            try
            {
                ComWrappersHelper.Init(isAggregation, this, composed, inner, global::ABI.Microsoft.UI.Xaml.Media.Imaging.ISvgImageSourceMethods.IID, out _inner);

            }
            finally
            {
                Marshal.Release(inner);   
            }
        }

        public static I As<I>() => ActivationFactory.Get("Microsoft.UI.Xaml.Media.Imaging.SvgImageSource").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Imaging_ISvgImageSourceStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Imaging_ISvgImageSourceStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Imaging_ISvgImageSourceStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Imaging_ISvgImageSourceStatics = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Imaging.SvgImageSource", global::ABI.Microsoft.UI.Xaml.Media.Imaging.ISvgImageSourceStaticsMethods.IID);
                }
            }
        }

        public static global::Microsoft.UI.Xaml.DependencyProperty RasterizePixelHeightProperty => global::ABI.Microsoft.UI.Xaml.Media.Imaging.ISvgImageSourceStaticsMethods.get_RasterizePixelHeightProperty(_objRef_global__Microsoft_UI_Xaml_Media_Imaging_ISvgImageSourceStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty RasterizePixelWidthProperty => global::ABI.Microsoft.UI.Xaml.Media.Imaging.ISvgImageSourceStaticsMethods.get_RasterizePixelWidthProperty(_objRef_global__Microsoft_UI_Xaml_Media_Imaging_ISvgImageSourceStatics);

        public static global::Microsoft.UI.Xaml.DependencyProperty UriSourceProperty => global::ABI.Microsoft.UI.Xaml.Media.Imaging.ISvgImageSourceStaticsMethods.get_UriSourceProperty(_objRef_global__Microsoft_UI_Xaml_Media_Imaging_ISvgImageSourceStatics);

        public static new SvgImageSource FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<SvgImageSource>.FromAbi(thisPtr);
        }

        protected internal SvgImageSource(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Media.Imaging.ISvgImageSourceMethods.IID);

        }


        public static bool operator ==(SvgImageSource x, SvgImageSource y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(SvgImageSource x, SvgImageSource y) => !(x == y);
        public bool Equals(SvgImageSource other) => this == other;
        public override bool Equals(object obj) => obj is SvgImageSource that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        protected SvgImageSource(global::WinRT.DerivedComposed _):base(_)
        {

        }
        bool IWinRTObject.HasUnwrappableNativeObject => this.GetType() == typeof(SvgImageSource);
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public global::Windows.Foundation.IAsyncOperation<SvgImageSourceLoadStatus> SetSourceAsync(global::Windows.Storage.Streams.IRandomAccessStream streamSource) => global::ABI.Microsoft.UI.Xaml.Media.Imaging.ISvgImageSourceMethods.SetSourceAsync(_objRef_global__Microsoft_UI_Xaml_Media_Imaging_ISvgImageSource, streamSource);

        public event global::Windows.Foundation.TypedEventHandler<SvgImageSource, SvgImageSourceFailedEventArgs> OpenFailed
        {
            add => global::ABI.Microsoft.UI.Xaml.Media.Imaging.ISvgImageSourceMethods.Get_OpenFailed2(_objRef_global__Microsoft_UI_Xaml_Media_Imaging_ISvgImageSource, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Xaml.Media.Imaging.ISvgImageSourceMethods.Get_OpenFailed2(_objRef_global__Microsoft_UI_Xaml_Media_Imaging_ISvgImageSource, (IWinRTObject)this).Unsubscribe(value);
        }

        public event global::Windows.Foundation.TypedEventHandler<SvgImageSource, SvgImageSourceOpenedEventArgs> Opened
        {
            add => global::ABI.Microsoft.UI.Xaml.Media.Imaging.ISvgImageSourceMethods.Get_Opened2(_objRef_global__Microsoft_UI_Xaml_Media_Imaging_ISvgImageSource, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Xaml.Media.Imaging.ISvgImageSourceMethods.Get_Opened2(_objRef_global__Microsoft_UI_Xaml_Media_Imaging_ISvgImageSource, (IWinRTObject)this).Unsubscribe(value);
        }

        public double RasterizePixelHeight
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Imaging.ISvgImageSourceMethods.get_RasterizePixelHeight(_objRef_global__Microsoft_UI_Xaml_Media_Imaging_ISvgImageSource);
            set => global::ABI.Microsoft.UI.Xaml.Media.Imaging.ISvgImageSourceMethods.set_RasterizePixelHeight(_objRef_global__Microsoft_UI_Xaml_Media_Imaging_ISvgImageSource, value);
        }

        public double RasterizePixelWidth
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Imaging.ISvgImageSourceMethods.get_RasterizePixelWidth(_objRef_global__Microsoft_UI_Xaml_Media_Imaging_ISvgImageSource);
            set => global::ABI.Microsoft.UI.Xaml.Media.Imaging.ISvgImageSourceMethods.set_RasterizePixelWidth(_objRef_global__Microsoft_UI_Xaml_Media_Imaging_ISvgImageSource, value);
        }

        public global::System.Uri UriSource
        {
            get => global::ABI.Microsoft.UI.Xaml.Media.Imaging.ISvgImageSourceMethods.get_UriSource(_objRef_global__Microsoft_UI_Xaml_Media_Imaging_ISvgImageSource);
            set => global::ABI.Microsoft.UI.Xaml.Media.Imaging.ISvgImageSourceMethods.set_UriSource(_objRef_global__Microsoft_UI_Xaml_Media_Imaging_ISvgImageSource, value);
        }

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Imaging.SvgImageSourceFailedEventArgs))]
    [global::ABI.Microsoft.UI.Xaml.Media.Imaging.SvgImageSourceFailedEventArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ISvgImageSourceFailedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class SvgImageSourceFailedEventArgs : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<SvgImageSourceFailedEventArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Imaging_ISvgImageSourceFailedEventArgs => _inner;


        public static SvgImageSourceFailedEventArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<SvgImageSourceFailedEventArgs>.FromAbi(thisPtr);
        }

        internal SvgImageSourceFailedEventArgs(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Media.Imaging.ISvgImageSourceFailedEventArgsMethods.IID);

        }


        public static bool operator ==(SvgImageSourceFailedEventArgs x, SvgImageSourceFailedEventArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(SvgImageSourceFailedEventArgs x, SvgImageSourceFailedEventArgs y) => !(x == y);
        public bool Equals(SvgImageSourceFailedEventArgs other) => this == other;
        public override bool Equals(object obj) => obj is SvgImageSourceFailedEventArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public SvgImageSourceLoadStatus Status => global::ABI.Microsoft.UI.Xaml.Media.Imaging.ISvgImageSourceFailedEventArgsMethods.get_Status(_objRef_global__Microsoft_UI_Xaml_Media_Imaging_ISvgImageSourceFailedEventArgs);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<SvgImageSourceLoadStatus>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public enum SvgImageSourceLoadStatus : int
    {
        Success = unchecked((int)0),
        NetworkError = unchecked((int)0x1),
        InvalidFormat = unchecked((int)0x2),
        Other = unchecked((int)0x3),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Imaging.SvgImageSourceOpenedEventArgs))]
    [global::ABI.Microsoft.UI.Xaml.Media.Imaging.SvgImageSourceOpenedEventArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(ISvgImageSourceOpenedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class SvgImageSourceOpenedEventArgs : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<SvgImageSourceOpenedEventArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Imaging_ISvgImageSourceOpenedEventArgs => _inner;


        public static SvgImageSourceOpenedEventArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<SvgImageSourceOpenedEventArgs>.FromAbi(thisPtr);
        }

        internal SvgImageSourceOpenedEventArgs(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Media.Imaging.ISvgImageSourceOpenedEventArgsMethods.IID);

        }


        public static bool operator ==(SvgImageSourceOpenedEventArgs x, SvgImageSourceOpenedEventArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(SvgImageSourceOpenedEventArgs x, SvgImageSourceOpenedEventArgs y) => !(x == y);
        public bool Equals(SvgImageSourceOpenedEventArgs other) => this == other;
        public override bool Equals(object obj) => obj is SvgImageSourceOpenedEventArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Imaging.VirtualSurfaceImageSource))]
    [global::ABI.Microsoft.UI.Xaml.Media.Imaging.VirtualSurfaceImageSourceRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IVirtualSurfaceImageSource))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class VirtualSurfaceImageSource : SurfaceImageSource, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<VirtualSurfaceImageSource>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Imaging_IVirtualSurfaceImageSource => _inner;


        private static class _IVirtualSurfaceImageSourceFactoryMethods
        {
            public static unsafe IntPtr CreateInstanceWithDimensions(IObjectReference _obj, int pixelWidth, int pixelHeight)
            {
                var ThisPtr = _obj.ThisPtr;

                IntPtr __retval = default;
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int, int, IntPtr*, int>**)ThisPtr)[6](ThisPtr, pixelWidth, pixelHeight, &__retval));
                global::System.GC.KeepAlive(_obj);
                return __retval;
            }

            public static unsafe IntPtr CreateInstanceWithDimensionsAndOpacity(IObjectReference _obj, int pixelWidth, int pixelHeight, bool isOpaque)
            {
                var ThisPtr = _obj.ThisPtr;

                IntPtr __retval = default;
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int, int, byte, IntPtr*, int>**)ThisPtr)[7](ThisPtr, pixelWidth, pixelHeight, (byte)(isOpaque ? 1 : 0), &__retval));
                global::System.GC.KeepAlive(_obj);
                return __retval;
            }
        }

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Imaging_IVirtualSurfaceImageSourceFactory;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Imaging_IVirtualSurfaceImageSourceFactory
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Imaging_IVirtualSurfaceImageSourceFactory;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Imaging_IVirtualSurfaceImageSourceFactory = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Imaging.VirtualSurfaceImageSource", global::ABI.Microsoft.UI.Xaml.Media.Imaging.IVirtualSurfaceImageSourceFactoryMethods.IID);
                }
            }
        }

        public VirtualSurfaceImageSource(int pixelWidth, int pixelHeight) :base(global::WinRT.DerivedComposed.Instance)
        { 
        IntPtr ptr = (_IVirtualSurfaceImageSourceFactoryMethods.CreateInstanceWithDimensions(_objRef_global__Microsoft_UI_Xaml_Media_Imaging_IVirtualSurfaceImageSourceFactory, pixelWidth, pixelHeight)); 
        try 
        { 
        _inner = ComWrappersSupport.GetObjectReferenceForInterface(ptr, global::ABI.Microsoft.UI.Xaml.Media.Imaging.IVirtualSurfaceImageSourceMethods.IID, false); 

        } 
        finally 
        { 
        MarshalInspectable<object>.DisposeAbi(ptr); 
        }

        ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
        ComWrappersHelper.Init(_inner, false);
        }

        public VirtualSurfaceImageSource(int pixelWidth, int pixelHeight, bool isOpaque) :base(global::WinRT.DerivedComposed.Instance)
        { 
        IntPtr ptr = (_IVirtualSurfaceImageSourceFactoryMethods.CreateInstanceWithDimensionsAndOpacity(_objRef_global__Microsoft_UI_Xaml_Media_Imaging_IVirtualSurfaceImageSourceFactory, pixelWidth, pixelHeight, isOpaque)); 
        try 
        { 
        _inner = ComWrappersSupport.GetObjectReferenceForInterface(ptr, global::ABI.Microsoft.UI.Xaml.Media.Imaging.IVirtualSurfaceImageSourceMethods.IID, false); 

        } 
        finally 
        { 
        MarshalInspectable<object>.DisposeAbi(ptr); 
        }

        ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
        ComWrappersHelper.Init(_inner, false);
        }

        public static new VirtualSurfaceImageSource FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<VirtualSurfaceImageSource>.FromAbi(thisPtr);
        }

        internal VirtualSurfaceImageSource(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Media.Imaging.IVirtualSurfaceImageSourceMethods.IID);

        }


        public static bool operator ==(VirtualSurfaceImageSource x, VirtualSurfaceImageSource y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(VirtualSurfaceImageSource x, VirtualSurfaceImageSource y) => !(x == y);
        public bool Equals(VirtualSurfaceImageSource other) => this == other;
        public override bool Equals(object obj) => obj is VirtualSurfaceImageSource that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Imaging.WriteableBitmap))]
    [global::ABI.Microsoft.UI.Xaml.Media.Imaging.WriteableBitmapRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IWriteableBitmap))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public sealed class WriteableBitmap : BitmapSource, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<WriteableBitmap>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Imaging_IWriteableBitmap => _inner;


        private static class _IWriteableBitmapFactoryMethods
        {
            public static unsafe IntPtr CreateInstanceWithDimensions(IObjectReference _obj, int pixelWidth, int pixelHeight)
            {
                var ThisPtr = _obj.ThisPtr;

                IntPtr __retval = default;
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int, int, IntPtr*, int>**)ThisPtr)[6](ThisPtr, pixelWidth, pixelHeight, &__retval));
                global::System.GC.KeepAlive(_obj);
                return __retval;
            }
        }

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Imaging_IWriteableBitmapFactory;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Imaging_IWriteableBitmapFactory
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Imaging_IWriteableBitmapFactory;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Imaging_IWriteableBitmapFactory = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Imaging.WriteableBitmap", global::ABI.Microsoft.UI.Xaml.Media.Imaging.IWriteableBitmapFactoryMethods.IID);
                }
            }
        }

        public WriteableBitmap(int pixelWidth, int pixelHeight) :base(global::WinRT.DerivedComposed.Instance)
        { 
        IntPtr ptr = (_IWriteableBitmapFactoryMethods.CreateInstanceWithDimensions(_objRef_global__Microsoft_UI_Xaml_Media_Imaging_IWriteableBitmapFactory, pixelWidth, pixelHeight)); 
        try 
        { 
        _inner = ComWrappersSupport.GetObjectReferenceForInterface(ptr, global::ABI.Microsoft.UI.Xaml.Media.Imaging.IWriteableBitmapMethods.IID, false); 

        } 
        finally 
        { 
        MarshalInspectable<object>.DisposeAbi(ptr); 
        }

        ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
        ComWrappersHelper.Init(_inner, false);
        }

        public static new WriteableBitmap FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<WriteableBitmap>.FromAbi(thisPtr);
        }

        internal WriteableBitmap(IObjectReference objRef)
            : base(global::WinRT.DerivedComposed.Instance)

        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Media.Imaging.IWriteableBitmapMethods.IID);

        }


        public static bool operator ==(WriteableBitmap x, WriteableBitmap y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(WriteableBitmap x, WriteableBitmap y) => !(x == y);
        public bool Equals(WriteableBitmap other) => this == other;
        public override bool Equals(object obj) => obj is WriteableBitmap that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;

        private struct InterfaceTag<I>{};


        public void Invalidate() => global::ABI.Microsoft.UI.Xaml.Media.Imaging.IWriteableBitmapMethods.Invalidate(_objRef_global__Microsoft_UI_Xaml_Media_Imaging_IWriteableBitmap);

        public global::Windows.Storage.Streams.IBuffer PixelBuffer => global::ABI.Microsoft.UI.Xaml.Media.Imaging.IWriteableBitmapMethods.get_PixelBuffer(_objRef_global__Microsoft_UI_Xaml_Media_Imaging_IWriteableBitmap);

        protected override bool IsOverridableInterface(Guid iid) => base.IsOverridableInterface(iid);

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Media.Imaging.XamlRenderingBackgroundTask))]
    [global::ABI.Microsoft.UI.Xaml.Media.Imaging.XamlRenderingBackgroundTaskRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IXamlRenderingBackgroundTask))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public class XamlRenderingBackgroundTask : IXamlRenderingBackgroundTaskOverrides, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<XamlRenderingBackgroundTask>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;




        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Imaging_IXamlRenderingBackgroundTask;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_Media_Imaging_IXamlRenderingBackgroundTask()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_Media_Imaging_IXamlRenderingBackgroundTask, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.Media.Imaging.IXamlRenderingBackgroundTaskMethods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_Media_Imaging_IXamlRenderingBackgroundTask;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Imaging_IXamlRenderingBackgroundTask => ___objRef_global__Microsoft_UI_Xaml_Media_Imaging_IXamlRenderingBackgroundTask ?? Make___objRef_global__Microsoft_UI_Xaml_Media_Imaging_IXamlRenderingBackgroundTask();

        private volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Imaging_IXamlRenderingBackgroundTaskOverrides;
        private IObjectReference Make___objRef_global__Microsoft_UI_Xaml_Media_Imaging_IXamlRenderingBackgroundTaskOverrides()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__Microsoft_UI_Xaml_Media_Imaging_IXamlRenderingBackgroundTaskOverrides, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.Microsoft.UI.Xaml.Media.Imaging.IXamlRenderingBackgroundTaskOverridesMethods.IID), null);
            return ___objRef_global__Microsoft_UI_Xaml_Media_Imaging_IXamlRenderingBackgroundTaskOverrides;
        }
        private IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Imaging_IXamlRenderingBackgroundTaskOverrides => ___objRef_global__Microsoft_UI_Xaml_Media_Imaging_IXamlRenderingBackgroundTaskOverrides ?? Make___objRef_global__Microsoft_UI_Xaml_Media_Imaging_IXamlRenderingBackgroundTaskOverrides();



        private static class _IXamlRenderingBackgroundTaskFactoryMethods
        {
            public static unsafe IntPtr CreateInstance(IObjectReference _obj, object baseInterface, out IntPtr innerInterface)
            {
                var ThisPtr = _obj.ThisPtr;

                ObjectReferenceValue __baseInterface = default;
                IntPtr __innerInterface = default;
                IntPtr __retval = default;
                try
                {
                    __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                    global::System.GC.KeepAlive(_obj);
                    innerInterface = __innerInterface;
                    return __retval;
                }
                finally
                {
                    MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                }
            }
        }

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Xaml_Media_Imaging_IXamlRenderingBackgroundTaskFactory;
        private static IObjectReference _objRef_global__Microsoft_UI_Xaml_Media_Imaging_IXamlRenderingBackgroundTaskFactory
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Xaml_Media_Imaging_IXamlRenderingBackgroundTaskFactory;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Xaml_Media_Imaging_IXamlRenderingBackgroundTaskFactory = ActivationFactory.Get("Microsoft.UI.Xaml.Media.Imaging.XamlRenderingBackgroundTask", global::ABI.Microsoft.UI.Xaml.Media.Imaging.IXamlRenderingBackgroundTaskFactoryMethods.IID);
                }
            }
        }

        protected XamlRenderingBackgroundTask()
        {
            bool isAggregation = this.GetType() != typeof(XamlRenderingBackgroundTask);
            object baseInspectable = isAggregation ? this : null;
            IntPtr composed = _IXamlRenderingBackgroundTaskFactoryMethods.CreateInstance(_objRef_global__Microsoft_UI_Xaml_Media_Imaging_IXamlRenderingBackgroundTaskFactory,  baseInspectable, out IntPtr inner);
            try
            {
                ComWrappersHelper.Init(isAggregation, this, composed, inner, global::ABI.Microsoft.UI.Xaml.Media.Imaging.IXamlRenderingBackgroundTaskMethods.IID, out _inner);

            }
            finally
            {
                Marshal.Release(inner);   
            }
        }

        public static XamlRenderingBackgroundTask FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<XamlRenderingBackgroundTask>.FromAbi(thisPtr);
        }

        protected internal XamlRenderingBackgroundTask(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Xaml.Media.Imaging.IXamlRenderingBackgroundTaskMethods.IID);

        }


        public static bool operator ==(XamlRenderingBackgroundTask x, XamlRenderingBackgroundTask y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(XamlRenderingBackgroundTask x, XamlRenderingBackgroundTask y) => !(x == y);
        public bool Equals(XamlRenderingBackgroundTask other) => this == other;
        public override bool Equals(object obj) => obj is XamlRenderingBackgroundTask that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        protected XamlRenderingBackgroundTask(global::WinRT.DerivedComposed _)
        {

        }
        bool IWinRTObject.HasUnwrappableNativeObject => this.GetType() == typeof(XamlRenderingBackgroundTask);
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        protected virtual void OnRun(global::Windows.ApplicationModel.Background.IBackgroundTaskInstance taskInstance) => global::ABI.Microsoft.UI.Xaml.Media.Imaging.IXamlRenderingBackgroundTaskOverridesMethods.OnRun(_objRef_global__Microsoft_UI_Xaml_Media_Imaging_IXamlRenderingBackgroundTaskOverrides, taskInstance);

        void IXamlRenderingBackgroundTaskOverrides.OnRun(global::Windows.ApplicationModel.Background.IBackgroundTaskInstance taskInstance) => OnRun(taskInstance);
        protected virtual bool IsOverridableInterface(Guid iid) => global::ABI.Microsoft.UI.Xaml.Media.Imaging.IXamlRenderingBackgroundTaskOverridesMethods.IID == iid;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
}

#pragma warning disable CA1416
namespace ABI.Microsoft.UI.Xaml.Media.Imaging
{
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct BitmapImage
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Media.Imaging.BitmapImage obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Media.Imaging.BitmapImage>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Media.Imaging.IBitmapImageMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Media.Imaging.BitmapImage obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Media.Imaging.IBitmapImageMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Media.Imaging.BitmapImage FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Media.Imaging.BitmapImage.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Media.Imaging.BitmapImage obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Imaging.BitmapImage>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Media.Imaging.BitmapImage[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Imaging.BitmapImage>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Imaging.BitmapImage>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Media.Imaging.BitmapImage[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Imaging.BitmapImage>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Media.Imaging.BitmapImage[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Imaging.BitmapImage>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Media.Imaging.BitmapImage[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Imaging.BitmapImage>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Imaging.BitmapImage>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Imaging.BitmapImage>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class BitmapImageRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Media.Imaging.BitmapImage(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct BitmapSource
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Media.Imaging.BitmapSource obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Media.Imaging.BitmapSource>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Media.Imaging.IBitmapSourceMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Media.Imaging.BitmapSource obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Media.Imaging.IBitmapSourceMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Media.Imaging.BitmapSource FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Media.Imaging.BitmapSource.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Media.Imaging.BitmapSource obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Imaging.BitmapSource>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Media.Imaging.BitmapSource[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Imaging.BitmapSource>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Imaging.BitmapSource>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Media.Imaging.BitmapSource[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Imaging.BitmapSource>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Media.Imaging.BitmapSource[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Imaging.BitmapSource>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Media.Imaging.BitmapSource[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Imaging.BitmapSource>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Imaging.BitmapSource>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Imaging.BitmapSource>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class BitmapSourceRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Media.Imaging.BitmapSource(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct DownloadProgressEventArgs
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Media.Imaging.DownloadProgressEventArgs obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Media.Imaging.DownloadProgressEventArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Media.Imaging.IDownloadProgressEventArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Media.Imaging.DownloadProgressEventArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Media.Imaging.IDownloadProgressEventArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Media.Imaging.DownloadProgressEventArgs FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Media.Imaging.DownloadProgressEventArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Media.Imaging.DownloadProgressEventArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Imaging.DownloadProgressEventArgs>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Media.Imaging.DownloadProgressEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Imaging.DownloadProgressEventArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Imaging.DownloadProgressEventArgs>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Media.Imaging.DownloadProgressEventArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Imaging.DownloadProgressEventArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Media.Imaging.DownloadProgressEventArgs[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Imaging.DownloadProgressEventArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Media.Imaging.DownloadProgressEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Imaging.DownloadProgressEventArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Imaging.DownloadProgressEventArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Imaging.DownloadProgressEventArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class DownloadProgressEventArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Media.Imaging.DownloadProgressEventArgs(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    [Guid("9A8E4AF5-B124-5205-8AE9-3496E063C569")]
    public static class DownloadProgressEventHandler
    {
        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xF5, 0x4A, 0x8E, 0x9A, 0x24, 0xB1, 0x5, 0x52, 0x8A, 0xE9, 0x34, 0x96, 0xE0, 0x63, 0xC5, 0x69 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }



        public static readonly IntPtr AbiToProjectionVftablePtr;

        static unsafe DownloadProgressEventHandler()
        {

            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(DownloadProgressEventHandler), sizeof(IntPtr) * 4);
            *(global::WinRT.Interop.IUnknownVftbl*)AbiToProjectionVftablePtr = global::WinRT.Interop.IUnknownVftbl.AbiToProjectionVftbl;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, int>*)AbiToProjectionVftablePtr)[3] = &Do_Abi_Invoke;
            global::WinRT.ComWrappersSupport.RegisterDelegateFactory(typeof(global::Microsoft.UI.Xaml.Media.Imaging.DownloadProgressEventHandler), CreateRcw);
        }

        public static unsafe IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Media.Imaging.DownloadProgressEventHandler managedDelegate) => 
        managedDelegate is null ? null : MarshalDelegate.CreateMarshaler(managedDelegate, IID);

        public static unsafe ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Media.Imaging.DownloadProgressEventHandler managedDelegate) => 
        MarshalDelegate.CreateMarshaler2(managedDelegate, IID);

        public static IntPtr GetAbi(IObjectReference value) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Imaging.DownloadProgressEventHandler>.GetAbi(value);

        public static unsafe global::Microsoft.UI.Xaml.Media.Imaging.DownloadProgressEventHandler FromAbi(IntPtr nativeDelegate)
        {
            return MarshalDelegate.FromAbi<global::Microsoft.UI.Xaml.Media.Imaging.DownloadProgressEventHandler>(nativeDelegate);
        }

        public static global::Microsoft.UI.Xaml.Media.Imaging.DownloadProgressEventHandler CreateRcw(IntPtr ptr)
        {
            return new global::Microsoft.UI.Xaml.Media.Imaging.DownloadProgressEventHandler(new NativeDelegateWrapper(ComWrappersSupport.GetObjectReferenceForInterface<IUnknownVftbl>(ptr, IID)).Invoke);
        }

        #if !NET
        [global::WinRT.ObjectReferenceWrapper(nameof(_nativeDelegate))]
        private sealed class NativeDelegateWrapper
        #else
        private sealed class NativeDelegateWrapper : IWinRTObject
        #endif
        {
            private readonly ObjectReference<global::WinRT.Interop.IUnknownVftbl> _nativeDelegate;

            public NativeDelegateWrapper(ObjectReference<global::WinRT.Interop.IUnknownVftbl> nativeDelegate)
            {
                _nativeDelegate = nativeDelegate;
            }

            #if NET
            IObjectReference IWinRTObject.NativeObject => _nativeDelegate;
            bool IWinRTObject.HasUnwrappableNativeObject => true;
            private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
            private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
            {
                global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
                return _queryInterfaceCache;
            }
            global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
            private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
            private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
            {
                global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
                return _additionalTypeData;
            }
            global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();
            #endif

            public unsafe void Invoke(object sender, global::Microsoft.UI.Xaml.Media.Imaging.DownloadProgressEventArgs e)
            {{
                IntPtr ThisPtr = _nativeDelegate.ThisPtr;
                var abiInvoke = (delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, int>)(*(void***)_nativeDelegate.ThisPtr)[3];
                ObjectReferenceValue __sender = default;
                ObjectReferenceValue __e = default;
                try
                {
                    __sender = MarshalInspectable<object>.CreateMarshaler2(sender);
                    __e = global::ABI.Microsoft.UI.Xaml.Media.Imaging.DownloadProgressEventArgs.CreateMarshaler2(e);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR(abiInvoke(ThisPtr, MarshalInspectable<object>.GetAbi(__sender), MarshalInspectable<object>.GetAbi(__e)));
                    global::System.GC.KeepAlive(_nativeDelegate);
                }
                finally
                {
                    MarshalInspectable<object>.DisposeMarshaler(__sender);
                    MarshalInspectable<object>.DisposeMarshaler(__e);
                }
            }
            }
        }

        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Media.Imaging.DownloadProgressEventHandler managedDelegate) => CreateMarshaler2(managedDelegate).Detach();

        public static void DisposeMarshaler(IObjectReference value) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Imaging.DownloadProgressEventHandler>.DisposeMarshaler(value);

        public static void DisposeAbi(IntPtr abi) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Imaging.DownloadProgressEventHandler>.DisposeAbi(abi);

        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Imaging.DownloadProgressEventHandler>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Media.Imaging.DownloadProgressEventHandler[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Imaging.DownloadProgressEventHandler>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Imaging.DownloadProgressEventHandler>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Media.Imaging.DownloadProgressEventHandler[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Imaging.DownloadProgressEventHandler>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Media.Imaging.DownloadProgressEventHandler[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Imaging.DownloadProgressEventHandler>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Media.Imaging.DownloadProgressEventHandler[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Imaging.DownloadProgressEventHandler>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Imaging.DownloadProgressEventHandler>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Imaging.DownloadProgressEventHandler>.DisposeMarshalerArray(array);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);


        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_Invoke(IntPtr thisPtr, IntPtr sender, IntPtr e)
        {



            try
            {

                global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Media.Imaging.DownloadProgressEventHandler>(thisPtr).Invoke(MarshalInspectable<object>.FromAbi(sender), global::ABI.Microsoft.UI.Xaml.Media.Imaging.DownloadProgressEventArgs.FromAbi(e))
                ;

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
    }


    internal sealed class DownloadProgressEventHandlerWinRTTypeDetails : global::WinRT.DelegateTypeDetails<global::Microsoft.UI.Xaml.Media.Imaging.DownloadProgressEventHandler>
    {
        public override ComWrappers.ComInterfaceEntry GetDelegateInterface()
        {
            return new global::System.Runtime.InteropServices.ComWrappers.ComInterfaceEntry
            {
                IID = DownloadProgressEventHandler.IID,
                Vtable = DownloadProgressEventHandler.AbiToProjectionVftablePtr
            };
        }
    }
    internal static class IBitmapImageMethods
    {


        internal static unsafe void Play(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int>**)ThisPtr)[26](ThisPtr));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe void Stop(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int>**)ThisPtr)[27](ThisPtr));
            global::System.GC.KeepAlive(_obj);
        }
        internal static unsafe bool get_AutoPlay(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[18](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_AutoPlay(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[19](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.UI.Xaml.Media.Imaging.BitmapCreateOptions get_CreateOptions(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Xaml.Media.Imaging.BitmapCreateOptions __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Media.Imaging.BitmapCreateOptions*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_CreateOptions(IObjectReference _obj, global::Microsoft.UI.Xaml.Media.Imaging.BitmapCreateOptions value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Media.Imaging.BitmapCreateOptions, int>**)ThisPtr)[7](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe int get_DecodePixelHeight(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            int __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int*, int>**)ThisPtr)[12](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_DecodePixelHeight(IObjectReference _obj, int value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int, int>**)ThisPtr)[13](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.UI.Xaml.Media.Imaging.DecodePixelType get_DecodePixelType(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Xaml.Media.Imaging.DecodePixelType __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Media.Imaging.DecodePixelType*, int>**)ThisPtr)[14](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_DecodePixelType(IObjectReference _obj, global::Microsoft.UI.Xaml.Media.Imaging.DecodePixelType value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Media.Imaging.DecodePixelType, int>**)ThisPtr)[15](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe int get_DecodePixelWidth(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            int __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int*, int>**)ThisPtr)[10](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_DecodePixelWidth(IObjectReference _obj, int value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int, int>**)ThisPtr)[11](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe bool get_IsAnimatedBitmap(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[16](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        internal static unsafe bool get_IsPlaying(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[17](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        internal static unsafe global::System.Uri get_UriSource(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.System.Uri.FromAbi(__retval);
            }
            finally
            {
                global::ABI.System.Uri.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_UriSource(IObjectReference _obj, global::System.Uri value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.System.Uri.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[9](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }


        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.Media.Imaging.DownloadProgressEventHandler>> _DownloadProgress_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.Media.Imaging.DownloadProgressEventHandler>> MakeDownloadProgressTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _DownloadProgress_, new(), null);
            return _DownloadProgress_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.Media.Imaging.DownloadProgressEventHandler>> _DownloadProgress => _DownloadProgress_ ?? MakeDownloadProgressTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.Media.Imaging.DownloadProgressEventHandler> Get_DownloadProgress2(IObjectReference _obj, object _thisObj)
        {
            return _DownloadProgress.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Microsoft_UI_Xaml_Media_Imaging_DownloadProgressEventHandler(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[20],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[21],
                0);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.ExceptionRoutedEventHandler>> _ImageFailed_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.ExceptionRoutedEventHandler>> MakeImageFailedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _ImageFailed_, new(), null);
            return _ImageFailed_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.ExceptionRoutedEventHandler>> _ImageFailed => _ImageFailed_ ?? MakeImageFailedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.ExceptionRoutedEventHandler> Get_ImageFailed2(IObjectReference _obj, object _thisObj)
        {
            return _ImageFailed.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Microsoft_UI_Xaml_ExceptionRoutedEventHandler(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[24],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[25],
                1);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.RoutedEventHandler>> _ImageOpened_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.RoutedEventHandler>> MakeImageOpenedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _ImageOpened_, new(), null);
            return _ImageOpened_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.RoutedEventHandler>> _ImageOpened => _ImageOpened_ ?? MakeImageOpenedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.RoutedEventHandler> Get_ImageOpened2(IObjectReference _obj, object _thisObj)
        {
            return _ImageOpened.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Microsoft_UI_Xaml_RoutedEventHandler(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[22],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[23],
                2);
            });
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x16, 0x99, 0xC2, 0x5C, 0x11, 0xA4, 0xC2, 0x5B, 0xA3, 0xC5, 0xA0, 0xD, 0x99, 0xA5, 0x9D, 0xA8 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("5CC29916-A411-5BC2-A3C5-A00D99A59DA8")]
    internal interface IBitmapImage : global::Microsoft.UI.Xaml.Media.Imaging.IBitmapImage
    {
    }
    internal static class IBitmapImageFactoryMethods
    {


        internal static unsafe global::Microsoft.UI.Xaml.Media.Imaging.BitmapImage CreateInstanceWithUriSource(IObjectReference _obj, global::System.Uri uriSource)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __uriSource = default;
            IntPtr __retval = default;
            try
            {
                __uriSource = global::ABI.System.Uri.CreateMarshaler2(uriSource);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__uriSource), &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Media.Imaging.BitmapImage.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__uriSource);
                global::ABI.Microsoft.UI.Xaml.Media.Imaging.BitmapImage.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xE9, 0xE0, 0x37, 0xF0, 0x29, 0xF2, 0x2E, 0x52, 0x95, 0xC9, 0xDA, 0x22, 0x11, 0xA1, 0x4B, 0x5 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("F037E0E9-F229-522E-95C9-DA2211A14B05")]
    internal interface IBitmapImageFactory : global::Microsoft.UI.Xaml.Media.Imaging.IBitmapImageFactory
    {
    }
    internal static class IBitmapImageStaticsMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_AutoPlayProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[13](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_CreateOptionsProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_DecodePixelHeightProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[9](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_DecodePixelTypeProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[10](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_DecodePixelWidthProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_IsAnimatedBitmapProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[11](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_IsPlayingProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[12](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_UriSourceProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xA9, 0x71, 0xCF, 0x4B, 0x97, 0x18, 0xDC, 0x51, 0x8E, 0x3F, 0x2C, 0x5C, 0x79, 0x6D, 0x1C, 0xD9 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("4BCF71A9-1897-51DC-8E3F-2C5C796D1CD9")]
    internal interface IBitmapImageStatics : global::Microsoft.UI.Xaml.Media.Imaging.IBitmapImageStatics
    {
    }
    internal static class IBitmapSourceMethods
    {


        internal static unsafe void SetSource(IObjectReference _obj, global::Windows.Storage.Streams.IRandomAccessStream streamSource)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __streamSource = default;
            try
            {
                __streamSource = MarshalInterface<global::Windows.Storage.Streams.IRandomAccessStream>.CreateMarshaler2(streamSource, global::ABI.Windows.Storage.Streams.IRandomAccessStreamMethods.IID);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[8](ThisPtr, MarshalInspectable<object>.GetAbi(__streamSource)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__streamSource);
            }
        }

        internal static unsafe global::Windows.Foundation.IAsyncAction SetSourceAsync(IObjectReference _obj, global::Windows.Storage.Streams.IRandomAccessStream streamSource)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __streamSource = default;
            IntPtr __retval = default;
            try
            {
                __streamSource = MarshalInterface<global::Windows.Storage.Streams.IRandomAccessStream>.CreateMarshaler2(streamSource, global::ABI.Windows.Storage.Streams.IRandomAccessStreamMethods.IID);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[9](ThisPtr, MarshalInspectable<object>.GetAbi(__streamSource), &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInterface<global::Windows.Foundation.IAsyncAction>.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__streamSource);
                MarshalInterface<global::Windows.Foundation.IAsyncAction>.DisposeAbi(__retval);
            }
        }
        internal static unsafe int get_PixelHeight(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            int __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int*, int>**)ThisPtr)[7](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe int get_PixelWidth(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            int __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x9D, 0x26, 0x24, 0x84, 0x82, 0x9B, 0x4F, 0x53, 0x8F, 0xEA, 0xAF, 0x5B, 0x5E, 0xF9, 0x6B, 0xF2 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("8424269D-9B82-534F-8FEA-AF5B5EF96BF2")]
    internal interface IBitmapSource : global::Microsoft.UI.Xaml.Media.Imaging.IBitmapSource
    {
    }
    internal static class IBitmapSourceFactoryMethods
    {


        internal static unsafe global::Microsoft.UI.Xaml.Media.Imaging.BitmapSource CreateInstance(IObjectReference _obj, object baseInterface, out object innerInterface)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __baseInterface = default;
            IntPtr __innerInterface = default;
            IntPtr __retval = default;
            try
            {
                __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                global::System.GC.KeepAlive(_obj);
                innerInterface = MarshalInspectable<object>.FromAbi(__innerInterface);
                return global::ABI.Microsoft.UI.Xaml.Media.Imaging.BitmapSource.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                MarshalInspectable<object>.DisposeAbi(__innerInterface);
                global::ABI.Microsoft.UI.Xaml.Media.Imaging.BitmapSource.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x25, 0xF0, 0x92, 0x3, 0x68, 0x18, 0x76, 0x58, 0xAD, 0x67, 0x12, 0xE9, 0x4A, 0x8D, 0xA5, 0xBF };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("0392F025-1868-5876-AD67-12E94A8DA5BF")]
    internal interface IBitmapSourceFactory : global::Microsoft.UI.Xaml.Media.Imaging.IBitmapSourceFactory
    {
    }
    internal static class IBitmapSourceStaticsMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_PixelHeightProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_PixelWidthProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x5E, 0x74, 0xA3, 0xEF, 0x0, 0x44, 0xB, 0x5F, 0xBD, 0xC7, 0x3F, 0x29, 0x11, 0xA3, 0xD7, 0x19 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("EFA3745E-4400-5F0B-BDC7-3F2911A3D719")]
    internal interface IBitmapSourceStatics : global::Microsoft.UI.Xaml.Media.Imaging.IBitmapSourceStatics
    {
    }
    internal static class IDownloadProgressEventArgsMethods
    {

        internal static unsafe int get_Progress(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            int __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_Progress(IObjectReference _obj, int value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int, int>**)ThisPtr)[7](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xB, 0xA8, 0xE, 0x9A, 0x17, 0x1A, 0xD5, 0x50, 0x83, 0xF3, 0x37, 0x77, 0x38, 0x21, 0x26, 0x19 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("9A0EA80B-1A17-50D5-83F3-377738212619")]
    internal interface IDownloadProgressEventArgs : global::Microsoft.UI.Xaml.Media.Imaging.IDownloadProgressEventArgs
    {
    }
    internal static class IRenderTargetBitmapMethods
    {


        internal static unsafe global::Windows.Foundation.IAsyncAction RenderAsync(IObjectReference _obj, global::Microsoft.UI.Xaml.UIElement element)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __element = default;
            IntPtr __retval = default;
            try
            {
                __element = global::ABI.Microsoft.UI.Xaml.UIElement.CreateMarshaler2(element);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, MarshalInspectable<object>.GetAbi(__element), &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInterface<global::Windows.Foundation.IAsyncAction>.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__element);
                MarshalInterface<global::Windows.Foundation.IAsyncAction>.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Windows.Foundation.IAsyncAction RenderAsync(IObjectReference _obj, global::Microsoft.UI.Xaml.UIElement element, int scaledWidth, int scaledHeight)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __element = default;
            IntPtr __retval = default;
            try
            {
                __element = global::ABI.Microsoft.UI.Xaml.UIElement.CreateMarshaler2(element);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int, int, IntPtr*, int>**)ThisPtr)[9](ThisPtr, MarshalInspectable<object>.GetAbi(__element), scaledWidth, scaledHeight, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInterface<global::Windows.Foundation.IAsyncAction>.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__element);
                MarshalInterface<global::Windows.Foundation.IAsyncAction>.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Windows.Foundation.IAsyncOperation<global::Windows.Storage.Streams.IBuffer> GetPixelsAsync(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[10](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperation_1_Windows_Storage_Streams_IBuffer.EnsureInitialized();
                return MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Windows.Storage.Streams.IBuffer>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Windows.Storage.Streams.IBuffer>>.DisposeAbi(__retval);
            }
        }
        internal static unsafe int get_PixelHeight(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            int __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int*, int>**)ThisPtr)[7](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe int get_PixelWidth(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            int __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x7D, 0x40, 0x10, 0xCF, 0x8B, 0xFA, 0xA3, 0x57, 0x95, 0x74, 0x71, 0x5, 0x29, 0xAE, 0xB, 0x4 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("CF10407D-FA8B-57A3-9574-710529AE0B04")]
    internal interface IRenderTargetBitmap : global::Microsoft.UI.Xaml.Media.Imaging.IRenderTargetBitmap
    {
    }
    internal static class IRenderTargetBitmapStaticsMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_PixelHeightProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_PixelWidthProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xE4, 0x22, 0xE8, 0x83, 0x84, 0x9F, 0x86, 0x59, 0x93, 0xB0, 0xE4, 0xF7, 0x1, 0x9C, 0x36, 0x7D };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("83E822E4-9F84-5986-93B0-E4F7019C367D")]
    internal interface IRenderTargetBitmapStatics : global::Microsoft.UI.Xaml.Media.Imaging.IRenderTargetBitmapStatics
    {
    }
    internal static class ISoftwareBitmapSourceMethods
    {


        internal static unsafe global::Windows.Foundation.IAsyncAction SetBitmapAsync(IObjectReference _obj, global::Windows.Graphics.Imaging.SoftwareBitmap softwareBitmap)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __softwareBitmap = default;
            IntPtr __retval = default;
            try
            {
                __softwareBitmap = global::ABI.Windows.Graphics.Imaging.SoftwareBitmap.CreateMarshaler2(softwareBitmap);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__softwareBitmap), &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInterface<global::Windows.Foundation.IAsyncAction>.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__softwareBitmap);
                MarshalInterface<global::Windows.Foundation.IAsyncAction>.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x2, 0xA8, 0xAC, 0xA6, 0x24, 0x1F, 0x1E, 0x5A, 0xBF, 0x8, 0x78, 0x1A, 0x85, 0xED, 0x55, 0x11 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("A6ACA802-1F24-5A1E-BF08-781A85ED5511")]
    internal interface ISoftwareBitmapSource : global::Microsoft.UI.Xaml.Media.Imaging.ISoftwareBitmapSource
    {
    }
    internal static class ISurfaceImageSourceMethods
    {



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x9C, 0x8D, 0x7, 0xAC, 0xE0, 0xD0, 0xF9, 0x5F, 0xB7, 0x3E, 0x98, 0xE8, 0x2E, 0x4C, 0x8D, 0x36 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("AC078D9C-D0E0-5FF9-B73E-98E82E4C8D36")]
    internal interface ISurfaceImageSource : global::Microsoft.UI.Xaml.Media.Imaging.ISurfaceImageSource
    {
    }
    internal static class ISurfaceImageSourceFactoryMethods
    {


        internal static unsafe global::Microsoft.UI.Xaml.Media.Imaging.SurfaceImageSource CreateInstanceWithDimensions(IObjectReference _obj, int pixelWidth, int pixelHeight, object baseInterface, out object innerInterface)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __baseInterface = default;
            IntPtr __innerInterface = default;
            IntPtr __retval = default;
            try
            {
                __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int, int, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, pixelWidth, pixelHeight, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                global::System.GC.KeepAlive(_obj);
                innerInterface = MarshalInspectable<object>.FromAbi(__innerInterface);
                return global::ABI.Microsoft.UI.Xaml.Media.Imaging.SurfaceImageSource.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                MarshalInspectable<object>.DisposeAbi(__innerInterface);
                global::ABI.Microsoft.UI.Xaml.Media.Imaging.SurfaceImageSource.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.Media.Imaging.SurfaceImageSource CreateInstanceWithDimensionsAndOpacity(IObjectReference _obj, int pixelWidth, int pixelHeight, bool isOpaque, object baseInterface, out object innerInterface)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __baseInterface = default;
            IntPtr __innerInterface = default;
            IntPtr __retval = default;
            try
            {
                __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int, int, byte, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[7](ThisPtr, pixelWidth, pixelHeight, (byte)(isOpaque ? 1 : 0), MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                global::System.GC.KeepAlive(_obj);
                innerInterface = MarshalInspectable<object>.FromAbi(__innerInterface);
                return global::ABI.Microsoft.UI.Xaml.Media.Imaging.SurfaceImageSource.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                MarshalInspectable<object>.DisposeAbi(__innerInterface);
                global::ABI.Microsoft.UI.Xaml.Media.Imaging.SurfaceImageSource.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xD2, 0x6E, 0xA2, 0x9, 0xB3, 0x11, 0xF1, 0x5E, 0xAC, 0x56, 0x20, 0xD0, 0x64, 0xCC, 0xCA, 0x34 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("09A26ED2-11B3-5EF1-AC56-20D064CCCA34")]
    internal interface ISurfaceImageSourceFactory : global::Microsoft.UI.Xaml.Media.Imaging.ISurfaceImageSourceFactory
    {
    }
    internal static class ISvgImageSourceMethods
    {


        internal static unsafe global::Windows.Foundation.IAsyncOperation<global::Microsoft.UI.Xaml.Media.Imaging.SvgImageSourceLoadStatus> SetSourceAsync(IObjectReference _obj, global::Windows.Storage.Streams.IRandomAccessStream streamSource)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __streamSource = default;
            IntPtr __retval = default;
            try
            {
                __streamSource = MarshalInterface<global::Windows.Storage.Streams.IRandomAccessStream>.CreateMarshaler2(streamSource, global::ABI.Windows.Storage.Streams.IRandomAccessStreamMethods.IID);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[16](ThisPtr, MarshalInspectable<object>.GetAbi(__streamSource), &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperation_1_Microsoft_UI_Xaml_Media_Imaging_SvgImageSourceLoadStatus.EnsureInitialized();
                return MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Microsoft.UI.Xaml.Media.Imaging.SvgImageSourceLoadStatus>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__streamSource);
                MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Microsoft.UI.Xaml.Media.Imaging.SvgImageSourceLoadStatus>>.DisposeAbi(__retval);
            }
        }
        internal static unsafe double get_RasterizePixelHeight(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[10](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_RasterizePixelHeight(IObjectReference _obj, double value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, int>**)ThisPtr)[11](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe double get_RasterizePixelWidth(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            double __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_RasterizePixelWidth(IObjectReference _obj, double value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, double, int>**)ThisPtr)[9](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::System.Uri get_UriSource(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.System.Uri.FromAbi(__retval);
            }
            finally
            {
                global::ABI.System.Uri.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_UriSource(IObjectReference _obj, global::System.Uri value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.System.Uri.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[7](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }


        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Media.Imaging.SvgImageSource, global::Microsoft.UI.Xaml.Media.Imaging.SvgImageSourceFailedEventArgs>>> _OpenFailed_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Media.Imaging.SvgImageSource, global::Microsoft.UI.Xaml.Media.Imaging.SvgImageSourceFailedEventArgs>>> MakeOpenFailedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _OpenFailed_, new(), null);
            return _OpenFailed_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Media.Imaging.SvgImageSource, global::Microsoft.UI.Xaml.Media.Imaging.SvgImageSourceFailedEventArgs>>> _OpenFailed => _OpenFailed_ ?? MakeOpenFailedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Media.Imaging.SvgImageSource, global::Microsoft.UI.Xaml.Media.Imaging.SvgImageSourceFailedEventArgs>> Get_OpenFailed2(IObjectReference _obj, object _thisObj)
        {
            return _OpenFailed.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Xaml_Media_Imaging_SvgImageSource__global__Microsoft_UI_Xaml_Media_Imaging_SvgImageSourceFailedEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[14],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[15],
                0);
            });
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Media.Imaging.SvgImageSource, global::Microsoft.UI.Xaml.Media.Imaging.SvgImageSourceOpenedEventArgs>>> _Opened_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Media.Imaging.SvgImageSource, global::Microsoft.UI.Xaml.Media.Imaging.SvgImageSourceOpenedEventArgs>>> MakeOpenedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _Opened_, new(), null);
            return _Opened_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Media.Imaging.SvgImageSource, global::Microsoft.UI.Xaml.Media.Imaging.SvgImageSourceOpenedEventArgs>>> _Opened => _Opened_ ?? MakeOpenedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Media.Imaging.SvgImageSource, global::Microsoft.UI.Xaml.Media.Imaging.SvgImageSourceOpenedEventArgs>> Get_Opened2(IObjectReference _obj, object _thisObj)
        {
            return _Opened.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Xaml_Media_Imaging_SvgImageSource__global__Microsoft_UI_Xaml_Media_Imaging_SvgImageSourceOpenedEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[12],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[13],
                1);
            });
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x3C, 0x1D, 0xB6, 0xD5, 0x8D, 0xB6, 0xA2, 0x53, 0xB0, 0x7B, 0xBA, 0x6A, 0xDF, 0xDD, 0x58, 0x87 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("D5B61D3C-B68D-53A2-B07B-BA6ADFDD5887")]
    internal interface ISvgImageSource : global::Microsoft.UI.Xaml.Media.Imaging.ISvgImageSource
    {
    }
    internal static class ISvgImageSourceFactoryMethods
    {


        internal static unsafe global::Microsoft.UI.Xaml.Media.Imaging.SvgImageSource CreateInstance(IObjectReference _obj, object baseInterface, out object innerInterface)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __baseInterface = default;
            IntPtr __innerInterface = default;
            IntPtr __retval = default;
            try
            {
                __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                global::System.GC.KeepAlive(_obj);
                innerInterface = MarshalInspectable<object>.FromAbi(__innerInterface);
                return global::ABI.Microsoft.UI.Xaml.Media.Imaging.SvgImageSource.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                MarshalInspectable<object>.DisposeAbi(__innerInterface);
                global::ABI.Microsoft.UI.Xaml.Media.Imaging.SvgImageSource.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.Media.Imaging.SvgImageSource CreateInstanceWithUriSource(IObjectReference _obj, global::System.Uri uriSource, object baseInterface, out object innerInterface)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __uriSource = default;
            ObjectReferenceValue __baseInterface = default;
            IntPtr __innerInterface = default;
            IntPtr __retval = default;
            try
            {
                __uriSource = global::ABI.System.Uri.CreateMarshaler2(uriSource);
                __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[7](ThisPtr, MarshalInspectable<object>.GetAbi(__uriSource), MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                global::System.GC.KeepAlive(_obj);
                innerInterface = MarshalInspectable<object>.FromAbi(__innerInterface);
                return global::ABI.Microsoft.UI.Xaml.Media.Imaging.SvgImageSource.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__uriSource);
                MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                MarshalInspectable<object>.DisposeAbi(__innerInterface);
                global::ABI.Microsoft.UI.Xaml.Media.Imaging.SvgImageSource.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x3F, 0x67, 0x85, 0x2F, 0x64, 0xAC, 0xD, 0x57, 0x9B, 0xDA, 0x94, 0xFA, 0x8, 0x2E, 0xEA, 0xD9 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("2F85673F-AC64-570D-9BDA-94FA082EEAD9")]
    internal interface ISvgImageSourceFactory : global::Microsoft.UI.Xaml.Media.Imaging.ISvgImageSourceFactory
    {
    }
    internal static class ISvgImageSourceFailedEventArgsMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.Media.Imaging.SvgImageSourceLoadStatus get_Status(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Xaml.Media.Imaging.SvgImageSourceLoadStatus __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Xaml.Media.Imaging.SvgImageSourceLoadStatus*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x78, 0x62, 0xE6, 0x76, 0x4, 0x78, 0x39, 0x54, 0xA5, 0xD, 0x14, 0xC5, 0xBA, 0x89, 0x67, 0x14 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("76E66278-7804-5439-A50D-14C5BA896714")]
    internal interface ISvgImageSourceFailedEventArgs : global::Microsoft.UI.Xaml.Media.Imaging.ISvgImageSourceFailedEventArgs
    {
    }
    internal static class ISvgImageSourceOpenedEventArgsMethods
    {



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xD5, 0x60, 0x98, 0x1C, 0xD0, 0x38, 0x21, 0x5B, 0x8D, 0x48, 0x7, 0x2F, 0x1E, 0x25, 0x4E, 0x39 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("1C9860D5-38D0-5B21-8D48-072F1E254E39")]
    internal interface ISvgImageSourceOpenedEventArgs : global::Microsoft.UI.Xaml.Media.Imaging.ISvgImageSourceOpenedEventArgs
    {
    }
    internal static class ISvgImageSourceStaticsMethods
    {

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_RasterizePixelHeightProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_RasterizePixelWidthProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.DependencyProperty get_UriSourceProperty(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.DependencyProperty.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.DependencyProperty.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x68, 0x10, 0xAD, 0xE3, 0xC6, 0xF4, 0x13, 0x55, 0xA7, 0x77, 0x29, 0x80, 0xF0, 0xBA, 0x41, 0xBD };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("E3AD1068-F4C6-5513-A777-2980F0BA41BD")]
    internal interface ISvgImageSourceStatics : global::Microsoft.UI.Xaml.Media.Imaging.ISvgImageSourceStatics
    {
    }
    internal static class IVirtualSurfaceImageSourceMethods
    {



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xA6, 0x96, 0xFF, 0xE4, 0xDE, 0xFE, 0x9C, 0x58, 0xA0, 0x7, 0x41, 0x78, 0xB5, 0x3B, 0x67, 0x39 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("E4FF96A6-FEDE-589C-A007-4178B53B6739")]
    internal interface IVirtualSurfaceImageSource : global::Microsoft.UI.Xaml.Media.Imaging.IVirtualSurfaceImageSource
    {
    }
    internal static class IVirtualSurfaceImageSourceFactoryMethods
    {


        internal static unsafe global::Microsoft.UI.Xaml.Media.Imaging.VirtualSurfaceImageSource CreateInstanceWithDimensions(IObjectReference _obj, int pixelWidth, int pixelHeight)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int, int, IntPtr*, int>**)ThisPtr)[6](ThisPtr, pixelWidth, pixelHeight, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Media.Imaging.VirtualSurfaceImageSource.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Media.Imaging.VirtualSurfaceImageSource.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Xaml.Media.Imaging.VirtualSurfaceImageSource CreateInstanceWithDimensionsAndOpacity(IObjectReference _obj, int pixelWidth, int pixelHeight, bool isOpaque)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int, int, byte, IntPtr*, int>**)ThisPtr)[7](ThisPtr, pixelWidth, pixelHeight, (byte)(isOpaque ? 1 : 0), &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Media.Imaging.VirtualSurfaceImageSource.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Media.Imaging.VirtualSurfaceImageSource.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x2C, 0xF, 0x49, 0x8, 0xA8, 0x4, 0x31, 0x50, 0xB9, 0xC7, 0x70, 0x70, 0x60, 0xD7, 0xCD, 0x48 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("08490F2C-04A8-5031-B9C7-707060D7CD48")]
    internal interface IVirtualSurfaceImageSourceFactory : global::Microsoft.UI.Xaml.Media.Imaging.IVirtualSurfaceImageSourceFactory
    {
    }
    internal static class IWriteableBitmapMethods
    {


        internal static unsafe void Invalidate(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int>**)ThisPtr)[7](ThisPtr));
            global::System.GC.KeepAlive(_obj);
        }
        internal static unsafe global::Windows.Storage.Streams.IBuffer get_PixelBuffer(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInterface<global::Windows.Storage.Streams.IBuffer>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::Windows.Storage.Streams.IBuffer>.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xA9, 0x24, 0xC8, 0x78, 0x43, 0xE, 0x1E, 0x5F, 0x93, 0xBC, 0xD0, 0x46, 0xCC, 0xA8, 0x2B, 0x7E };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("78C824A9-0E43-5F1E-93BC-D046CCA82B7E")]
    internal interface IWriteableBitmap : global::Microsoft.UI.Xaml.Media.Imaging.IWriteableBitmap
    {
    }
    internal static class IWriteableBitmapFactoryMethods
    {


        internal static unsafe global::Microsoft.UI.Xaml.Media.Imaging.WriteableBitmap CreateInstanceWithDimensions(IObjectReference _obj, int pixelWidth, int pixelHeight)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int, int, IntPtr*, int>**)ThisPtr)[6](ThisPtr, pixelWidth, pixelHeight, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Xaml.Media.Imaging.WriteableBitmap.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.UI.Xaml.Media.Imaging.WriteableBitmap.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xD9, 0x61, 0xE8, 0x26, 0x80, 0xB0, 0x2B, 0x51, 0x96, 0xC4, 0x80, 0x5, 0xE, 0x7E, 0x8, 0xD1 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("26E861D9-B080-512B-96C4-80050E7E08D1")]
    internal interface IWriteableBitmapFactory : global::Microsoft.UI.Xaml.Media.Imaging.IWriteableBitmapFactory
    {
    }
    internal static class IXamlRenderingBackgroundTaskMethods
    {



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xC, 0x0, 0x7, 0x78, 0x50, 0xA0, 0x21, 0x51, 0xAC, 0x74, 0x33, 0x22, 0xD5, 0x35, 0x8E, 0x39 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("7807000C-A050-5121-AC74-3322D5358E39")]
    internal interface IXamlRenderingBackgroundTask : global::Microsoft.UI.Xaml.Media.Imaging.IXamlRenderingBackgroundTask
    {
    }
    internal static class IXamlRenderingBackgroundTaskFactoryMethods
    {


        internal static unsafe global::Microsoft.UI.Xaml.Media.Imaging.XamlRenderingBackgroundTask CreateInstance(IObjectReference _obj, object baseInterface, out object innerInterface)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __baseInterface = default;
            IntPtr __innerInterface = default;
            IntPtr __retval = default;
            try
            {
                __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                global::System.GC.KeepAlive(_obj);
                innerInterface = MarshalInspectable<object>.FromAbi(__innerInterface);
                return global::ABI.Microsoft.UI.Xaml.Media.Imaging.XamlRenderingBackgroundTask.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                MarshalInspectable<object>.DisposeAbi(__innerInterface);
                global::ABI.Microsoft.UI.Xaml.Media.Imaging.XamlRenderingBackgroundTask.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xA3, 0x47, 0x52, 0x20, 0xFE, 0x9F, 0x9A, 0x59, 0xA2, 0x1A, 0x71, 0x81, 0x44, 0x2A, 0x9D, 0x75 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("205247A3-9FFE-599A-A21A-7181442A9D75")]
    internal interface IXamlRenderingBackgroundTaskFactory : global::Microsoft.UI.Xaml.Media.Imaging.IXamlRenderingBackgroundTaskFactory
    {
    }
    public static class IXamlRenderingBackgroundTaskOverridesMethods
    {


        internal static unsafe void OnRun(IObjectReference _obj, global::Windows.ApplicationModel.Background.IBackgroundTaskInstance taskInstance)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __taskInstance = default;
            try
            {
                __taskInstance = MarshalInterface<global::Windows.ApplicationModel.Background.IBackgroundTaskInstance>.CreateMarshaler2(taskInstance, global::ABI.Windows.ApplicationModel.Background.IBackgroundTaskInstanceMethods.IID);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__taskInstance)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__taskInstance);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x37, 0x32, 0x73, 0x18, 0x4B, 0x32, 0xC0, 0x57, 0x89, 0xB2, 0x58, 0x75, 0x47, 0x2A, 0xCC, 0x80 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

        public static global::System.IntPtr AbiToProjectionVftablePtr => IXamlRenderingBackgroundTaskOverrides.AbiToProjectionVftablePtr;

    }

    [Guid("18733237-324B-57C0-89B2-5875472ACC80")]
    internal unsafe interface IXamlRenderingBackgroundTaskOverrides : global::Microsoft.UI.Xaml.Media.Imaging.IXamlRenderingBackgroundTaskOverrides
    {

        public static readonly IntPtr AbiToProjectionVftablePtr;
        static unsafe IXamlRenderingBackgroundTaskOverrides()
        {
            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(IXamlRenderingBackgroundTaskOverrides), sizeof(IInspectable.Vftbl) + sizeof(IntPtr) * 1);
            *(IInspectable.Vftbl*)AbiToProjectionVftablePtr = IInspectable.Vftbl.AbiToProjectionVftable;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>*)AbiToProjectionVftablePtr)[6] = &Do_Abi_OnRun_0;
        }

        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_OnRun_0(IntPtr thisPtr, IntPtr taskInstance)
        {



            try
            {
                global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Media.Imaging.IXamlRenderingBackgroundTaskOverrides>(thisPtr).OnRun(MarshalInterface<global::Windows.ApplicationModel.Background.IBackgroundTaskInstance>.FromAbi(taskInstance));

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
    }

    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct RenderTargetBitmap
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Media.Imaging.RenderTargetBitmap obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Media.Imaging.RenderTargetBitmap>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Media.Imaging.IRenderTargetBitmapMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Media.Imaging.RenderTargetBitmap obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Media.Imaging.IRenderTargetBitmapMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Media.Imaging.RenderTargetBitmap FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Media.Imaging.RenderTargetBitmap.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Media.Imaging.RenderTargetBitmap obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Imaging.RenderTargetBitmap>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Media.Imaging.RenderTargetBitmap[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Imaging.RenderTargetBitmap>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Imaging.RenderTargetBitmap>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Media.Imaging.RenderTargetBitmap[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Imaging.RenderTargetBitmap>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Media.Imaging.RenderTargetBitmap[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Imaging.RenderTargetBitmap>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Media.Imaging.RenderTargetBitmap[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Imaging.RenderTargetBitmap>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Imaging.RenderTargetBitmap>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Imaging.RenderTargetBitmap>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class RenderTargetBitmapRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Media.Imaging.RenderTargetBitmap(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct SoftwareBitmapSource
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Media.Imaging.SoftwareBitmapSource obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Media.Imaging.SoftwareBitmapSource>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Media.Imaging.ISoftwareBitmapSourceMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Media.Imaging.SoftwareBitmapSource obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Media.Imaging.ISoftwareBitmapSourceMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Media.Imaging.SoftwareBitmapSource FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Media.Imaging.SoftwareBitmapSource.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Media.Imaging.SoftwareBitmapSource obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Imaging.SoftwareBitmapSource>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Media.Imaging.SoftwareBitmapSource[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Imaging.SoftwareBitmapSource>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Imaging.SoftwareBitmapSource>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Media.Imaging.SoftwareBitmapSource[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Imaging.SoftwareBitmapSource>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Media.Imaging.SoftwareBitmapSource[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Imaging.SoftwareBitmapSource>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Media.Imaging.SoftwareBitmapSource[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Imaging.SoftwareBitmapSource>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Imaging.SoftwareBitmapSource>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Imaging.SoftwareBitmapSource>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class SoftwareBitmapSourceRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Media.Imaging.SoftwareBitmapSource(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct SurfaceImageSource
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Media.Imaging.SurfaceImageSource obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Media.Imaging.SurfaceImageSource>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Media.Imaging.ISurfaceImageSourceMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Media.Imaging.SurfaceImageSource obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Media.Imaging.ISurfaceImageSourceMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Media.Imaging.SurfaceImageSource FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Media.Imaging.SurfaceImageSource.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Media.Imaging.SurfaceImageSource obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Imaging.SurfaceImageSource>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Media.Imaging.SurfaceImageSource[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Imaging.SurfaceImageSource>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Imaging.SurfaceImageSource>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Media.Imaging.SurfaceImageSource[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Imaging.SurfaceImageSource>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Media.Imaging.SurfaceImageSource[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Imaging.SurfaceImageSource>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Media.Imaging.SurfaceImageSource[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Imaging.SurfaceImageSource>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Imaging.SurfaceImageSource>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Imaging.SurfaceImageSource>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class SurfaceImageSourceRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Media.Imaging.SurfaceImageSource(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct SvgImageSource
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Media.Imaging.SvgImageSource obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Media.Imaging.SvgImageSource>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Media.Imaging.ISvgImageSourceMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Media.Imaging.SvgImageSource obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Media.Imaging.ISvgImageSourceMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Media.Imaging.SvgImageSource FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Media.Imaging.SvgImageSource.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Media.Imaging.SvgImageSource obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Imaging.SvgImageSource>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Media.Imaging.SvgImageSource[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Imaging.SvgImageSource>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Imaging.SvgImageSource>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Media.Imaging.SvgImageSource[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Imaging.SvgImageSource>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Media.Imaging.SvgImageSource[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Imaging.SvgImageSource>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Media.Imaging.SvgImageSource[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Imaging.SvgImageSource>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Imaging.SvgImageSource>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Imaging.SvgImageSource>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class SvgImageSourceRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Media.Imaging.SvgImageSource(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct SvgImageSourceFailedEventArgs
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Media.Imaging.SvgImageSourceFailedEventArgs obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Media.Imaging.SvgImageSourceFailedEventArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Media.Imaging.ISvgImageSourceFailedEventArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Media.Imaging.SvgImageSourceFailedEventArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Media.Imaging.ISvgImageSourceFailedEventArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Media.Imaging.SvgImageSourceFailedEventArgs FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Media.Imaging.SvgImageSourceFailedEventArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Media.Imaging.SvgImageSourceFailedEventArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Imaging.SvgImageSourceFailedEventArgs>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Media.Imaging.SvgImageSourceFailedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Imaging.SvgImageSourceFailedEventArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Imaging.SvgImageSourceFailedEventArgs>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Media.Imaging.SvgImageSourceFailedEventArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Imaging.SvgImageSourceFailedEventArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Media.Imaging.SvgImageSourceFailedEventArgs[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Imaging.SvgImageSourceFailedEventArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Media.Imaging.SvgImageSourceFailedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Imaging.SvgImageSourceFailedEventArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Imaging.SvgImageSourceFailedEventArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Imaging.SvgImageSourceFailedEventArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class SvgImageSourceFailedEventArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Media.Imaging.SvgImageSourceFailedEventArgs(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct SvgImageSourceOpenedEventArgs
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Media.Imaging.SvgImageSourceOpenedEventArgs obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Media.Imaging.SvgImageSourceOpenedEventArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Media.Imaging.ISvgImageSourceOpenedEventArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Media.Imaging.SvgImageSourceOpenedEventArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Media.Imaging.ISvgImageSourceOpenedEventArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Media.Imaging.SvgImageSourceOpenedEventArgs FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Media.Imaging.SvgImageSourceOpenedEventArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Media.Imaging.SvgImageSourceOpenedEventArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Imaging.SvgImageSourceOpenedEventArgs>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Media.Imaging.SvgImageSourceOpenedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Imaging.SvgImageSourceOpenedEventArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Imaging.SvgImageSourceOpenedEventArgs>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Media.Imaging.SvgImageSourceOpenedEventArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Imaging.SvgImageSourceOpenedEventArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Media.Imaging.SvgImageSourceOpenedEventArgs[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Imaging.SvgImageSourceOpenedEventArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Media.Imaging.SvgImageSourceOpenedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Imaging.SvgImageSourceOpenedEventArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Imaging.SvgImageSourceOpenedEventArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Imaging.SvgImageSourceOpenedEventArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class SvgImageSourceOpenedEventArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Media.Imaging.SvgImageSourceOpenedEventArgs(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct VirtualSurfaceImageSource
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Media.Imaging.VirtualSurfaceImageSource obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Media.Imaging.VirtualSurfaceImageSource>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Media.Imaging.IVirtualSurfaceImageSourceMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Media.Imaging.VirtualSurfaceImageSource obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Media.Imaging.IVirtualSurfaceImageSourceMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Media.Imaging.VirtualSurfaceImageSource FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Media.Imaging.VirtualSurfaceImageSource.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Media.Imaging.VirtualSurfaceImageSource obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Imaging.VirtualSurfaceImageSource>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Media.Imaging.VirtualSurfaceImageSource[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Imaging.VirtualSurfaceImageSource>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Imaging.VirtualSurfaceImageSource>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Media.Imaging.VirtualSurfaceImageSource[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Imaging.VirtualSurfaceImageSource>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Media.Imaging.VirtualSurfaceImageSource[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Imaging.VirtualSurfaceImageSource>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Media.Imaging.VirtualSurfaceImageSource[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Imaging.VirtualSurfaceImageSource>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Imaging.VirtualSurfaceImageSource>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Imaging.VirtualSurfaceImageSource>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class VirtualSurfaceImageSourceRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Media.Imaging.VirtualSurfaceImageSource(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct WriteableBitmap
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Media.Imaging.WriteableBitmap obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Media.Imaging.WriteableBitmap>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Media.Imaging.IWriteableBitmapMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Media.Imaging.WriteableBitmap obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Media.Imaging.IWriteableBitmapMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Media.Imaging.WriteableBitmap FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Media.Imaging.WriteableBitmap.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Media.Imaging.WriteableBitmap obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Imaging.WriteableBitmap>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Media.Imaging.WriteableBitmap[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Imaging.WriteableBitmap>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Imaging.WriteableBitmap>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Media.Imaging.WriteableBitmap[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Imaging.WriteableBitmap>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Media.Imaging.WriteableBitmap[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Imaging.WriteableBitmap>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Media.Imaging.WriteableBitmap[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Imaging.WriteableBitmap>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Imaging.WriteableBitmap>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Imaging.WriteableBitmap>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class WriteableBitmapRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Media.Imaging.WriteableBitmap(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct XamlRenderingBackgroundTask
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Media.Imaging.XamlRenderingBackgroundTask obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Xaml.Media.Imaging.XamlRenderingBackgroundTask>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Xaml.Media.Imaging.IXamlRenderingBackgroundTaskMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Media.Imaging.XamlRenderingBackgroundTask obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Xaml.Media.Imaging.IXamlRenderingBackgroundTaskMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Xaml.Media.Imaging.XamlRenderingBackgroundTask FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Xaml.Media.Imaging.XamlRenderingBackgroundTask.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Media.Imaging.XamlRenderingBackgroundTask obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Imaging.XamlRenderingBackgroundTask>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Media.Imaging.XamlRenderingBackgroundTask[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Imaging.XamlRenderingBackgroundTask>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Imaging.XamlRenderingBackgroundTask>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Media.Imaging.XamlRenderingBackgroundTask[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Imaging.XamlRenderingBackgroundTask>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Media.Imaging.XamlRenderingBackgroundTask[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Imaging.XamlRenderingBackgroundTask>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Media.Imaging.XamlRenderingBackgroundTask[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Imaging.XamlRenderingBackgroundTask>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Imaging.XamlRenderingBackgroundTask>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Media.Imaging.XamlRenderingBackgroundTask>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class XamlRenderingBackgroundTaskRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Xaml.Media.Imaging.XamlRenderingBackgroundTask(inspectable.ObjRef);
    }
}
#pragma warning restore CA1416
