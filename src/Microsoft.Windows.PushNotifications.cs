//------------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by cswinrt.exe version 2.2.0.241111.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq.Expressions;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using WinRT;
using WinRT.Interop;


#pragma warning disable 0169 // warning CS0169: The field '...' is never used
#pragma warning disable 0649 // warning CS0169: Field '...' is never assigned to
#pragma warning disable CA2207, CA1063, CA1033, CA1001, CA2213

namespace Microsoft.Windows.PushNotifications
{
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.PushNotifications")][Guid("DA28BBCB-7695-5D38-AF82-F30B72FEF1F6")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.PushNotifications.IPushNotificationChannel))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(PushNotificationsContract), 65536u)]
    internal interface IPushNotificationChannel
    {
        void Close();
        global::System.DateTimeOffset ExpirationTime { get; }
        global::System.Uri Uri { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.PushNotifications")][Guid("4DF3717F-5D33-56E9-B381-1B350C95722E")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.PushNotifications.IPushNotificationCreateChannelResult))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(PushNotificationsContract), 65536u)]
    internal interface IPushNotificationCreateChannelResult
    {
        PushNotificationChannel Channel { get; }
        global::System.Exception ExtendedError { get; }
        PushNotificationChannelStatus Status { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.PushNotifications")][Guid("902F4ABA-FF63-5DFE-A88F-15CC6BED55FF")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.PushNotifications.IPushNotificationManager))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(PushNotificationsContract), 65536u)]
    internal interface IPushNotificationManager
    {
        void Register();
        void Unregister();
        void UnregisterAll();
        global::Windows.Foundation.IAsyncOperationWithProgress<PushNotificationCreateChannelResult, PushNotificationCreateChannelStatus> CreateChannelAsync(Guid remoteId);
        event global::Windows.Foundation.TypedEventHandler<PushNotificationManager, PushNotificationReceivedEventArgs> PushReceived;
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.PushNotifications")][Guid("71329470-1B55-58DC-A00C-68C26F2D8BD9")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.PushNotifications.IPushNotificationManagerStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(PushNotificationsContract), 65536u)]
    internal interface IPushNotificationManagerStatics
    {
        bool IsSupported();
        PushNotificationManager Default { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.PushNotifications")][Guid("FBD4EC53-BB83-5495-8777-D3CF13E4299C")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.PushNotifications.IPushNotificationReceivedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(PushNotificationsContract), 65536u)]
    internal interface IPushNotificationReceivedEventArgs
    {
        global::Windows.ApplicationModel.Background.BackgroundTaskDeferral GetDeferral();
        byte[] Payload { get; }
        event global::Windows.ApplicationModel.Background.BackgroundTaskCanceledEventHandler Canceled;
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.PushNotifications")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.PushNotifications.PushNotificationChannel))]
    [global::ABI.Microsoft.Windows.PushNotifications.PushNotificationChannelRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IPushNotificationChannel))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(PushNotificationsContract), 65536u)]
    public sealed class PushNotificationChannel : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<PushNotificationChannel>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_Windows_PushNotifications_IPushNotificationChannel => _inner;


        public static PushNotificationChannel FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<PushNotificationChannel>.FromAbi(thisPtr);
        }

        internal PushNotificationChannel(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.Windows.PushNotifications.IPushNotificationChannelMethods.IID);

        }


        public static bool operator ==(PushNotificationChannel x, PushNotificationChannel y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(PushNotificationChannel x, PushNotificationChannel y) => !(x == y);
        public bool Equals(PushNotificationChannel other) => this == other;
        public override bool Equals(object obj) => obj is PushNotificationChannel that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public void Close() => global::ABI.Microsoft.Windows.PushNotifications.IPushNotificationChannelMethods.Close(_objRef_global__Microsoft_Windows_PushNotifications_IPushNotificationChannel);

        public global::System.DateTimeOffset ExpirationTime => global::ABI.Microsoft.Windows.PushNotifications.IPushNotificationChannelMethods.get_ExpirationTime(_objRef_global__Microsoft_Windows_PushNotifications_IPushNotificationChannel);

        public global::System.Uri Uri => global::ABI.Microsoft.Windows.PushNotifications.IPushNotificationChannelMethods.get_Uri(_objRef_global__Microsoft_Windows_PushNotifications_IPushNotificationChannel);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.PushNotifications")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<PushNotificationChannelStatus>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(PushNotificationsContract), 65536u)]
    public enum PushNotificationChannelStatus : int
    {
        InProgress = unchecked((int)0),
        InProgressRetry = unchecked((int)0x1),
        CompletedSuccess = unchecked((int)0x2),
        CompletedFailure = unchecked((int)0x3),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.PushNotifications")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.PushNotifications.PushNotificationCreateChannelResult))]
    [global::ABI.Microsoft.Windows.PushNotifications.PushNotificationCreateChannelResultRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IPushNotificationCreateChannelResult))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(PushNotificationsContract), 65536u)]
    public sealed class PushNotificationCreateChannelResult : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<PushNotificationCreateChannelResult>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_Windows_PushNotifications_IPushNotificationCreateChannelResult => _inner;


        public static PushNotificationCreateChannelResult FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<PushNotificationCreateChannelResult>.FromAbi(thisPtr);
        }

        internal PushNotificationCreateChannelResult(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.Windows.PushNotifications.IPushNotificationCreateChannelResultMethods.IID);

        }


        public static bool operator ==(PushNotificationCreateChannelResult x, PushNotificationCreateChannelResult y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(PushNotificationCreateChannelResult x, PushNotificationCreateChannelResult y) => !(x == y);
        public bool Equals(PushNotificationCreateChannelResult other) => this == other;
        public override bool Equals(object obj) => obj is PushNotificationCreateChannelResult that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public PushNotificationChannel Channel => global::ABI.Microsoft.Windows.PushNotifications.IPushNotificationCreateChannelResultMethods.get_Channel(_objRef_global__Microsoft_Windows_PushNotifications_IPushNotificationCreateChannelResult);

        public global::System.Exception ExtendedError => global::ABI.Microsoft.Windows.PushNotifications.IPushNotificationCreateChannelResultMethods.get_ExtendedError(_objRef_global__Microsoft_Windows_PushNotifications_IPushNotificationCreateChannelResult);

        public PushNotificationChannelStatus Status => global::ABI.Microsoft.Windows.PushNotifications.IPushNotificationCreateChannelResultMethods.get_Status(_objRef_global__Microsoft_Windows_PushNotifications_IPushNotificationCreateChannelResult);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.PushNotifications", "struct(Microsoft.Windows.PushNotifications.PushNotificationCreateChannelStatus;enum(Microsoft.Windows.PushNotifications.PushNotificationChannelStatus;i4);struct(Windows.Foundation.HResult;i4);u4)")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.PushNotifications.PushNotificationCreateChannelStatus))][global::WinRT.WinRTExposedType(typeof(global::WinRT.StructTypeDetails<PushNotificationCreateChannelStatus, global::ABI.Microsoft.Windows.PushNotifications.PushNotificationCreateChannelStatus>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(PushNotificationsContract), 65536u)]
    public struct PushNotificationCreateChannelStatus: IEquatable<PushNotificationCreateChannelStatus>
    {
        public PushNotificationChannelStatus status;
        public global::System.Exception extendedError;
        public uint retryCount;

        public PushNotificationCreateChannelStatus(PushNotificationChannelStatus _status, global::System.Exception _extendedError, uint _retryCount)
        {
            status = _status; extendedError = _extendedError; retryCount = _retryCount; 
        }

        public static bool operator ==(PushNotificationCreateChannelStatus x, PushNotificationCreateChannelStatus y) => x.status == y.status && x.extendedError == y.extendedError && x.retryCount == y.retryCount;
        public static bool operator !=(PushNotificationCreateChannelStatus x, PushNotificationCreateChannelStatus y) => !(x == y);
        public bool Equals(PushNotificationCreateChannelStatus other) => this == other;
        public override bool Equals(object obj) => obj is PushNotificationCreateChannelStatus that && this == that;
        public override int GetHashCode() => status.GetHashCode() ^ extendedError.GetHashCode() ^ retryCount.GetHashCode();
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.PushNotifications")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.PushNotifications.PushNotificationManager))]
    [global::ABI.Microsoft.Windows.PushNotifications.PushNotificationManagerRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IPushNotificationManager))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(PushNotificationsContract), 65536u)]
    public sealed class PushNotificationManager : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<PushNotificationManager>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_Windows_PushNotifications_IPushNotificationManager => _inner;


        public static I As<I>() => ActivationFactory.Get("Microsoft.Windows.PushNotifications.PushNotificationManager").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_Windows_PushNotifications_IPushNotificationManagerStatics;
        private static IObjectReference _objRef_global__Microsoft_Windows_PushNotifications_IPushNotificationManagerStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_Windows_PushNotifications_IPushNotificationManagerStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_Windows_PushNotifications_IPushNotificationManagerStatics = ActivationFactory.Get("Microsoft.Windows.PushNotifications.PushNotificationManager", global::ABI.Microsoft.Windows.PushNotifications.IPushNotificationManagerStaticsMethods.IID);
                }
            }
        }

        public static bool IsSupported() => global::ABI.Microsoft.Windows.PushNotifications.IPushNotificationManagerStaticsMethods.IsSupported(_objRef_global__Microsoft_Windows_PushNotifications_IPushNotificationManagerStatics);

        public static PushNotificationManager Default => global::ABI.Microsoft.Windows.PushNotifications.IPushNotificationManagerStaticsMethods.get_Default(_objRef_global__Microsoft_Windows_PushNotifications_IPushNotificationManagerStatics);

        public static PushNotificationManager FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<PushNotificationManager>.FromAbi(thisPtr);
        }

        internal PushNotificationManager(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.Windows.PushNotifications.IPushNotificationManagerMethods.IID);

        }


        public static bool operator ==(PushNotificationManager x, PushNotificationManager y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(PushNotificationManager x, PushNotificationManager y) => !(x == y);
        public bool Equals(PushNotificationManager other) => this == other;
        public override bool Equals(object obj) => obj is PushNotificationManager that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public void Register() => global::ABI.Microsoft.Windows.PushNotifications.IPushNotificationManagerMethods.Register(_objRef_global__Microsoft_Windows_PushNotifications_IPushNotificationManager);

        public void Unregister() => global::ABI.Microsoft.Windows.PushNotifications.IPushNotificationManagerMethods.Unregister(_objRef_global__Microsoft_Windows_PushNotifications_IPushNotificationManager);

        public void UnregisterAll() => global::ABI.Microsoft.Windows.PushNotifications.IPushNotificationManagerMethods.UnregisterAll(_objRef_global__Microsoft_Windows_PushNotifications_IPushNotificationManager);

        public global::Windows.Foundation.IAsyncOperationWithProgress<PushNotificationCreateChannelResult, PushNotificationCreateChannelStatus> CreateChannelAsync(Guid remoteId) => global::ABI.Microsoft.Windows.PushNotifications.IPushNotificationManagerMethods.CreateChannelAsync(_objRef_global__Microsoft_Windows_PushNotifications_IPushNotificationManager, remoteId);

        public event global::Windows.Foundation.TypedEventHandler<PushNotificationManager, PushNotificationReceivedEventArgs> PushReceived
        {
            add => global::ABI.Microsoft.Windows.PushNotifications.IPushNotificationManagerMethods.Get_PushReceived2(_objRef_global__Microsoft_Windows_PushNotifications_IPushNotificationManager, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.Windows.PushNotifications.IPushNotificationManagerMethods.Get_PushReceived2(_objRef_global__Microsoft_Windows_PushNotifications_IPushNotificationManager, (IWinRTObject)this).Unsubscribe(value);
        }

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.PushNotifications")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.PushNotifications.PushNotificationReceivedEventArgs))]
    [global::ABI.Microsoft.Windows.PushNotifications.PushNotificationReceivedEventArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IPushNotificationReceivedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(PushNotificationsContract), 65536u)]
    public sealed class PushNotificationReceivedEventArgs : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<PushNotificationReceivedEventArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_Windows_PushNotifications_IPushNotificationReceivedEventArgs => _inner;


        public static PushNotificationReceivedEventArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<PushNotificationReceivedEventArgs>.FromAbi(thisPtr);
        }

        internal PushNotificationReceivedEventArgs(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.Windows.PushNotifications.IPushNotificationReceivedEventArgsMethods.IID);

        }


        public static bool operator ==(PushNotificationReceivedEventArgs x, PushNotificationReceivedEventArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(PushNotificationReceivedEventArgs x, PushNotificationReceivedEventArgs y) => !(x == y);
        public bool Equals(PushNotificationReceivedEventArgs other) => this == other;
        public override bool Equals(object obj) => obj is PushNotificationReceivedEventArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public global::Windows.ApplicationModel.Background.BackgroundTaskDeferral GetDeferral() => global::ABI.Microsoft.Windows.PushNotifications.IPushNotificationReceivedEventArgsMethods.GetDeferral(_objRef_global__Microsoft_Windows_PushNotifications_IPushNotificationReceivedEventArgs);

        public event global::Windows.ApplicationModel.Background.BackgroundTaskCanceledEventHandler Canceled
        {
            add => global::ABI.Microsoft.Windows.PushNotifications.IPushNotificationReceivedEventArgsMethods.Get_Canceled2(_objRef_global__Microsoft_Windows_PushNotifications_IPushNotificationReceivedEventArgs, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.Windows.PushNotifications.IPushNotificationReceivedEventArgsMethods.Get_Canceled2(_objRef_global__Microsoft_Windows_PushNotifications_IPushNotificationReceivedEventArgs, (IWinRTObject)this).Unsubscribe(value);
        }

        public byte[] Payload => global::ABI.Microsoft.Windows.PushNotifications.IPushNotificationReceivedEventArgsMethods.get_Payload(_objRef_global__Microsoft_Windows_PushNotifications_IPushNotificationReceivedEventArgs);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::Windows.Foundation.Metadata.ContractVersion(65536u)]
    public enum PushNotificationsContract
    {
    }
}

#pragma warning disable CA1416
namespace ABI.Microsoft.Windows.PushNotifications
{
    internal static class IPushNotificationChannelMethods
    {


        internal static unsafe void Close(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int>**)ThisPtr)[8](ThisPtr));
            global::System.GC.KeepAlive(_obj);
        }
        internal static unsafe global::System.DateTimeOffset get_ExpirationTime(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::ABI.System.DateTimeOffset __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::ABI.System.DateTimeOffset*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.System.DateTimeOffset.FromAbi(__retval);
            }
            finally
            {
                global::ABI.System.DateTimeOffset.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::System.Uri get_Uri(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.System.Uri.FromAbi(__retval);
            }
            finally
            {
                global::ABI.System.Uri.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xCB, 0xBB, 0x28, 0xDA, 0x95, 0x76, 0x38, 0x5D, 0xAF, 0x82, 0xF3, 0xB, 0x72, 0xFE, 0xF1, 0xF6 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("DA28BBCB-7695-5D38-AF82-F30B72FEF1F6")]
    internal interface IPushNotificationChannel : global::Microsoft.Windows.PushNotifications.IPushNotificationChannel
    {
    }
    internal static class IPushNotificationCreateChannelResultMethods
    {

        internal static unsafe global::Microsoft.Windows.PushNotifications.PushNotificationChannel get_Channel(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.Windows.PushNotifications.PushNotificationChannel.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.Windows.PushNotifications.PushNotificationChannel.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::System.Exception get_ExtendedError(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::ABI.System.Exception __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::ABI.System.Exception*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.System.Exception.FromAbi(__retval);
            }
            finally
            {
                global::ABI.System.Exception.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.Windows.PushNotifications.PushNotificationChannelStatus get_Status(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.Windows.PushNotifications.PushNotificationChannelStatus __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Windows.PushNotifications.PushNotificationChannelStatus*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x7F, 0x71, 0xF3, 0x4D, 0x33, 0x5D, 0xE9, 0x56, 0xB3, 0x81, 0x1B, 0x35, 0xC, 0x95, 0x72, 0x2E };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("4DF3717F-5D33-56E9-B381-1B350C95722E")]
    internal interface IPushNotificationCreateChannelResult : global::Microsoft.Windows.PushNotifications.IPushNotificationCreateChannelResult
    {
    }
    internal static class IPushNotificationManagerMethods
    {


        internal static unsafe void Register(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int>**)ThisPtr)[6](ThisPtr));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe void Unregister(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int>**)ThisPtr)[7](ThisPtr));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe void UnregisterAll(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int>**)ThisPtr)[8](ThisPtr));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Windows.Foundation.IAsyncOperationWithProgress<global::Microsoft.Windows.PushNotifications.PushNotificationCreateChannelResult, global::Microsoft.Windows.PushNotifications.PushNotificationCreateChannelStatus> CreateChannelAsync(IObjectReference _obj, Guid remoteId)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, Guid, IntPtr*, int>**)ThisPtr)[9](ThisPtr, remoteId, &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperationWithProgress_2_Microsoft_Windows_PushNotifications_PushNotificationCreateChannelResult__Microsoft_Windows_PushNotifications_PushNotificationCreateChannelStatus.EnsureInitialized();
                return MarshalInterface<global::Windows.Foundation.IAsyncOperationWithProgress<global::Microsoft.Windows.PushNotifications.PushNotificationCreateChannelResult, global::Microsoft.Windows.PushNotifications.PushNotificationCreateChannelStatus>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::Windows.Foundation.IAsyncOperationWithProgress<global::Microsoft.Windows.PushNotifications.PushNotificationCreateChannelResult, global::Microsoft.Windows.PushNotifications.PushNotificationCreateChannelStatus>>.DisposeAbi(__retval);
            }
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Windows.PushNotifications.PushNotificationManager, global::Microsoft.Windows.PushNotifications.PushNotificationReceivedEventArgs>>> _PushReceived_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Windows.PushNotifications.PushNotificationManager, global::Microsoft.Windows.PushNotifications.PushNotificationReceivedEventArgs>>> MakePushReceivedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _PushReceived_, new(), null);
            return _PushReceived_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Windows.PushNotifications.PushNotificationManager, global::Microsoft.Windows.PushNotifications.PushNotificationReceivedEventArgs>>> _PushReceived => _PushReceived_ ?? MakePushReceivedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.Windows.PushNotifications.PushNotificationManager, global::Microsoft.Windows.PushNotifications.PushNotificationReceivedEventArgs>> Get_PushReceived2(IObjectReference _obj, object _thisObj)
        {
            return _PushReceived.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_Windows_PushNotifications_PushNotificationManager__global__Microsoft_Windows_PushNotifications_PushNotificationReceivedEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[10],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[11],
                0);
            });
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xBA, 0x4A, 0x2F, 0x90, 0x63, 0xFF, 0xFE, 0x5D, 0xA8, 0x8F, 0x15, 0xCC, 0x6B, 0xED, 0x55, 0xFF };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("902F4ABA-FF63-5DFE-A88F-15CC6BED55FF")]
    internal interface IPushNotificationManager : global::Microsoft.Windows.PushNotifications.IPushNotificationManager
    {
    }
    internal static class IPushNotificationManagerStaticsMethods
    {


        internal static unsafe bool IsSupported(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe global::Microsoft.Windows.PushNotifications.PushNotificationManager get_Default(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.Windows.PushNotifications.PushNotificationManager.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.Windows.PushNotifications.PushNotificationManager.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x70, 0x94, 0x32, 0x71, 0x55, 0x1B, 0xDC, 0x58, 0xA0, 0xC, 0x68, 0xC2, 0x6F, 0x2D, 0x8B, 0xD9 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("71329470-1B55-58DC-A00C-68C26F2D8BD9")]
    internal interface IPushNotificationManagerStatics : global::Microsoft.Windows.PushNotifications.IPushNotificationManagerStatics
    {
    }
    internal static class IPushNotificationReceivedEventArgsMethods
    {


        internal static unsafe global::Windows.ApplicationModel.Background.BackgroundTaskDeferral GetDeferral(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Windows.ApplicationModel.Background.BackgroundTaskDeferral.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Windows.ApplicationModel.Background.BackgroundTaskDeferral.DisposeAbi(__retval);
            }
        }
        internal static unsafe byte[] get_Payload(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            int __retval_length = default;
            IntPtr __retval_data = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval_length, &__retval_data));
                global::System.GC.KeepAlive(_obj);
                return MarshalBlittable<byte>.FromAbiArray((__retval_length, __retval_data));
            }
            finally
            {
                MarshalBlittable<byte>.DisposeAbiArray((__retval_length, __retval_data));
            }
        }


        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.ApplicationModel.Background.BackgroundTaskCanceledEventHandler>> _Canceled_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.ApplicationModel.Background.BackgroundTaskCanceledEventHandler>> MakeCanceledTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _Canceled_, new(), null);
            return _Canceled_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.ApplicationModel.Background.BackgroundTaskCanceledEventHandler>> _Canceled => _Canceled_ ?? MakeCanceledTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.ApplicationModel.Background.BackgroundTaskCanceledEventHandler> Get_Canceled2(IObjectReference _obj, object _thisObj)
        {
            return _Canceled.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_ApplicationModel_Background_BackgroundTaskCanceledEventHandler(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[8],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[9],
                0);
            });
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x53, 0xEC, 0xD4, 0xFB, 0x83, 0xBB, 0x95, 0x54, 0x87, 0x77, 0xD3, 0xCF, 0x13, 0xE4, 0x29, 0x9C };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("FBD4EC53-BB83-5495-8777-D3CF13E4299C")]
    internal interface IPushNotificationReceivedEventArgs : global::Microsoft.Windows.PushNotifications.IPushNotificationReceivedEventArgs
    {
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct PushNotificationChannel
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.Windows.PushNotifications.PushNotificationChannel obj) => obj is null ? null : MarshalInspectable<global::Microsoft.Windows.PushNotifications.PushNotificationChannel>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.Windows.PushNotifications.IPushNotificationChannelMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.Windows.PushNotifications.PushNotificationChannel obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.Windows.PushNotifications.IPushNotificationChannelMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.Windows.PushNotifications.PushNotificationChannel FromAbi(IntPtr thisPtr) => global::Microsoft.Windows.PushNotifications.PushNotificationChannel.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.Windows.PushNotifications.PushNotificationChannel obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.Windows.PushNotifications.PushNotificationChannel>.MarshalerArray CreateMarshalerArray(global::Microsoft.Windows.PushNotifications.PushNotificationChannel[] array) => MarshalInterfaceHelper<global::Microsoft.Windows.PushNotifications.PushNotificationChannel>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Windows.PushNotifications.PushNotificationChannel>.GetAbiArray(box);
        public static unsafe global::Microsoft.Windows.PushNotifications.PushNotificationChannel[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Windows.PushNotifications.PushNotificationChannel>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.Windows.PushNotifications.PushNotificationChannel[] array, object box) => MarshalInterfaceHelper<global::Microsoft.Windows.PushNotifications.PushNotificationChannel>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.Windows.PushNotifications.PushNotificationChannel[] array) => MarshalInterfaceHelper<global::Microsoft.Windows.PushNotifications.PushNotificationChannel>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.Windows.PushNotifications.PushNotificationChannel>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.Windows.PushNotifications.PushNotificationChannel>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class PushNotificationChannelRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.Windows.PushNotifications.PushNotificationChannel(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct PushNotificationCreateChannelResult
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.Windows.PushNotifications.PushNotificationCreateChannelResult obj) => obj is null ? null : MarshalInspectable<global::Microsoft.Windows.PushNotifications.PushNotificationCreateChannelResult>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.Windows.PushNotifications.IPushNotificationCreateChannelResultMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.Windows.PushNotifications.PushNotificationCreateChannelResult obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.Windows.PushNotifications.IPushNotificationCreateChannelResultMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.Windows.PushNotifications.PushNotificationCreateChannelResult FromAbi(IntPtr thisPtr) => global::Microsoft.Windows.PushNotifications.PushNotificationCreateChannelResult.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.Windows.PushNotifications.PushNotificationCreateChannelResult obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.Windows.PushNotifications.PushNotificationCreateChannelResult>.MarshalerArray CreateMarshalerArray(global::Microsoft.Windows.PushNotifications.PushNotificationCreateChannelResult[] array) => MarshalInterfaceHelper<global::Microsoft.Windows.PushNotifications.PushNotificationCreateChannelResult>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Windows.PushNotifications.PushNotificationCreateChannelResult>.GetAbiArray(box);
        public static unsafe global::Microsoft.Windows.PushNotifications.PushNotificationCreateChannelResult[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Windows.PushNotifications.PushNotificationCreateChannelResult>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.Windows.PushNotifications.PushNotificationCreateChannelResult[] array, object box) => MarshalInterfaceHelper<global::Microsoft.Windows.PushNotifications.PushNotificationCreateChannelResult>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.Windows.PushNotifications.PushNotificationCreateChannelResult[] array) => MarshalInterfaceHelper<global::Microsoft.Windows.PushNotifications.PushNotificationCreateChannelResult>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.Windows.PushNotifications.PushNotificationCreateChannelResult>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.Windows.PushNotifications.PushNotificationCreateChannelResult>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class PushNotificationCreateChannelResultRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.Windows.PushNotifications.PushNotificationCreateChannelResult(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct PushNotificationCreateChannelStatus
    {
        public global::Microsoft.Windows.PushNotifications.PushNotificationChannelStatus status;
        public global::ABI.System.Exception extendedError;
        public uint retryCount;

        public struct Marshaler
        {
            public global::ABI.System.Exception.Marshaler _extendedError;
            public PushNotificationCreateChannelStatus __abi;
        }

        public static Marshaler CreateMarshaler(global::Microsoft.Windows.PushNotifications.PushNotificationCreateChannelStatus arg)
        {
            var m = new Marshaler();
            m._extendedError = global::ABI.System.Exception.CreateMarshaler(arg.extendedError);
            m.__abi = new PushNotificationCreateChannelStatus()
            {
                status = arg.status
                , extendedError = global::ABI.System.Exception.GetAbi(m._extendedError)
                , retryCount = arg.retryCount
            };

            return m;}

        public static PushNotificationCreateChannelStatus GetAbi(Marshaler m) => m.__abi;

        public static global::Microsoft.Windows.PushNotifications.PushNotificationCreateChannelStatus FromAbi(PushNotificationCreateChannelStatus arg)
        {
            return new global::Microsoft.Windows.PushNotifications.PushNotificationCreateChannelStatus()
            {
                status = arg.status
                , extendedError = global::ABI.System.Exception.FromAbi(arg.extendedError)
                , retryCount = arg.retryCount
            };
        }

        public static PushNotificationCreateChannelStatus FromManaged(global::Microsoft.Windows.PushNotifications.PushNotificationCreateChannelStatus arg)
        {
            return new PushNotificationCreateChannelStatus()
            {
                status = arg.status
                , extendedError = global::ABI.System.Exception.FromManaged(arg.extendedError)
                , retryCount = arg.retryCount
            };
        }

        public static unsafe void CopyAbi(Marshaler arg, IntPtr dest) => 
            *(PushNotificationCreateChannelStatus*)dest.ToPointer() = GetAbi(arg);

        public static unsafe void CopyManaged(global::Microsoft.Windows.PushNotifications.PushNotificationCreateChannelStatus arg, IntPtr dest) =>
            *(PushNotificationCreateChannelStatus*)dest.ToPointer() = FromManaged(arg);

        public static void DisposeMarshaler(Marshaler m) {}

        public static void DisposeAbi(PushNotificationCreateChannelStatus abi)
        {
        }
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct PushNotificationManager
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.Windows.PushNotifications.PushNotificationManager obj) => obj is null ? null : MarshalInspectable<global::Microsoft.Windows.PushNotifications.PushNotificationManager>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.Windows.PushNotifications.IPushNotificationManagerMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.Windows.PushNotifications.PushNotificationManager obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.Windows.PushNotifications.IPushNotificationManagerMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.Windows.PushNotifications.PushNotificationManager FromAbi(IntPtr thisPtr) => global::Microsoft.Windows.PushNotifications.PushNotificationManager.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.Windows.PushNotifications.PushNotificationManager obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.Windows.PushNotifications.PushNotificationManager>.MarshalerArray CreateMarshalerArray(global::Microsoft.Windows.PushNotifications.PushNotificationManager[] array) => MarshalInterfaceHelper<global::Microsoft.Windows.PushNotifications.PushNotificationManager>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Windows.PushNotifications.PushNotificationManager>.GetAbiArray(box);
        public static unsafe global::Microsoft.Windows.PushNotifications.PushNotificationManager[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Windows.PushNotifications.PushNotificationManager>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.Windows.PushNotifications.PushNotificationManager[] array, object box) => MarshalInterfaceHelper<global::Microsoft.Windows.PushNotifications.PushNotificationManager>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.Windows.PushNotifications.PushNotificationManager[] array) => MarshalInterfaceHelper<global::Microsoft.Windows.PushNotifications.PushNotificationManager>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.Windows.PushNotifications.PushNotificationManager>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.Windows.PushNotifications.PushNotificationManager>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class PushNotificationManagerRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.Windows.PushNotifications.PushNotificationManager(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct PushNotificationReceivedEventArgs
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.Windows.PushNotifications.PushNotificationReceivedEventArgs obj) => obj is null ? null : MarshalInspectable<global::Microsoft.Windows.PushNotifications.PushNotificationReceivedEventArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.Windows.PushNotifications.IPushNotificationReceivedEventArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.Windows.PushNotifications.PushNotificationReceivedEventArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.Windows.PushNotifications.IPushNotificationReceivedEventArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.Windows.PushNotifications.PushNotificationReceivedEventArgs FromAbi(IntPtr thisPtr) => global::Microsoft.Windows.PushNotifications.PushNotificationReceivedEventArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.Windows.PushNotifications.PushNotificationReceivedEventArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.Windows.PushNotifications.PushNotificationReceivedEventArgs>.MarshalerArray CreateMarshalerArray(global::Microsoft.Windows.PushNotifications.PushNotificationReceivedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.Windows.PushNotifications.PushNotificationReceivedEventArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Windows.PushNotifications.PushNotificationReceivedEventArgs>.GetAbiArray(box);
        public static unsafe global::Microsoft.Windows.PushNotifications.PushNotificationReceivedEventArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Windows.PushNotifications.PushNotificationReceivedEventArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.Windows.PushNotifications.PushNotificationReceivedEventArgs[] array, object box) => MarshalInterfaceHelper<global::Microsoft.Windows.PushNotifications.PushNotificationReceivedEventArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.Windows.PushNotifications.PushNotificationReceivedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.Windows.PushNotifications.PushNotificationReceivedEventArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.Windows.PushNotifications.PushNotificationReceivedEventArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.Windows.PushNotifications.PushNotificationReceivedEventArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class PushNotificationReceivedEventArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.Windows.PushNotifications.PushNotificationReceivedEventArgs(inspectable.ObjRef);
    }
}
#pragma warning restore CA1416
