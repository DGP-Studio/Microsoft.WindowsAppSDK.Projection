//------------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by cswinrt.exe version 2.2.0.241111.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq.Expressions;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using WinRT;
using WinRT.Interop;


#pragma warning disable 0169 // warning CS0169: The field '...' is never used
#pragma warning disable 0649 // warning CS0169: Field '...' is never assigned to
#pragma warning disable CA2207, CA1063, CA1033, CA1001, CA2213

namespace Microsoft.Windows.AppLifecycle
{
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.AppLifecycle")][global::Windows.Foundation.Metadata.ContractVersion(typeof(AppLifecycleContract), 65536u)]
    public static class ActivationRegistrationManager
    {

        public static I As<I>() => ActivationFactory.Get("Microsoft.Windows.AppLifecycle.ActivationRegistrationManager").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_Windows_AppLifecycle_IActivationRegistrationManagerStatics;
        private static IObjectReference _objRef_global__Microsoft_Windows_AppLifecycle_IActivationRegistrationManagerStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_Windows_AppLifecycle_IActivationRegistrationManagerStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_Windows_AppLifecycle_IActivationRegistrationManagerStatics = ActivationFactory.Get("Microsoft.Windows.AppLifecycle.ActivationRegistrationManager", global::ABI.Microsoft.Windows.AppLifecycle.IActivationRegistrationManagerStaticsMethods.IID);
                }
            }
        }

        public static void RegisterForFileTypeActivation(string[] supportedFileTypes, string logo, string displayName, string[] supportedVerbs, string exePath) => global::ABI.Microsoft.Windows.AppLifecycle.IActivationRegistrationManagerStaticsMethods.RegisterForFileTypeActivation(_objRef_global__Microsoft_Windows_AppLifecycle_IActivationRegistrationManagerStatics, supportedFileTypes, logo, displayName, supportedVerbs, exePath);

        public static void RegisterForProtocolActivation(string scheme, string logo, string displayName, string exePath) => global::ABI.Microsoft.Windows.AppLifecycle.IActivationRegistrationManagerStaticsMethods.RegisterForProtocolActivation(_objRef_global__Microsoft_Windows_AppLifecycle_IActivationRegistrationManagerStatics, scheme, logo, displayName, exePath);

        public static void RegisterForStartupActivation(string taskId, string exePath) => global::ABI.Microsoft.Windows.AppLifecycle.IActivationRegistrationManagerStaticsMethods.RegisterForStartupActivation(_objRef_global__Microsoft_Windows_AppLifecycle_IActivationRegistrationManagerStatics, taskId, exePath);

        public static void UnregisterForFileTypeActivation(string[] fileTypes, string exePath) => global::ABI.Microsoft.Windows.AppLifecycle.IActivationRegistrationManagerStaticsMethods.UnregisterForFileTypeActivation(_objRef_global__Microsoft_Windows_AppLifecycle_IActivationRegistrationManagerStatics, fileTypes, exePath);

        public static void UnregisterForProtocolActivation(string scheme, string exePath) => global::ABI.Microsoft.Windows.AppLifecycle.IActivationRegistrationManagerStaticsMethods.UnregisterForProtocolActivation(_objRef_global__Microsoft_Windows_AppLifecycle_IActivationRegistrationManagerStatics, scheme, exePath);

        public static void UnregisterForStartupActivation(string taskId) => global::ABI.Microsoft.Windows.AppLifecycle.IActivationRegistrationManagerStaticsMethods.UnregisterForStartupActivation(_objRef_global__Microsoft_Windows_AppLifecycle_IActivationRegistrationManagerStatics, taskId);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.AppLifecycle")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.AppLifecycle.AppActivationArguments))]
    [global::ABI.Microsoft.Windows.AppLifecycle.AppActivationArgumentsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IAppActivationArguments))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(AppLifecycleContract), 65536u)]
    public sealed class AppActivationArguments : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<AppActivationArguments>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_Windows_AppLifecycle_IAppActivationArguments => _inner;


        public static AppActivationArguments FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<AppActivationArguments>.FromAbi(thisPtr);
        }

        internal AppActivationArguments(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.Windows.AppLifecycle.IAppActivationArgumentsMethods.IID);

        }


        public static bool operator ==(AppActivationArguments x, AppActivationArguments y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(AppActivationArguments x, AppActivationArguments y) => !(x == y);
        public bool Equals(AppActivationArguments other) => this == other;
        public override bool Equals(object obj) => obj is AppActivationArguments that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public object Data => global::ABI.Microsoft.Windows.AppLifecycle.IAppActivationArgumentsMethods.get_Data(_objRef_global__Microsoft_Windows_AppLifecycle_IAppActivationArguments);

        public ExtendedActivationKind Kind => global::ABI.Microsoft.Windows.AppLifecycle.IAppActivationArgumentsMethods.get_Kind(_objRef_global__Microsoft_Windows_AppLifecycle_IAppActivationArguments);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.AppLifecycle")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.AppLifecycle.AppInstance))]
    [global::ABI.Microsoft.Windows.AppLifecycle.AppInstanceRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IAppInstance))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(AppLifecycleContract), 65536u)]
    public sealed class AppInstance : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<AppInstance>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_Windows_AppLifecycle_IAppInstance => _inner;


        public static I As<I>() => ActivationFactory.Get("Microsoft.Windows.AppLifecycle.AppInstance").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_Windows_AppLifecycle_IAppInstanceStatics;
        private static IObjectReference _objRef_global__Microsoft_Windows_AppLifecycle_IAppInstanceStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_Windows_AppLifecycle_IAppInstanceStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_Windows_AppLifecycle_IAppInstanceStatics = ActivationFactory.Get("Microsoft.Windows.AppLifecycle.AppInstance", global::ABI.Microsoft.Windows.AppLifecycle.IAppInstanceStaticsMethods.IID);
                }
            }
        }

        public static AppInstance GetCurrent() => global::ABI.Microsoft.Windows.AppLifecycle.IAppInstanceStaticsMethods.GetCurrent(_objRef_global__Microsoft_Windows_AppLifecycle_IAppInstanceStatics);

        public static global::System.Collections.Generic.IList<AppInstance> GetInstances() => global::ABI.Microsoft.Windows.AppLifecycle.IAppInstanceStaticsMethods.GetInstances(_objRef_global__Microsoft_Windows_AppLifecycle_IAppInstanceStatics);

        public static AppInstance FindOrRegisterForKey(string key) => global::ABI.Microsoft.Windows.AppLifecycle.IAppInstanceStaticsMethods.FindOrRegisterForKey(_objRef_global__Microsoft_Windows_AppLifecycle_IAppInstanceStatics, key);

        private static volatile IObjectReference ___objRef_global__Microsoft_Windows_AppLifecycle_IAppInstanceStatics2;
        private static IObjectReference _objRef_global__Microsoft_Windows_AppLifecycle_IAppInstanceStatics2
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_Windows_AppLifecycle_IAppInstanceStatics2;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_Windows_AppLifecycle_IAppInstanceStatics2 = ActivationFactory.Get("Microsoft.Windows.AppLifecycle.AppInstance", global::ABI.Microsoft.Windows.AppLifecycle.IAppInstanceStatics2Methods.IID);
                }
            }
        }

        public static global::Windows.ApplicationModel.Core.AppRestartFailureReason Restart(string arguments) => global::ABI.Microsoft.Windows.AppLifecycle.IAppInstanceStatics2Methods.Restart(_objRef_global__Microsoft_Windows_AppLifecycle_IAppInstanceStatics2, arguments);

        public static AppInstance FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<AppInstance>.FromAbi(thisPtr);
        }

        internal AppInstance(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.Windows.AppLifecycle.IAppInstanceMethods.IID);

        }


        public static bool operator ==(AppInstance x, AppInstance y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(AppInstance x, AppInstance y) => !(x == y);
        public bool Equals(AppInstance other) => this == other;
        public override bool Equals(object obj) => obj is AppInstance that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public void UnregisterKey() => global::ABI.Microsoft.Windows.AppLifecycle.IAppInstanceMethods.UnregisterKey(_objRef_global__Microsoft_Windows_AppLifecycle_IAppInstance);

        public global::Windows.Foundation.IAsyncAction RedirectActivationToAsync(AppActivationArguments args) => global::ABI.Microsoft.Windows.AppLifecycle.IAppInstanceMethods.RedirectActivationToAsync(_objRef_global__Microsoft_Windows_AppLifecycle_IAppInstance, args);

        public AppActivationArguments GetActivatedEventArgs() => global::ABI.Microsoft.Windows.AppLifecycle.IAppInstanceMethods.GetActivatedEventArgs(_objRef_global__Microsoft_Windows_AppLifecycle_IAppInstance);

        public event global::System.EventHandler<AppActivationArguments> Activated
        {
            add => global::ABI.Microsoft.Windows.AppLifecycle.IAppInstanceMethods.Get_Activated2(_objRef_global__Microsoft_Windows_AppLifecycle_IAppInstance, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.Windows.AppLifecycle.IAppInstanceMethods.Get_Activated2(_objRef_global__Microsoft_Windows_AppLifecycle_IAppInstance, (IWinRTObject)this).Unsubscribe(value);
        }

        public bool IsCurrent => global::ABI.Microsoft.Windows.AppLifecycle.IAppInstanceMethods.get_IsCurrent(_objRef_global__Microsoft_Windows_AppLifecycle_IAppInstance);

        public string Key => global::ABI.Microsoft.Windows.AppLifecycle.IAppInstanceMethods.get_Key(_objRef_global__Microsoft_Windows_AppLifecycle_IAppInstance);

        public uint ProcessId => global::ABI.Microsoft.Windows.AppLifecycle.IAppInstanceMethods.get_ProcessId(_objRef_global__Microsoft_Windows_AppLifecycle_IAppInstance);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::Windows.Foundation.Metadata.ContractVersion(131072u)]
    public enum AppLifecycleContract
    {
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.AppLifecycle")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<ExtendedActivationKind>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(AppLifecycleContract), 65536u)]
    public enum ExtendedActivationKind : int
    {
        Launch = unchecked((int)0),
        Search = unchecked((int)0x1),
        ShareTarget = unchecked((int)0x2),
        File = unchecked((int)0x3),
        Protocol = unchecked((int)0x4),
        FileOpenPicker = unchecked((int)0x5),
        FileSavePicker = unchecked((int)0x6),
        CachedFileUpdater = unchecked((int)0x7),
        ContactPicker = unchecked((int)0x8),
        Device = unchecked((int)0x9),
        PrintTaskSettings = unchecked((int)0xa),
        CameraSettings = unchecked((int)0xb),
        RestrictedLaunch = unchecked((int)0xc),
        AppointmentsProvider = unchecked((int)0xd),
        Contact = unchecked((int)0xe),
        LockScreenCall = unchecked((int)0xf),
        VoiceCommand = unchecked((int)0x10),
        LockScreen = unchecked((int)0x11),
        PickerReturned = unchecked((int)0x3e8),
        WalletAction = unchecked((int)0x3e9),
        PickFileContinuation = unchecked((int)0x3ea),
        PickSaveFileContinuation = unchecked((int)0x3eb),
        PickFolderContinuation = unchecked((int)0x3ec),
        WebAuthenticationBrokerContinuation = unchecked((int)0x3ed),
        WebAccountProvider = unchecked((int)0x3ee),
        ComponentUI = unchecked((int)0x3ef),
        ProtocolForResults = unchecked((int)0x3f1),
        ToastNotification = unchecked((int)0x3f2),
        Print3DWorkflow = unchecked((int)0x3f3),
        DialReceiver = unchecked((int)0x3f4),
        DevicePairing = unchecked((int)0x3f5),
        UserDataAccountsProvider = unchecked((int)0x3f6),
        FilePickerExperience = unchecked((int)0x3f7),
        LockScreenComponent = unchecked((int)0x3f8),
        ContactPanel = unchecked((int)0x3f9),
        PrintWorkflowForegroundTask = unchecked((int)0x3fa),
        GameUIProvider = unchecked((int)0x3fb),
        StartupTask = unchecked((int)0x3fc),
        CommandLineLaunch = unchecked((int)0x3fd),
        BarcodeScannerProvider = unchecked((int)0x3fe),
        PrintSupportJobUI = unchecked((int)0x3ff),
        PrintSupportSettingsUI = unchecked((int)0x400),
        PhoneCallActivation = unchecked((int)0x401),
        VpnForeground = unchecked((int)0x402),
        Push = unchecked((int)0x1388),
        AppNotification = unchecked((int)0x1389),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.AppLifecycle")][Guid("5AC4E92E-017B-5D68-8198-F68636AB99D3")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.AppLifecycle.IActivationRegistrationManagerStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(AppLifecycleContract), 65536u)]
    internal interface IActivationRegistrationManagerStatics
    {
        void RegisterForFileTypeActivation(string[] supportedFileTypes, string logo, string displayName, string[] supportedVerbs, string exePath);
        void RegisterForProtocolActivation(string scheme, string logo, string displayName, string exePath);
        void RegisterForStartupActivation(string taskId, string exePath);
        void UnregisterForFileTypeActivation(string[] fileTypes, string exePath);
        void UnregisterForProtocolActivation(string scheme, string exePath);
        void UnregisterForStartupActivation(string taskId);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.AppLifecycle")][Guid("14F99EAF-1580-5062-BDC8-D5D1C31138FB")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.AppLifecycle.IAppActivationArguments))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(AppLifecycleContract), 65536u)]
    internal interface IAppActivationArguments
    {
        object Data { get; }
        ExtendedActivationKind Kind { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.AppLifecycle")][Guid("75766AE4-0239-5A26-B9DA-D5BFC75A4866")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.AppLifecycle.IAppInstance))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(AppLifecycleContract), 65536u)]
    internal interface IAppInstance
    {
        void UnregisterKey();
        global::Windows.Foundation.IAsyncAction RedirectActivationToAsync(AppActivationArguments args);
        AppActivationArguments GetActivatedEventArgs();
        bool IsCurrent { get; }
        string Key { get; }
        uint ProcessId { get; }
        event global::System.EventHandler<AppActivationArguments> Activated;
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.AppLifecycle")][Guid("4F414B25-8330-5A9B-BBC1-8229D479649D")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.AppLifecycle.IAppInstanceStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(AppLifecycleContract), 65536u)]
    internal interface IAppInstanceStatics
    {
        AppInstance GetCurrent();
        global::System.Collections.Generic.IList<AppInstance> GetInstances();
        AppInstance FindOrRegisterForKey(string key);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.AppLifecycle")][Guid("FE9F1885-7160-5397-BA9B-5890B24FDC04")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.AppLifecycle.IAppInstanceStatics2))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(AppLifecycleContract), 131072u)]
    internal interface IAppInstanceStatics2
    {
        global::Windows.ApplicationModel.Core.AppRestartFailureReason Restart(string arguments);
    }
}

#pragma warning disable CA1416
namespace ABI.Microsoft.Windows.AppLifecycle
{
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct AppActivationArguments
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.Windows.AppLifecycle.AppActivationArguments obj) => obj is null ? null : MarshalInspectable<global::Microsoft.Windows.AppLifecycle.AppActivationArguments>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.Windows.AppLifecycle.IAppActivationArgumentsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.Windows.AppLifecycle.AppActivationArguments obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.Windows.AppLifecycle.IAppActivationArgumentsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.Windows.AppLifecycle.AppActivationArguments FromAbi(IntPtr thisPtr) => global::Microsoft.Windows.AppLifecycle.AppActivationArguments.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.Windows.AppLifecycle.AppActivationArguments obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.Windows.AppLifecycle.AppActivationArguments>.MarshalerArray CreateMarshalerArray(global::Microsoft.Windows.AppLifecycle.AppActivationArguments[] array) => MarshalInterfaceHelper<global::Microsoft.Windows.AppLifecycle.AppActivationArguments>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Windows.AppLifecycle.AppActivationArguments>.GetAbiArray(box);
        public static unsafe global::Microsoft.Windows.AppLifecycle.AppActivationArguments[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Windows.AppLifecycle.AppActivationArguments>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.Windows.AppLifecycle.AppActivationArguments[] array, object box) => MarshalInterfaceHelper<global::Microsoft.Windows.AppLifecycle.AppActivationArguments>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.Windows.AppLifecycle.AppActivationArguments[] array) => MarshalInterfaceHelper<global::Microsoft.Windows.AppLifecycle.AppActivationArguments>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.Windows.AppLifecycle.AppActivationArguments>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.Windows.AppLifecycle.AppActivationArguments>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class AppActivationArgumentsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.Windows.AppLifecycle.AppActivationArguments(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct AppInstance
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.Windows.AppLifecycle.AppInstance obj) => obj is null ? null : MarshalInspectable<global::Microsoft.Windows.AppLifecycle.AppInstance>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.Windows.AppLifecycle.IAppInstanceMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.Windows.AppLifecycle.AppInstance obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.Windows.AppLifecycle.IAppInstanceMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.Windows.AppLifecycle.AppInstance FromAbi(IntPtr thisPtr) => global::Microsoft.Windows.AppLifecycle.AppInstance.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.Windows.AppLifecycle.AppInstance obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.Windows.AppLifecycle.AppInstance>.MarshalerArray CreateMarshalerArray(global::Microsoft.Windows.AppLifecycle.AppInstance[] array) => MarshalInterfaceHelper<global::Microsoft.Windows.AppLifecycle.AppInstance>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Windows.AppLifecycle.AppInstance>.GetAbiArray(box);
        public static unsafe global::Microsoft.Windows.AppLifecycle.AppInstance[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Windows.AppLifecycle.AppInstance>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.Windows.AppLifecycle.AppInstance[] array, object box) => MarshalInterfaceHelper<global::Microsoft.Windows.AppLifecycle.AppInstance>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.Windows.AppLifecycle.AppInstance[] array) => MarshalInterfaceHelper<global::Microsoft.Windows.AppLifecycle.AppInstance>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.Windows.AppLifecycle.AppInstance>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.Windows.AppLifecycle.AppInstance>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class AppInstanceRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.Windows.AppLifecycle.AppInstance(inspectable.ObjRef);
    }
    internal static class IActivationRegistrationManagerStaticsMethods
    {


        internal static unsafe void RegisterForFileTypeActivation(IObjectReference _obj, string[] supportedFileTypes, string logo, string displayName, string[] supportedVerbs, string exePath)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalString.MarshalerArray __supportedFileTypes = default;
            int __supportedFileTypes_length = default;
            IntPtr __supportedFileTypes_data = default;
            MarshalString.MarshalerArray __supportedVerbs = default;
            int __supportedVerbs_length = default;
            IntPtr __supportedVerbs_data = default;
            try
            {
                __supportedFileTypes = MarshalString.CreateMarshalerArray(supportedFileTypes);
                (__supportedFileTypes_length, __supportedFileTypes_data) = MarshalString.GetAbiArray(__supportedFileTypes);
                __supportedVerbs = MarshalString.CreateMarshalerArray(supportedVerbs);
                (__supportedVerbs_length, __supportedVerbs_data) = MarshalString.GetAbiArray(__supportedVerbs);
                MarshalString.Pinnable __logo = new(logo);
                MarshalString.Pinnable __displayName = new(displayName);
                MarshalString.Pinnable __exePath = new(exePath);
                fixed(void* ___logo = __logo, ___displayName = __displayName, ___exePath = __exePath)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int, IntPtr, IntPtr, IntPtr, int, IntPtr, IntPtr, int>**)ThisPtr)[6](ThisPtr, __supportedFileTypes_length, __supportedFileTypes_data, MarshalString.GetAbi(ref __logo), MarshalString.GetAbi(ref __displayName), __supportedVerbs_length, __supportedVerbs_data, MarshalString.GetAbi(ref __exePath)));
                    global::System.GC.KeepAlive(_obj);
                }
            }
            finally
            {
                MarshalString.DisposeMarshalerArray(__supportedFileTypes);
                MarshalString.DisposeMarshalerArray(__supportedVerbs);
            }
        }

        internal static unsafe void RegisterForProtocolActivation(IObjectReference _obj, string scheme, string logo, string displayName, string exePath)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalString.Pinnable __scheme = new(scheme);
            MarshalString.Pinnable __logo = new(logo);
            MarshalString.Pinnable __displayName = new(displayName);
            MarshalString.Pinnable __exePath = new(exePath);
            fixed(void* ___scheme = __scheme, ___logo = __logo, ___displayName = __displayName, ___exePath = __exePath)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, IntPtr, IntPtr, int>**)ThisPtr)[7](ThisPtr, MarshalString.GetAbi(ref __scheme), MarshalString.GetAbi(ref __logo), MarshalString.GetAbi(ref __displayName), MarshalString.GetAbi(ref __exePath)));
                global::System.GC.KeepAlive(_obj);
            }
        }

        internal static unsafe void RegisterForStartupActivation(IObjectReference _obj, string taskId, string exePath)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalString.Pinnable __taskId = new(taskId);
            MarshalString.Pinnable __exePath = new(exePath);
            fixed(void* ___taskId = __taskId, ___exePath = __exePath)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, int>**)ThisPtr)[8](ThisPtr, MarshalString.GetAbi(ref __taskId), MarshalString.GetAbi(ref __exePath)));
                global::System.GC.KeepAlive(_obj);
            }
        }

        internal static unsafe void UnregisterForFileTypeActivation(IObjectReference _obj, string[] fileTypes, string exePath)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalString.MarshalerArray __fileTypes = default;
            int __fileTypes_length = default;
            IntPtr __fileTypes_data = default;
            try
            {
                __fileTypes = MarshalString.CreateMarshalerArray(fileTypes);
                (__fileTypes_length, __fileTypes_data) = MarshalString.GetAbiArray(__fileTypes);
                MarshalString.Pinnable __exePath = new(exePath);
                fixed(void* ___exePath = __exePath)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int, IntPtr, IntPtr, int>**)ThisPtr)[9](ThisPtr, __fileTypes_length, __fileTypes_data, MarshalString.GetAbi(ref __exePath)));
                    global::System.GC.KeepAlive(_obj);
                }
            }
            finally
            {
                MarshalString.DisposeMarshalerArray(__fileTypes);
            }
        }

        internal static unsafe void UnregisterForProtocolActivation(IObjectReference _obj, string scheme, string exePath)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalString.Pinnable __scheme = new(scheme);
            MarshalString.Pinnable __exePath = new(exePath);
            fixed(void* ___scheme = __scheme, ___exePath = __exePath)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, int>**)ThisPtr)[10](ThisPtr, MarshalString.GetAbi(ref __scheme), MarshalString.GetAbi(ref __exePath)));
                global::System.GC.KeepAlive(_obj);
            }
        }

        internal static unsafe void UnregisterForStartupActivation(IObjectReference _obj, string taskId)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalString.Pinnable __taskId = new(taskId);
            fixed(void* ___taskId = __taskId)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[11](ThisPtr, MarshalString.GetAbi(ref __taskId)));
                global::System.GC.KeepAlive(_obj);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x2E, 0xE9, 0xC4, 0x5A, 0x7B, 0x1, 0x68, 0x5D, 0x81, 0x98, 0xF6, 0x86, 0x36, 0xAB, 0x99, 0xD3 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("5AC4E92E-017B-5D68-8198-F68636AB99D3")]
    internal interface IActivationRegistrationManagerStatics : global::Microsoft.Windows.AppLifecycle.IActivationRegistrationManagerStatics
    {
    }
    internal static class IAppActivationArgumentsMethods
    {

        internal static unsafe object get_Data(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInspectable<object>.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.Windows.AppLifecycle.ExtendedActivationKind get_Kind(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.Windows.AppLifecycle.ExtendedActivationKind __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Windows.AppLifecycle.ExtendedActivationKind*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xAF, 0x9E, 0xF9, 0x14, 0x80, 0x15, 0x62, 0x50, 0xBD, 0xC8, 0xD5, 0xD1, 0xC3, 0x11, 0x38, 0xFB };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("14F99EAF-1580-5062-BDC8-D5D1C31138FB")]
    internal interface IAppActivationArguments : global::Microsoft.Windows.AppLifecycle.IAppActivationArguments
    {
    }
    internal static class IAppInstanceMethods
    {


        internal static unsafe void UnregisterKey(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int>**)ThisPtr)[6](ThisPtr));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Windows.Foundation.IAsyncAction RedirectActivationToAsync(IObjectReference _obj, global::Microsoft.Windows.AppLifecycle.AppActivationArguments args)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __args = default;
            IntPtr __retval = default;
            try
            {
                __args = global::ABI.Microsoft.Windows.AppLifecycle.AppActivationArguments.CreateMarshaler2(args);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, MarshalInspectable<object>.GetAbi(__args), &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInterface<global::Windows.Foundation.IAsyncAction>.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__args);
                MarshalInterface<global::Windows.Foundation.IAsyncAction>.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.Windows.AppLifecycle.AppActivationArguments GetActivatedEventArgs(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.Windows.AppLifecycle.AppActivationArguments.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.Windows.AppLifecycle.AppActivationArguments.DisposeAbi(__retval);
            }
        }
        internal static unsafe bool get_IsCurrent(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[12](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        internal static unsafe string get_Key(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[11](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }

        internal static unsafe uint get_ProcessId(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            uint __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, uint*, int>**)ThisPtr)[13](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }


        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::System.EventHandler<global::Microsoft.Windows.AppLifecycle.AppActivationArguments>>> _Activated_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::System.EventHandler<global::Microsoft.Windows.AppLifecycle.AppActivationArguments>>> MakeActivatedTable()
        {
            _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_EventHandler_1_Microsoft_Windows_AppLifecycle_AppActivationArguments.EnsureInitialized();
            global::System.Threading.Interlocked.CompareExchange(ref _Activated_, new(), null);
            return _Activated_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::System.EventHandler<global::Microsoft.Windows.AppLifecycle.AppActivationArguments>>> _Activated => _Activated_ ?? MakeActivatedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::System.EventHandler<global::Microsoft.Windows.AppLifecycle.AppActivationArguments>> Get_Activated2(IObjectReference _obj, object _thisObj)
        {
            return _Activated.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return  new global::ABI.WinRT.Interop.EventHandlerEventSource<global::Microsoft.Windows.AppLifecycle.AppActivationArguments>(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[9],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[10],
                0);
            });
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xE4, 0x6A, 0x76, 0x75, 0x39, 0x2, 0x26, 0x5A, 0xB9, 0xDA, 0xD5, 0xBF, 0xC7, 0x5A, 0x48, 0x66 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("75766AE4-0239-5A26-B9DA-D5BFC75A4866")]
    internal interface IAppInstance : global::Microsoft.Windows.AppLifecycle.IAppInstance
    {
    }
    internal static class IAppInstanceStaticsMethods
    {


        internal static unsafe global::Microsoft.Windows.AppLifecycle.AppInstance GetCurrent(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.Windows.AppLifecycle.AppInstance.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.Windows.AppLifecycle.AppInstance.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::System.Collections.Generic.IList<global::Microsoft.Windows.AppLifecycle.AppInstance> GetInstances(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IVector_1_Microsoft_Windows_AppLifecycle_AppInstance.EnsureInitialized();
                return MarshalInterface<global::System.Collections.Generic.IList<global::Microsoft.Windows.AppLifecycle.AppInstance>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Collections.Generic.IList<global::Microsoft.Windows.AppLifecycle.AppInstance>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.Windows.AppLifecycle.AppInstance FindOrRegisterForKey(IObjectReference _obj, string key)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                MarshalString.Pinnable __key = new(key);
                fixed(void* ___key = __key)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, MarshalString.GetAbi(ref __key), &__retval));
                    global::System.GC.KeepAlive(_obj);
                    return global::ABI.Microsoft.Windows.AppLifecycle.AppInstance.FromAbi(__retval);
                }
            }
            finally
            {
                global::ABI.Microsoft.Windows.AppLifecycle.AppInstance.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x25, 0x4B, 0x41, 0x4F, 0x30, 0x83, 0x9B, 0x5A, 0xBB, 0xC1, 0x82, 0x29, 0xD4, 0x79, 0x64, 0x9D };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("4F414B25-8330-5A9B-BBC1-8229D479649D")]
    internal interface IAppInstanceStatics : global::Microsoft.Windows.AppLifecycle.IAppInstanceStatics
    {
    }
    internal static class IAppInstanceStatics2Methods
    {


        internal static unsafe global::Windows.ApplicationModel.Core.AppRestartFailureReason Restart(IObjectReference _obj, string arguments)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.ApplicationModel.Core.AppRestartFailureReason __retval = default;
            MarshalString.Pinnable __arguments = new(arguments);
            fixed(void* ___arguments = __arguments)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::Windows.ApplicationModel.Core.AppRestartFailureReason*, int>**)ThisPtr)[6](ThisPtr, MarshalString.GetAbi(ref __arguments), &__retval));
                global::System.GC.KeepAlive(_obj);
                return __retval;
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x85, 0x18, 0x9F, 0xFE, 0x60, 0x71, 0x97, 0x53, 0xBA, 0x9B, 0x58, 0x90, 0xB2, 0x4F, 0xDC, 0x4 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("FE9F1885-7160-5397-BA9B-5890B24FDC04")]
    internal interface IAppInstanceStatics2 : global::Microsoft.Windows.AppLifecycle.IAppInstanceStatics2
    {
    }
}
#pragma warning restore CA1416
