//------------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by cswinrt.exe version 2.2.0.241111.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq.Expressions;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using WinRT;
using WinRT.Interop;


#pragma warning disable 0169 // warning CS0169: The field '...' is never used
#pragma warning disable 0649 // warning CS0169: Field '...' is never assigned to
#pragma warning disable CA2207, CA1063, CA1033, CA1001, CA2213

namespace Microsoft.Windows.Storage
{
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.Storage")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.Storage.ApplicationData))]
    [global::ABI.Microsoft.Windows.Storage.ApplicationDataRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IApplicationData))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(ApplicationDataContract), 65536u)]
    public sealed class ApplicationData : global::System.IDisposable, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<ApplicationData>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_Windows_Storage_IApplicationData => _inner;
        private volatile IObjectReference ___objRef_global__System_IDisposable;
        private IObjectReference Make___objRef_global__System_IDisposable()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__System_IDisposable, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.System.IDisposableMethods.IID), null);
            return ___objRef_global__System_IDisposable;
        }
        private IObjectReference _objRef_global__System_IDisposable => ___objRef_global__System_IDisposable ?? Make___objRef_global__System_IDisposable();



        public static I As<I>() => ActivationFactory.Get("Microsoft.Windows.Storage.ApplicationData").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_Windows_Storage_IApplicationDataStatics;
        private static IObjectReference _objRef_global__Microsoft_Windows_Storage_IApplicationDataStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_Windows_Storage_IApplicationDataStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_Windows_Storage_IApplicationDataStatics = ActivationFactory.Get("Microsoft.Windows.Storage.ApplicationData", global::ABI.Microsoft.Windows.Storage.IApplicationDataStaticsMethods.IID);
                }
            }
        }

        public static ApplicationData GetDefault() => global::ABI.Microsoft.Windows.Storage.IApplicationDataStaticsMethods.GetDefault(_objRef_global__Microsoft_Windows_Storage_IApplicationDataStatics);

        public static ApplicationData GetForUser(global::Windows.System.User user) => global::ABI.Microsoft.Windows.Storage.IApplicationDataStaticsMethods.GetForUser(_objRef_global__Microsoft_Windows_Storage_IApplicationDataStatics, user);

        public static ApplicationData GetForPackageFamily(string packageFamilyName) => global::ABI.Microsoft.Windows.Storage.IApplicationDataStaticsMethods.GetForPackageFamily(_objRef_global__Microsoft_Windows_Storage_IApplicationDataStatics, packageFamilyName);

        public static ApplicationData FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<ApplicationData>.FromAbi(thisPtr);
        }

        internal ApplicationData(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.Windows.Storage.IApplicationDataMethods.IID);

        }


        public static bool operator ==(ApplicationData x, ApplicationData y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(ApplicationData x, ApplicationData y) => !(x == y);
        public bool Equals(ApplicationData other) => this == other;
        public override bool Equals(object obj) => obj is ApplicationData that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public global::Windows.Foundation.IAsyncAction ClearAsync(ApplicationDataLocality locality) => global::ABI.Microsoft.Windows.Storage.IApplicationDataMethods.ClearAsync(_objRef_global__Microsoft_Windows_Storage_IApplicationData, locality);

        public global::Windows.Foundation.IAsyncAction ClearPublisherCacheFolderAsync(string folderName) => global::ABI.Microsoft.Windows.Storage.IApplicationDataMethods.ClearPublisherCacheFolderAsync(_objRef_global__Microsoft_Windows_Storage_IApplicationData, folderName);

        public string GetPublisherCachePath(string folderName) => global::ABI.Microsoft.Windows.Storage.IApplicationDataMethods.GetPublisherCachePath(_objRef_global__Microsoft_Windows_Storage_IApplicationData, folderName);

        public global::Windows.Storage.StorageFolder GetPublisherCacheFolder(string folderName) => global::ABI.Microsoft.Windows.Storage.IApplicationDataMethods.GetPublisherCacheFolder(_objRef_global__Microsoft_Windows_Storage_IApplicationData, folderName);

        public void Dispose() => global::ABI.System.IDisposableMethods.Dispose(_objRef_global__System_IDisposable);

        public bool IsMachinePathSupported => global::ABI.Microsoft.Windows.Storage.IApplicationDataMethods.get_IsMachinePathSupported(_objRef_global__Microsoft_Windows_Storage_IApplicationData);

        public global::Windows.Storage.StorageFolder LocalCacheFolder => global::ABI.Microsoft.Windows.Storage.IApplicationDataMethods.get_LocalCacheFolder(_objRef_global__Microsoft_Windows_Storage_IApplicationData);

        public string LocalCachePath => global::ABI.Microsoft.Windows.Storage.IApplicationDataMethods.get_LocalCachePath(_objRef_global__Microsoft_Windows_Storage_IApplicationData);

        public global::Windows.Storage.StorageFolder LocalFolder => global::ABI.Microsoft.Windows.Storage.IApplicationDataMethods.get_LocalFolder(_objRef_global__Microsoft_Windows_Storage_IApplicationData);

        public string LocalPath => global::ABI.Microsoft.Windows.Storage.IApplicationDataMethods.get_LocalPath(_objRef_global__Microsoft_Windows_Storage_IApplicationData);

        public ApplicationDataContainer LocalSettings => global::ABI.Microsoft.Windows.Storage.IApplicationDataMethods.get_LocalSettings(_objRef_global__Microsoft_Windows_Storage_IApplicationData);

        public global::Windows.Storage.StorageFolder MachineFolder => global::ABI.Microsoft.Windows.Storage.IApplicationDataMethods.get_MachineFolder(_objRef_global__Microsoft_Windows_Storage_IApplicationData);

        public string MachinePath => global::ABI.Microsoft.Windows.Storage.IApplicationDataMethods.get_MachinePath(_objRef_global__Microsoft_Windows_Storage_IApplicationData);

        public global::Windows.Storage.StorageFolder SharedLocalFolder => global::ABI.Microsoft.Windows.Storage.IApplicationDataMethods.get_SharedLocalFolder(_objRef_global__Microsoft_Windows_Storage_IApplicationData);

        public string SharedLocalPath => global::ABI.Microsoft.Windows.Storage.IApplicationDataMethods.get_SharedLocalPath(_objRef_global__Microsoft_Windows_Storage_IApplicationData);

        public global::Windows.Storage.StorageFolder TemporaryFolder => global::ABI.Microsoft.Windows.Storage.IApplicationDataMethods.get_TemporaryFolder(_objRef_global__Microsoft_Windows_Storage_IApplicationData);

        public string TemporaryPath => global::ABI.Microsoft.Windows.Storage.IApplicationDataMethods.get_TemporaryPath(_objRef_global__Microsoft_Windows_Storage_IApplicationData);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.Storage")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.Storage.ApplicationDataContainer))]
    [global::ABI.Microsoft.Windows.Storage.ApplicationDataContainerRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IApplicationDataContainer))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(ApplicationDataContract), 65536u)]
    public sealed class ApplicationDataContainer : global::System.IDisposable, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<ApplicationDataContainer>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_Windows_Storage_IApplicationDataContainer => _inner;
        private volatile IObjectReference ___objRef_global__System_IDisposable;
        private IObjectReference Make___objRef_global__System_IDisposable()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__System_IDisposable, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.System.IDisposableMethods.IID), null);
            return ___objRef_global__System_IDisposable;
        }
        private IObjectReference _objRef_global__System_IDisposable => ___objRef_global__System_IDisposable ?? Make___objRef_global__System_IDisposable();



        public static ApplicationDataContainer FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<ApplicationDataContainer>.FromAbi(thisPtr);
        }

        internal ApplicationDataContainer(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.Windows.Storage.IApplicationDataContainerMethods.IID);

        }


        public static bool operator ==(ApplicationDataContainer x, ApplicationDataContainer y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(ApplicationDataContainer x, ApplicationDataContainer y) => !(x == y);
        public bool Equals(ApplicationDataContainer other) => this == other;
        public override bool Equals(object obj) => obj is ApplicationDataContainer that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public ApplicationDataContainer CreateContainer(string name, ApplicationDataCreateDisposition disposition) => global::ABI.Microsoft.Windows.Storage.IApplicationDataContainerMethods.CreateContainer(_objRef_global__Microsoft_Windows_Storage_IApplicationDataContainer, name, disposition);

        public void DeleteContainer(string name) => global::ABI.Microsoft.Windows.Storage.IApplicationDataContainerMethods.DeleteContainer(_objRef_global__Microsoft_Windows_Storage_IApplicationDataContainer, name);

        public void Dispose() => global::ABI.System.IDisposableMethods.Dispose(_objRef_global__System_IDisposable);

        public global::System.Collections.Generic.IDictionary<string, ApplicationDataContainer> Containers => global::ABI.Microsoft.Windows.Storage.IApplicationDataContainerMethods.get_Containers(_objRef_global__Microsoft_Windows_Storage_IApplicationDataContainer);

        public ApplicationDataLocality Locality => global::ABI.Microsoft.Windows.Storage.IApplicationDataContainerMethods.get_Locality(_objRef_global__Microsoft_Windows_Storage_IApplicationDataContainer);

        public string Name => global::ABI.Microsoft.Windows.Storage.IApplicationDataContainerMethods.get_Name(_objRef_global__Microsoft_Windows_Storage_IApplicationDataContainer);

        public global::Windows.Foundation.Collections.IPropertySet Values => global::ABI.Microsoft.Windows.Storage.IApplicationDataContainerMethods.get_Values(_objRef_global__Microsoft_Windows_Storage_IApplicationDataContainer);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::Windows.Foundation.Metadata.ContractVersion(131072u)]
    public enum ApplicationDataContract
    {
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.Storage")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<ApplicationDataCreateDisposition>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(ApplicationDataContract), 65536u)]
    public enum ApplicationDataCreateDisposition : int
    {
        Always = unchecked((int)0),
        Existing = unchecked((int)0x1),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.Storage")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<ApplicationDataLocality>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(ApplicationDataContract), 65536u)]
    public enum ApplicationDataLocality : int
    {
        Local = unchecked((int)0),
        LocalCache = unchecked((int)0x3),
        SharedLocal = unchecked((int)0x4),
        Temporary = unchecked((int)0x2),
        Machine = unchecked((int)0x3e8),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.Storage")][Guid("FC073CE2-2F7B-5214-95FA-530A3F9D1EA5")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.Storage.IApplicationData))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(ApplicationDataContract), 65536u)]
    internal interface IApplicationData
    {
        global::Windows.Foundation.IAsyncAction ClearAsync(ApplicationDataLocality locality);
        global::Windows.Foundation.IAsyncAction ClearPublisherCacheFolderAsync(string folderName);
        string GetPublisherCachePath(string folderName);
        global::Windows.Storage.StorageFolder GetPublisherCacheFolder(string folderName);
        bool IsMachinePathSupported { get; }
        global::Windows.Storage.StorageFolder LocalCacheFolder { get; }
        string LocalCachePath { get; }
        global::Windows.Storage.StorageFolder LocalFolder { get; }
        string LocalPath { get; }
        ApplicationDataContainer LocalSettings { get; }
        global::Windows.Storage.StorageFolder MachineFolder { get; }
        string MachinePath { get; }
        global::Windows.Storage.StorageFolder SharedLocalFolder { get; }
        string SharedLocalPath { get; }
        global::Windows.Storage.StorageFolder TemporaryFolder { get; }
        string TemporaryPath { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.Storage")][Guid("D1FA9C23-2E59-55D8-BD86-88C2FDC9E7C9")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.Storage.IApplicationDataContainer))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(ApplicationDataContract), 65536u)]
    internal interface IApplicationDataContainer
    {
        ApplicationDataContainer CreateContainer(string name, ApplicationDataCreateDisposition disposition);
        void DeleteContainer(string name);
        global::System.Collections.Generic.IDictionary<string, ApplicationDataContainer> Containers { get; }
        ApplicationDataLocality Locality { get; }
        string Name { get; }
        global::Windows.Foundation.Collections.IPropertySet Values { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.Storage")][Guid("6A8B41F8-5560-56FB-86B0-D59E897D4D95")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.Storage.IApplicationDataStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(ApplicationDataContract), 65536u)]
    internal interface IApplicationDataStatics
    {
        ApplicationData GetDefault();
        ApplicationData GetForUser(global::Windows.System.User user);
        ApplicationData GetForPackageFamily(string packageFamilyName);
    }
}

#pragma warning disable CA1416
namespace ABI.Microsoft.Windows.Storage
{
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct ApplicationData
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.Windows.Storage.ApplicationData obj) => obj is null ? null : MarshalInspectable<global::Microsoft.Windows.Storage.ApplicationData>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.Windows.Storage.IApplicationDataMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.Windows.Storage.ApplicationData obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.Windows.Storage.IApplicationDataMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.Windows.Storage.ApplicationData FromAbi(IntPtr thisPtr) => global::Microsoft.Windows.Storage.ApplicationData.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.Windows.Storage.ApplicationData obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.Windows.Storage.ApplicationData>.MarshalerArray CreateMarshalerArray(global::Microsoft.Windows.Storage.ApplicationData[] array) => MarshalInterfaceHelper<global::Microsoft.Windows.Storage.ApplicationData>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Windows.Storage.ApplicationData>.GetAbiArray(box);
        public static unsafe global::Microsoft.Windows.Storage.ApplicationData[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Windows.Storage.ApplicationData>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.Windows.Storage.ApplicationData[] array, object box) => MarshalInterfaceHelper<global::Microsoft.Windows.Storage.ApplicationData>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.Windows.Storage.ApplicationData[] array) => MarshalInterfaceHelper<global::Microsoft.Windows.Storage.ApplicationData>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.Windows.Storage.ApplicationData>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.Windows.Storage.ApplicationData>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class ApplicationDataRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.Windows.Storage.ApplicationData(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct ApplicationDataContainer
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.Windows.Storage.ApplicationDataContainer obj) => obj is null ? null : MarshalInspectable<global::Microsoft.Windows.Storage.ApplicationDataContainer>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.Windows.Storage.IApplicationDataContainerMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.Windows.Storage.ApplicationDataContainer obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.Windows.Storage.IApplicationDataContainerMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.Windows.Storage.ApplicationDataContainer FromAbi(IntPtr thisPtr) => global::Microsoft.Windows.Storage.ApplicationDataContainer.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.Windows.Storage.ApplicationDataContainer obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.Windows.Storage.ApplicationDataContainer>.MarshalerArray CreateMarshalerArray(global::Microsoft.Windows.Storage.ApplicationDataContainer[] array) => MarshalInterfaceHelper<global::Microsoft.Windows.Storage.ApplicationDataContainer>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Windows.Storage.ApplicationDataContainer>.GetAbiArray(box);
        public static unsafe global::Microsoft.Windows.Storage.ApplicationDataContainer[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Windows.Storage.ApplicationDataContainer>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.Windows.Storage.ApplicationDataContainer[] array, object box) => MarshalInterfaceHelper<global::Microsoft.Windows.Storage.ApplicationDataContainer>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.Windows.Storage.ApplicationDataContainer[] array) => MarshalInterfaceHelper<global::Microsoft.Windows.Storage.ApplicationDataContainer>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.Windows.Storage.ApplicationDataContainer>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.Windows.Storage.ApplicationDataContainer>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class ApplicationDataContainerRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.Windows.Storage.ApplicationDataContainer(inspectable.ObjRef);
    }
    internal static class IApplicationDataMethods
    {


        internal static unsafe global::Windows.Foundation.IAsyncAction ClearAsync(IObjectReference _obj, global::Microsoft.Windows.Storage.ApplicationDataLocality locality)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Windows.Storage.ApplicationDataLocality, IntPtr*, int>**)ThisPtr)[18](ThisPtr, locality, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInterface<global::Windows.Foundation.IAsyncAction>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::Windows.Foundation.IAsyncAction>.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Windows.Foundation.IAsyncAction ClearPublisherCacheFolderAsync(IObjectReference _obj, string folderName)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                MarshalString.Pinnable __folderName = new(folderName);
                fixed(void* ___folderName = __folderName)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[19](ThisPtr, MarshalString.GetAbi(ref __folderName), &__retval));
                    global::System.GC.KeepAlive(_obj);
                    return MarshalInterface<global::Windows.Foundation.IAsyncAction>.FromAbi(__retval);
                }
            }
            finally
            {
                MarshalInterface<global::Windows.Foundation.IAsyncAction>.DisposeAbi(__retval);
            }
        }

        internal static unsafe string GetPublisherCachePath(IObjectReference _obj, string folderName)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                MarshalString.Pinnable __folderName = new(folderName);
                fixed(void* ___folderName = __folderName)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[20](ThisPtr, MarshalString.GetAbi(ref __folderName), &__retval));
                    global::System.GC.KeepAlive(_obj);
                    return MarshalString.FromAbi(__retval);
                }
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Windows.Storage.StorageFolder GetPublisherCacheFolder(IObjectReference _obj, string folderName)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                MarshalString.Pinnable __folderName = new(folderName);
                fixed(void* ___folderName = __folderName)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[21](ThisPtr, MarshalString.GetAbi(ref __folderName), &__retval));
                    global::System.GC.KeepAlive(_obj);
                    return global::ABI.Windows.Storage.StorageFolder.FromAbi(__retval);
                }
            }
            finally
            {
                global::ABI.Windows.Storage.StorageFolder.DisposeAbi(__retval);
            }
        }
        internal static unsafe bool get_IsMachinePathSupported(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }

        internal static unsafe global::Windows.Storage.StorageFolder get_LocalCacheFolder(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[12](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Windows.Storage.StorageFolder.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Windows.Storage.StorageFolder.DisposeAbi(__retval);
            }
        }

        internal static unsafe string get_LocalCachePath(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Windows.Storage.StorageFolder get_LocalFolder(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[13](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Windows.Storage.StorageFolder.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Windows.Storage.StorageFolder.DisposeAbi(__retval);
            }
        }

        internal static unsafe string get_LocalPath(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.Windows.Storage.ApplicationDataContainer get_LocalSettings(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[17](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.Windows.Storage.ApplicationDataContainer.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.Windows.Storage.ApplicationDataContainer.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Windows.Storage.StorageFolder get_MachineFolder(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[14](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Windows.Storage.StorageFolder.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Windows.Storage.StorageFolder.DisposeAbi(__retval);
            }
        }

        internal static unsafe string get_MachinePath(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[9](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Windows.Storage.StorageFolder get_SharedLocalFolder(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[15](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Windows.Storage.StorageFolder.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Windows.Storage.StorageFolder.DisposeAbi(__retval);
            }
        }

        internal static unsafe string get_SharedLocalPath(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[10](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Windows.Storage.StorageFolder get_TemporaryFolder(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[16](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Windows.Storage.StorageFolder.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Windows.Storage.StorageFolder.DisposeAbi(__retval);
            }
        }

        internal static unsafe string get_TemporaryPath(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[11](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xE2, 0x3C, 0x7, 0xFC, 0x7B, 0x2F, 0x14, 0x52, 0x95, 0xFA, 0x53, 0xA, 0x3F, 0x9D, 0x1E, 0xA5 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("FC073CE2-2F7B-5214-95FA-530A3F9D1EA5")]
    internal interface IApplicationData : global::Microsoft.Windows.Storage.IApplicationData
    {
    }
    internal static class IApplicationDataContainerMethods
    {


        internal static unsafe global::Microsoft.Windows.Storage.ApplicationDataContainer CreateContainer(IObjectReference _obj, string name, global::Microsoft.Windows.Storage.ApplicationDataCreateDisposition disposition)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                MarshalString.Pinnable __name = new(name);
                fixed(void* ___name = __name)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::Microsoft.Windows.Storage.ApplicationDataCreateDisposition, IntPtr*, int>**)ThisPtr)[10](ThisPtr, MarshalString.GetAbi(ref __name), disposition, &__retval));
                    global::System.GC.KeepAlive(_obj);
                    return global::ABI.Microsoft.Windows.Storage.ApplicationDataContainer.FromAbi(__retval);
                }
            }
            finally
            {
                global::ABI.Microsoft.Windows.Storage.ApplicationDataContainer.DisposeAbi(__retval);
            }
        }

        internal static unsafe void DeleteContainer(IObjectReference _obj, string name)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalString.Pinnable __name = new(name);
            fixed(void* ___name = __name)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[11](ThisPtr, MarshalString.GetAbi(ref __name)));
                global::System.GC.KeepAlive(_obj);
            }
        }
        internal static unsafe global::System.Collections.Generic.IDictionary<string, global::Microsoft.Windows.Storage.ApplicationDataContainer> get_Containers(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IMap_2_String__Microsoft_Windows_Storage_ApplicationDataContainer.EnsureInitialized();
                return MarshalInterface<global::System.Collections.Generic.IDictionary<string, global::Microsoft.Windows.Storage.ApplicationDataContainer>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Collections.Generic.IDictionary<string, global::Microsoft.Windows.Storage.ApplicationDataContainer>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.Windows.Storage.ApplicationDataLocality get_Locality(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.Windows.Storage.ApplicationDataLocality __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Windows.Storage.ApplicationDataLocality*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe string get_Name(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Windows.Foundation.Collections.IPropertySet get_Values(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[9](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                global::ABI.Windows.Foundation.Collections.IPropertySetMethods.InitRcwHelper();
                return MarshalInterface<global::Windows.Foundation.Collections.IPropertySet>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::Windows.Foundation.Collections.IPropertySet>.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x23, 0x9C, 0xFA, 0xD1, 0x59, 0x2E, 0xD8, 0x55, 0xBD, 0x86, 0x88, 0xC2, 0xFD, 0xC9, 0xE7, 0xC9 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("D1FA9C23-2E59-55D8-BD86-88C2FDC9E7C9")]
    internal interface IApplicationDataContainer : global::Microsoft.Windows.Storage.IApplicationDataContainer
    {
    }
    internal static class IApplicationDataStaticsMethods
    {


        internal static unsafe global::Microsoft.Windows.Storage.ApplicationData GetDefault(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.Windows.Storage.ApplicationData.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.Windows.Storage.ApplicationData.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.Windows.Storage.ApplicationData GetForUser(IObjectReference _obj, global::Windows.System.User user)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __user = default;
            IntPtr __retval = default;
            try
            {
                __user = global::ABI.Windows.System.User.CreateMarshaler2(user);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, MarshalInspectable<object>.GetAbi(__user), &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.Windows.Storage.ApplicationData.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__user);
                global::ABI.Microsoft.Windows.Storage.ApplicationData.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.Windows.Storage.ApplicationData GetForPackageFamily(IObjectReference _obj, string packageFamilyName)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                MarshalString.Pinnable __packageFamilyName = new(packageFamilyName);
                fixed(void* ___packageFamilyName = __packageFamilyName)
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, MarshalString.GetAbi(ref __packageFamilyName), &__retval));
                    global::System.GC.KeepAlive(_obj);
                    return global::ABI.Microsoft.Windows.Storage.ApplicationData.FromAbi(__retval);
                }
            }
            finally
            {
                global::ABI.Microsoft.Windows.Storage.ApplicationData.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xF8, 0x41, 0x8B, 0x6A, 0x60, 0x55, 0xFB, 0x56, 0x86, 0xB0, 0xD5, 0x9E, 0x89, 0x7D, 0x4D, 0x95 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("6A8B41F8-5560-56FB-86B0-D59E897D4D95")]
    internal interface IApplicationDataStatics : global::Microsoft.Windows.Storage.IApplicationDataStatics
    {
    }
}
#pragma warning restore CA1416
