//------------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by cswinrt.exe version 2.2.0.241111.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq.Expressions;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using WinRT;
using WinRT.Interop;


#pragma warning disable 0169 // warning CS0169: The field '...' is never used
#pragma warning disable 0649 // warning CS0169: Field '...' is never assigned to
#pragma warning disable CA2207, CA1063, CA1033, CA1001, CA2213

namespace Microsoft.UI.Input.DragDrop
{
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.DragDrop.DragDropManager))]
    [global::ABI.Microsoft.UI.Input.DragDrop.DragDropManagerRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IDragDropManager))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65540u)]
    public sealed class DragDropManager : global::System.IDisposable, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<DragDropManager>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Input_DragDrop_IDragDropManager => _inner;
        private volatile IObjectReference ___objRef_global__System_IDisposable;
        private IObjectReference Make___objRef_global__System_IDisposable()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__System_IDisposable, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.System.IDisposableMethods.IID), null);
            return ___objRef_global__System_IDisposable;
        }
        private IObjectReference _objRef_global__System_IDisposable => ___objRef_global__System_IDisposable ?? Make___objRef_global__System_IDisposable();



        public static I As<I>() => ActivationFactory.Get("Microsoft.UI.Input.DragDrop.DragDropManager").AsInterface<I>();

        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Input_DragDrop_IDragDropManagerStatics;
        private static IObjectReference _objRef_global__Microsoft_UI_Input_DragDrop_IDragDropManagerStatics
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Input_DragDrop_IDragDropManagerStatics;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Input_DragDrop_IDragDropManagerStatics = ActivationFactory.Get("Microsoft.UI.Input.DragDrop.DragDropManager", global::ABI.Microsoft.UI.Input.DragDrop.IDragDropManagerStaticsMethods.IID);
                }
            }
        }

        public static DragDropManager GetForIsland(global::Microsoft.UI.Content.ContentIsland content) => global::ABI.Microsoft.UI.Input.DragDrop.IDragDropManagerStaticsMethods.GetForIsland(_objRef_global__Microsoft_UI_Input_DragDrop_IDragDropManagerStatics, content);

        public static DragDropManager FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<DragDropManager>.FromAbi(thisPtr);
        }

        internal DragDropManager(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Input.DragDrop.IDragDropManagerMethods.IID);

        }


        public static bool operator ==(DragDropManager x, DragDropManager y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(DragDropManager x, DragDropManager y) => !(x == y);
        public bool Equals(DragDropManager other) => this == other;
        public override bool Equals(object obj) => obj is DragDropManager that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public event global::Windows.Foundation.TypedEventHandler<DragDropManager, DropOperationTargetRequestedEventArgs> TargetRequested
        {
            add => global::ABI.Microsoft.UI.Input.DragDrop.IDragDropManagerMethods.Get_TargetRequested2(_objRef_global__Microsoft_UI_Input_DragDrop_IDragDropManager, (IWinRTObject)this).Subscribe(value);
            remove => global::ABI.Microsoft.UI.Input.DragDrop.IDragDropManagerMethods.Get_TargetRequested2(_objRef_global__Microsoft_UI_Input_DragDrop_IDragDropManager, (IWinRTObject)this).Unsubscribe(value);
        }

        public void Dispose() => global::ABI.System.IDisposableMethods.Dispose(_objRef_global__System_IDisposable);

        public bool AreConcurrentOperationsEnabled
        {
            get => global::ABI.Microsoft.UI.Input.DragDrop.IDragDropManagerMethods.get_AreConcurrentOperationsEnabled(_objRef_global__Microsoft_UI_Input_DragDrop_IDragDropManager);
            set => global::ABI.Microsoft.UI.Input.DragDrop.IDragDropManagerMethods.set_AreConcurrentOperationsEnabled(_objRef_global__Microsoft_UI_Input_DragDrop_IDragDropManager, value);
        }

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [FlagsAttribute]
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<DragDropModifiers>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65540u)]
    public enum DragDropModifiers : uint
    {
        None = unchecked((uint)0),
        Shift = unchecked((uint)0x1),
        Control = unchecked((uint)0x2),
        Alt = unchecked((uint)0x4),
        LeftButton = unchecked((uint)0x8),
        MiddleButton = unchecked((uint)0x10),
        RightButton = unchecked((uint)0x20),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.DragDrop.DragInfo))]
    [global::ABI.Microsoft.UI.Input.DragDrop.DragInfoRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IDragInfo))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65540u)]
    public sealed class DragInfo : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<DragInfo>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Input_DragDrop_IDragInfo => _inner;


        public static DragInfo FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<DragInfo>.FromAbi(thisPtr);
        }

        internal DragInfo(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Input.DragDrop.IDragInfoMethods.IID);

        }


        public static bool operator ==(DragInfo x, DragInfo y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(DragInfo x, DragInfo y) => !(x == y);
        public bool Equals(DragInfo other) => this == other;
        public override bool Equals(object obj) => obj is DragInfo that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public global::Windows.ApplicationModel.DataTransfer.DataPackageOperation AllowedOperations => global::ABI.Microsoft.UI.Input.DragDrop.IDragInfoMethods.get_AllowedOperations(_objRef_global__Microsoft_UI_Input_DragDrop_IDragInfo);

        public global::Windows.ApplicationModel.DataTransfer.DataPackageView Data => global::ABI.Microsoft.UI.Input.DragDrop.IDragInfoMethods.get_Data(_objRef_global__Microsoft_UI_Input_DragDrop_IDragInfo);

        public DragDropModifiers Modifiers => global::ABI.Microsoft.UI.Input.DragDrop.IDragInfoMethods.get_Modifiers(_objRef_global__Microsoft_UI_Input_DragDrop_IDragInfo);

        public global::Windows.Foundation.Point Position => global::ABI.Microsoft.UI.Input.DragDrop.IDragInfoMethods.get_Position(_objRef_global__Microsoft_UI_Input_DragDrop_IDragInfo);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.DragDrop.DragOperation))]
    [global::ABI.Microsoft.UI.Input.DragDrop.DragOperationRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IDragOperation))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65540u)]
    public sealed class DragOperation : global::System.IDisposable, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<DragOperation>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Input_DragDrop_IDragOperation => _inner;
        private volatile IObjectReference ___objRef_global__System_IDisposable;
        private IObjectReference Make___objRef_global__System_IDisposable()
        {
            global::System.Threading.Interlocked.CompareExchange(ref ___objRef_global__System_IDisposable, ((IWinRTObject)this).NativeObject.As<IUnknownVftbl>(global::ABI.System.IDisposableMethods.IID), null);
            return ___objRef_global__System_IDisposable;
        }
        private IObjectReference _objRef_global__System_IDisposable => ___objRef_global__System_IDisposable ?? Make___objRef_global__System_IDisposable();



        private static volatile IObjectReference ___objRef_global__Microsoft_UI_Input_DragDrop_DragOperation;
        private static IObjectReference _objRef_global__Microsoft_UI_Input_DragDrop_DragOperation
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_UI_Input_DragDrop_DragOperation;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_UI_Input_DragDrop_DragOperation = ActivationFactory.Get("Microsoft.UI.Input.DragDrop.DragOperation");
                }
            }
        }

        public DragOperation() 
        {
            _inner = global::ABI.WinRT.Interop.IActivationFactoryMethods.ActivateInstanceUnsafe(_objRef_global__Microsoft_UI_Input_DragDrop_DragOperation, global::ABI.Microsoft.UI.Input.DragDrop.IDragOperationMethods.IID);
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);

        }

        public static DragOperation FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<DragOperation>.FromAbi(thisPtr);
        }

        internal DragOperation(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Input.DragDrop.IDragOperationMethods.IID);

        }


        public static bool operator ==(DragOperation x, DragOperation y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(DragOperation x, DragOperation y) => !(x == y);
        public bool Equals(DragOperation other) => this == other;
        public override bool Equals(object obj) => obj is DragOperation that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public void SetDragUIContentFromSoftwareBitmap(global::Windows.Graphics.Imaging.SoftwareBitmap bitmap) => global::ABI.Microsoft.UI.Input.DragDrop.IDragOperationMethods.SetDragUIContentFromSoftwareBitmap(_objRef_global__Microsoft_UI_Input_DragDrop_IDragOperation, bitmap);

        public void SetDragUIContentFromSoftwareBitmap(global::Windows.Graphics.Imaging.SoftwareBitmap bitmap, global::Windows.Foundation.Point anchorPoint) => global::ABI.Microsoft.UI.Input.DragDrop.IDragOperationMethods.SetDragUIContentFromSoftwareBitmap(_objRef_global__Microsoft_UI_Input_DragDrop_IDragOperation, bitmap, anchorPoint);

        public global::Windows.Foundation.IAsyncOperation<global::Windows.ApplicationModel.DataTransfer.DataPackageOperation> StartAsync(DragDropManager initialTarget, global::Microsoft.UI.Input.PointerPoint initialPointerPoint) => global::ABI.Microsoft.UI.Input.DragDrop.IDragOperationMethods.StartAsync(_objRef_global__Microsoft_UI_Input_DragDrop_IDragOperation, initialTarget, initialPointerPoint);

        public void Dispose() => global::ABI.System.IDisposableMethods.Dispose(_objRef_global__System_IDisposable);

        public global::Windows.ApplicationModel.DataTransfer.DataPackageOperation AllowedOperations
        {
            get => global::ABI.Microsoft.UI.Input.DragDrop.IDragOperationMethods.get_AllowedOperations(_objRef_global__Microsoft_UI_Input_DragDrop_IDragOperation);
            set => global::ABI.Microsoft.UI.Input.DragDrop.IDragOperationMethods.set_AllowedOperations(_objRef_global__Microsoft_UI_Input_DragDrop_IDragOperation, value);
        }

        public global::Windows.ApplicationModel.DataTransfer.DataPackage Data => global::ABI.Microsoft.UI.Input.DragDrop.IDragOperationMethods.get_Data(_objRef_global__Microsoft_UI_Input_DragDrop_IDragOperation);

        public DragUIContentMode DragUIContentMode
        {
            get => global::ABI.Microsoft.UI.Input.DragDrop.IDragOperationMethods.get_DragUIContentMode(_objRef_global__Microsoft_UI_Input_DragDrop_IDragOperation);
            set => global::ABI.Microsoft.UI.Input.DragDrop.IDragOperationMethods.set_DragUIContentMode(_objRef_global__Microsoft_UI_Input_DragDrop_IDragOperation, value);
        }

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<DragUIContentMode>))][global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65540u)]
    public enum DragUIContentMode : int
    {
        Auto = unchecked((int)0),
        Deferred = unchecked((int)0x1),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.DragDrop.DragUIOverride))]
    [global::ABI.Microsoft.UI.Input.DragDrop.DragUIOverrideRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IDragUIOverride))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65540u)]
    public sealed class DragUIOverride : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<DragUIOverride>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Input_DragDrop_IDragUIOverride => _inner;


        public static DragUIOverride FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<DragUIOverride>.FromAbi(thisPtr);
        }

        internal DragUIOverride(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Input.DragDrop.IDragUIOverrideMethods.IID);

        }


        public static bool operator ==(DragUIOverride x, DragUIOverride y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(DragUIOverride x, DragUIOverride y) => !(x == y);
        public bool Equals(DragUIOverride other) => this == other;
        public override bool Equals(object obj) => obj is DragUIOverride that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public void Clear() => global::ABI.Microsoft.UI.Input.DragDrop.IDragUIOverrideMethods.Clear(_objRef_global__Microsoft_UI_Input_DragDrop_IDragUIOverride);

        public void SetContentFromSoftwareBitmap(global::Windows.Graphics.Imaging.SoftwareBitmap bitmap) => global::ABI.Microsoft.UI.Input.DragDrop.IDragUIOverrideMethods.SetContentFromSoftwareBitmap(_objRef_global__Microsoft_UI_Input_DragDrop_IDragUIOverride, bitmap);

        public void SetContentFromSoftwareBitmap(global::Windows.Graphics.Imaging.SoftwareBitmap bitmap, global::Windows.Foundation.Point anchorPoint) => global::ABI.Microsoft.UI.Input.DragDrop.IDragUIOverrideMethods.SetContentFromSoftwareBitmap(_objRef_global__Microsoft_UI_Input_DragDrop_IDragUIOverride, bitmap, anchorPoint);

        public string Caption
        {
            get => global::ABI.Microsoft.UI.Input.DragDrop.IDragUIOverrideMethods.get_Caption(_objRef_global__Microsoft_UI_Input_DragDrop_IDragUIOverride);
            set => global::ABI.Microsoft.UI.Input.DragDrop.IDragUIOverrideMethods.set_Caption(_objRef_global__Microsoft_UI_Input_DragDrop_IDragUIOverride, value);
        }

        public bool IsCaptionVisible
        {
            get => global::ABI.Microsoft.UI.Input.DragDrop.IDragUIOverrideMethods.get_IsCaptionVisible(_objRef_global__Microsoft_UI_Input_DragDrop_IDragUIOverride);
            set => global::ABI.Microsoft.UI.Input.DragDrop.IDragUIOverrideMethods.set_IsCaptionVisible(_objRef_global__Microsoft_UI_Input_DragDrop_IDragUIOverride, value);
        }

        public bool IsContentVisible
        {
            get => global::ABI.Microsoft.UI.Input.DragDrop.IDragUIOverrideMethods.get_IsContentVisible(_objRef_global__Microsoft_UI_Input_DragDrop_IDragUIOverride);
            set => global::ABI.Microsoft.UI.Input.DragDrop.IDragUIOverrideMethods.set_IsContentVisible(_objRef_global__Microsoft_UI_Input_DragDrop_IDragUIOverride, value);
        }

        public bool IsGlyphVisible
        {
            get => global::ABI.Microsoft.UI.Input.DragDrop.IDragUIOverrideMethods.get_IsGlyphVisible(_objRef_global__Microsoft_UI_Input_DragDrop_IDragUIOverride);
            set => global::ABI.Microsoft.UI.Input.DragDrop.IDragUIOverrideMethods.set_IsGlyphVisible(_objRef_global__Microsoft_UI_Input_DragDrop_IDragUIOverride, value);
        }

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.DragDrop.DropOperationTargetRequestedEventArgs))]
    [global::ABI.Microsoft.UI.Input.DragDrop.DropOperationTargetRequestedEventArgsRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IDropOperationTargetRequestedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65540u)]
    public sealed class DropOperationTargetRequestedEventArgs : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<DropOperationTargetRequestedEventArgs>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_UI_Input_DragDrop_IDropOperationTargetRequestedEventArgs => _inner;


        public static DropOperationTargetRequestedEventArgs FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<DropOperationTargetRequestedEventArgs>.FromAbi(thisPtr);
        }

        internal DropOperationTargetRequestedEventArgs(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.UI.Input.DragDrop.IDropOperationTargetRequestedEventArgsMethods.IID);

        }


        public static bool operator ==(DropOperationTargetRequestedEventArgs x, DropOperationTargetRequestedEventArgs y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(DropOperationTargetRequestedEventArgs x, DropOperationTargetRequestedEventArgs y) => !(x == y);
        public bool Equals(DropOperationTargetRequestedEventArgs other) => this == other;
        public override bool Equals(object obj) => obj is DropOperationTargetRequestedEventArgs that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public void SetTarget(IDropOperationTarget target) => global::ABI.Microsoft.UI.Input.DragDrop.IDropOperationTargetRequestedEventArgsMethods.SetTarget(_objRef_global__Microsoft_UI_Input_DragDrop_IDropOperationTargetRequestedEventArgs, target);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("4FEA9EFC-B073-5FBE-9C95-A4113EF6393F")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.DragDrop.IDragDropManager))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65540u)]
    internal interface IDragDropManager
    {
        bool AreConcurrentOperationsEnabled { get; set; }
        event global::Windows.Foundation.TypedEventHandler<DragDropManager, DropOperationTargetRequestedEventArgs> TargetRequested;
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("5587C863-57D7-5D0F-8EA9-E5DCF06A0F83")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.DragDrop.IDragDropManagerStatics))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65540u)]
    internal interface IDragDropManagerStatics
    {
        DragDropManager GetForIsland(global::Microsoft.UI.Content.ContentIsland content);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("7507D891-62A8-5A79-A880-AC7353D001EC")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.DragDrop.IDragInfo))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65540u)]
    internal interface IDragInfo
    {
        global::Windows.ApplicationModel.DataTransfer.DataPackageOperation AllowedOperations { get; }
        global::Windows.ApplicationModel.DataTransfer.DataPackageView Data { get; }
        DragDropModifiers Modifiers { get; }
        global::Windows.Foundation.Point Position { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("EF122288-7984-53D3-8488-133DCD3DE793")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.DragDrop.IDragOperation))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65540u)]
    internal interface IDragOperation
    {
        [global::Windows.Foundation.Metadata.Overload(@"SetDragUIContentFromSoftwareBitmap")]
        void SetDragUIContentFromSoftwareBitmap(global::Windows.Graphics.Imaging.SoftwareBitmap bitmap);
        [global::Windows.Foundation.Metadata.Overload(@"SetDragUIContentFromSoftwareBitmap2")]
        void SetDragUIContentFromSoftwareBitmap(global::Windows.Graphics.Imaging.SoftwareBitmap bitmap, global::Windows.Foundation.Point anchorPoint);
        global::Windows.Foundation.IAsyncOperation<global::Windows.ApplicationModel.DataTransfer.DataPackageOperation> StartAsync(DragDropManager initialTarget, global::Microsoft.UI.Input.PointerPoint initialPointerPoint);
        global::Windows.ApplicationModel.DataTransfer.DataPackageOperation AllowedOperations { get; set; }
        global::Windows.ApplicationModel.DataTransfer.DataPackage Data { get; }
        DragUIContentMode DragUIContentMode { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("8432FBAC-A17F-5A95-8F56-FB432280B54D")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.DragDrop.IDragUIOverride))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65540u)]
    internal interface IDragUIOverride
    {
        void Clear();
        [global::Windows.Foundation.Metadata.Overload(@"SetContentFromSoftwareBitmap")]
        void SetContentFromSoftwareBitmap(global::Windows.Graphics.Imaging.SoftwareBitmap bitmap);
        [global::Windows.Foundation.Metadata.Overload(@"SetContentFromSoftwareBitmap2")]
        void SetContentFromSoftwareBitmap(global::Windows.Graphics.Imaging.SoftwareBitmap bitmap, global::Windows.Foundation.Point anchorPoint);
        string Caption { get; set; }
        bool IsCaptionVisible { get; set; }
        bool IsContentVisible { get; set; }
        bool IsGlyphVisible { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("1C2707D9-0065-53C7-BBFB-50850378CAF3")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.DragDrop.IDropOperationTarget))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65540u)]
    public interface IDropOperationTarget
    {
        global::Windows.Foundation.IAsyncOperation<global::Windows.ApplicationModel.DataTransfer.DataPackageOperation> DropAsync(DragInfo dragInfo);
        global::Windows.Foundation.IAsyncOperation<global::Windows.ApplicationModel.DataTransfer.DataPackageOperation> EnterAsync(DragInfo dragInfo, DragUIOverride dragUIOverride);
        global::Windows.Foundation.IAsyncAction LeaveAsync(DragInfo dragInfo);
        global::Windows.Foundation.IAsyncOperation<global::Windows.ApplicationModel.DataTransfer.DataPackageOperation> OverAsync(DragInfo dragInfo, DragUIOverride dragUIOverride);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI")][Guid("F61C5B62-720E-59FF-AD0B-E77FC5B8A4A3")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Input.DragDrop.IDropOperationTargetRequestedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.Foundation.WindowsAppSDKContract), 65540u)]
    internal interface IDropOperationTargetRequestedEventArgs
    {
        void SetTarget(IDropOperationTarget target);
    }
}

#pragma warning disable CA1416
namespace ABI.Microsoft.UI.Input.DragDrop
{
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct DragDropManager
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Input.DragDrop.DragDropManager obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Input.DragDrop.DragDropManager>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Input.DragDrop.IDragDropManagerMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Input.DragDrop.DragDropManager obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Input.DragDrop.IDragDropManagerMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Input.DragDrop.DragDropManager FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Input.DragDrop.DragDropManager.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Input.DragDrop.DragDropManager obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Input.DragDrop.DragDropManager>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Input.DragDrop.DragDropManager[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.DragDrop.DragDropManager>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.DragDrop.DragDropManager>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Input.DragDrop.DragDropManager[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.DragDrop.DragDropManager>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Input.DragDrop.DragDropManager[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.DragDrop.DragDropManager>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Input.DragDrop.DragDropManager[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.DragDrop.DragDropManager>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Input.DragDrop.DragDropManager>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.DragDrop.DragDropManager>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class DragDropManagerRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Input.DragDrop.DragDropManager(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct DragInfo
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Input.DragDrop.DragInfo obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Input.DragDrop.DragInfo>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Input.DragDrop.IDragInfoMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Input.DragDrop.DragInfo obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Input.DragDrop.IDragInfoMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Input.DragDrop.DragInfo FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Input.DragDrop.DragInfo.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Input.DragDrop.DragInfo obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Input.DragDrop.DragInfo>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Input.DragDrop.DragInfo[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.DragDrop.DragInfo>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.DragDrop.DragInfo>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Input.DragDrop.DragInfo[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.DragDrop.DragInfo>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Input.DragDrop.DragInfo[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.DragDrop.DragInfo>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Input.DragDrop.DragInfo[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.DragDrop.DragInfo>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Input.DragDrop.DragInfo>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.DragDrop.DragInfo>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class DragInfoRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Input.DragDrop.DragInfo(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct DragOperation
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Input.DragDrop.DragOperation obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Input.DragDrop.DragOperation>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Input.DragDrop.IDragOperationMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Input.DragDrop.DragOperation obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Input.DragDrop.IDragOperationMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Input.DragDrop.DragOperation FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Input.DragDrop.DragOperation.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Input.DragDrop.DragOperation obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Input.DragDrop.DragOperation>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Input.DragDrop.DragOperation[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.DragDrop.DragOperation>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.DragDrop.DragOperation>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Input.DragDrop.DragOperation[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.DragDrop.DragOperation>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Input.DragDrop.DragOperation[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.DragDrop.DragOperation>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Input.DragDrop.DragOperation[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.DragDrop.DragOperation>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Input.DragDrop.DragOperation>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.DragDrop.DragOperation>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class DragOperationRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Input.DragDrop.DragOperation(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct DragUIOverride
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Input.DragDrop.DragUIOverride obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Input.DragDrop.DragUIOverride>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Input.DragDrop.IDragUIOverrideMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Input.DragDrop.DragUIOverride obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Input.DragDrop.IDragUIOverrideMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Input.DragDrop.DragUIOverride FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Input.DragDrop.DragUIOverride.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Input.DragDrop.DragUIOverride obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Input.DragDrop.DragUIOverride>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Input.DragDrop.DragUIOverride[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.DragDrop.DragUIOverride>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.DragDrop.DragUIOverride>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Input.DragDrop.DragUIOverride[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.DragDrop.DragUIOverride>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Input.DragDrop.DragUIOverride[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.DragDrop.DragUIOverride>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Input.DragDrop.DragUIOverride[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.DragDrop.DragUIOverride>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Input.DragDrop.DragUIOverride>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.DragDrop.DragUIOverride>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class DragUIOverrideRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Input.DragDrop.DragUIOverride(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct DropOperationTargetRequestedEventArgs
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.UI.Input.DragDrop.DropOperationTargetRequestedEventArgs obj) => obj is null ? null : MarshalInspectable<global::Microsoft.UI.Input.DragDrop.DropOperationTargetRequestedEventArgs>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.UI.Input.DragDrop.IDropOperationTargetRequestedEventArgsMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Input.DragDrop.DropOperationTargetRequestedEventArgs obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.UI.Input.DragDrop.IDropOperationTargetRequestedEventArgsMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.UI.Input.DragDrop.DropOperationTargetRequestedEventArgs FromAbi(IntPtr thisPtr) => global::Microsoft.UI.Input.DragDrop.DropOperationTargetRequestedEventArgs.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.UI.Input.DragDrop.DropOperationTargetRequestedEventArgs obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Input.DragDrop.DropOperationTargetRequestedEventArgs>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Input.DragDrop.DropOperationTargetRequestedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.DragDrop.DropOperationTargetRequestedEventArgs>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.DragDrop.DropOperationTargetRequestedEventArgs>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Input.DragDrop.DropOperationTargetRequestedEventArgs[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.DragDrop.DropOperationTargetRequestedEventArgs>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Input.DragDrop.DropOperationTargetRequestedEventArgs[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Input.DragDrop.DropOperationTargetRequestedEventArgs>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Input.DragDrop.DropOperationTargetRequestedEventArgs[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.DragDrop.DropOperationTargetRequestedEventArgs>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Input.DragDrop.DropOperationTargetRequestedEventArgs>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Input.DragDrop.DropOperationTargetRequestedEventArgs>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class DropOperationTargetRequestedEventArgsRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.UI.Input.DragDrop.DropOperationTargetRequestedEventArgs(inspectable.ObjRef);
    }
    internal static class IDragDropManagerMethods
    {

        internal static unsafe bool get_AreConcurrentOperationsEnabled(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_AreConcurrentOperationsEnabled(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[7](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }


        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.DragDrop.DragDropManager, global::Microsoft.UI.Input.DragDrop.DropOperationTargetRequestedEventArgs>>> _TargetRequested_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.DragDrop.DragDropManager, global::Microsoft.UI.Input.DragDrop.DropOperationTargetRequestedEventArgs>>> MakeTargetRequestedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _TargetRequested_, new(), null);
            return _TargetRequested_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.DragDrop.DragDropManager, global::Microsoft.UI.Input.DragDrop.DropOperationTargetRequestedEventArgs>>> _TargetRequested => _TargetRequested_ ?? MakeTargetRequestedTable();



        internal static unsafe global::ABI.WinRT.Interop.EventSource<global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Input.DragDrop.DragDropManager, global::Microsoft.UI.Input.DragDrop.DropOperationTargetRequestedEventArgs>> Get_TargetRequested2(IObjectReference _obj, object _thisObj)
        {
            return _TargetRequested.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Input_DragDrop_DragDropManager__global__Microsoft_UI_Input_DragDrop_DropOperationTargetRequestedEventArgs_(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[8],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[9],
                0);
            });
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xFC, 0x9E, 0xEA, 0x4F, 0x73, 0xB0, 0xBE, 0x5F, 0x9C, 0x95, 0xA4, 0x11, 0x3E, 0xF6, 0x39, 0x3F };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("4FEA9EFC-B073-5FBE-9C95-A4113EF6393F")]
    internal interface IDragDropManager : global::Microsoft.UI.Input.DragDrop.IDragDropManager
    {
    }
    internal static class IDragDropManagerStaticsMethods
    {


        internal static unsafe global::Microsoft.UI.Input.DragDrop.DragDropManager GetForIsland(IObjectReference _obj, global::Microsoft.UI.Content.ContentIsland content)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __content = default;
            IntPtr __retval = default;
            try
            {
                __content = global::ABI.Microsoft.UI.Content.ContentIsland.CreateMarshaler2(content);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__content), &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.UI.Input.DragDrop.DragDropManager.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__content);
                global::ABI.Microsoft.UI.Input.DragDrop.DragDropManager.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x63, 0xC8, 0x87, 0x55, 0xD7, 0x57, 0xF, 0x5D, 0x8E, 0xA9, 0xE5, 0xDC, 0xF0, 0x6A, 0xF, 0x83 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("5587C863-57D7-5D0F-8EA9-E5DCF06A0F83")]
    internal interface IDragDropManagerStatics : global::Microsoft.UI.Input.DragDrop.IDragDropManagerStatics
    {
    }
    internal static class IDragInfoMethods
    {

        internal static unsafe global::Windows.ApplicationModel.DataTransfer.DataPackageOperation get_AllowedOperations(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.ApplicationModel.DataTransfer.DataPackageOperation __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.ApplicationModel.DataTransfer.DataPackageOperation*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.ApplicationModel.DataTransfer.DataPackageView get_Data(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Windows.ApplicationModel.DataTransfer.DataPackageView.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Windows.ApplicationModel.DataTransfer.DataPackageView.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Input.DragDrop.DragDropModifiers get_Modifiers(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Input.DragDrop.DragDropModifiers __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Input.DragDrop.DragDropModifiers*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::Windows.Foundation.Point get_Position(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.Foundation.Point __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Foundation.Point*, int>**)ThisPtr)[9](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x91, 0xD8, 0x7, 0x75, 0xA8, 0x62, 0x79, 0x5A, 0xA8, 0x80, 0xAC, 0x73, 0x53, 0xD0, 0x1, 0xEC };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("7507D891-62A8-5A79-A880-AC7353D001EC")]
    internal interface IDragInfo : global::Microsoft.UI.Input.DragDrop.IDragInfo
    {
    }
    internal static class IDragOperationMethods
    {


        internal static unsafe void SetDragUIContentFromSoftwareBitmap(IObjectReference _obj, global::Windows.Graphics.Imaging.SoftwareBitmap bitmap)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __bitmap = default;
            try
            {
                __bitmap = global::ABI.Windows.Graphics.Imaging.SoftwareBitmap.CreateMarshaler2(bitmap);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[11](ThisPtr, MarshalInspectable<object>.GetAbi(__bitmap)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__bitmap);
            }
        }

        internal static unsafe void SetDragUIContentFromSoftwareBitmap(IObjectReference _obj, global::Windows.Graphics.Imaging.SoftwareBitmap bitmap, global::Windows.Foundation.Point anchorPoint)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __bitmap = default;
            try
            {
                __bitmap = global::ABI.Windows.Graphics.Imaging.SoftwareBitmap.CreateMarshaler2(bitmap);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::Windows.Foundation.Point, int>**)ThisPtr)[12](ThisPtr, MarshalInspectable<object>.GetAbi(__bitmap), anchorPoint));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__bitmap);
            }
        }

        internal static unsafe global::Windows.Foundation.IAsyncOperation<global::Windows.ApplicationModel.DataTransfer.DataPackageOperation> StartAsync(IObjectReference _obj, global::Microsoft.UI.Input.DragDrop.DragDropManager initialTarget, global::Microsoft.UI.Input.PointerPoint initialPointerPoint)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __initialTarget = default;
            ObjectReferenceValue __initialPointerPoint = default;
            IntPtr __retval = default;
            try
            {
                __initialTarget = global::ABI.Microsoft.UI.Input.DragDrop.DragDropManager.CreateMarshaler2(initialTarget);
                __initialPointerPoint = global::ABI.Microsoft.UI.Input.PointerPoint.CreateMarshaler2(initialPointerPoint);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[13](ThisPtr, MarshalInspectable<object>.GetAbi(__initialTarget), MarshalInspectable<object>.GetAbi(__initialPointerPoint), &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperation_1_Windows_ApplicationModel_DataTransfer_DataPackageOperation.EnsureInitialized();
                return MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Windows.ApplicationModel.DataTransfer.DataPackageOperation>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__initialTarget);
                MarshalInspectable<object>.DisposeMarshaler(__initialPointerPoint);
                MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Windows.ApplicationModel.DataTransfer.DataPackageOperation>>.DisposeAbi(__retval);
            }
        }
        internal static unsafe global::Windows.ApplicationModel.DataTransfer.DataPackageOperation get_AllowedOperations(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Windows.ApplicationModel.DataTransfer.DataPackageOperation __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.ApplicationModel.DataTransfer.DataPackageOperation*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_AllowedOperations(IObjectReference _obj, global::Windows.ApplicationModel.DataTransfer.DataPackageOperation value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.ApplicationModel.DataTransfer.DataPackageOperation, int>**)ThisPtr)[7](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Windows.ApplicationModel.DataTransfer.DataPackage get_Data(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Windows.ApplicationModel.DataTransfer.DataPackage.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Windows.ApplicationModel.DataTransfer.DataPackage.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Microsoft.UI.Input.DragDrop.DragUIContentMode get_DragUIContentMode(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.UI.Input.DragDrop.DragUIContentMode __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Input.DragDrop.DragUIContentMode*, int>**)ThisPtr)[9](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_DragUIContentMode(IObjectReference _obj, global::Microsoft.UI.Input.DragDrop.DragUIContentMode value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.Input.DragDrop.DragUIContentMode, int>**)ThisPtr)[10](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x88, 0x22, 0x12, 0xEF, 0x84, 0x79, 0xD3, 0x53, 0x84, 0x88, 0x13, 0x3D, 0xCD, 0x3D, 0xE7, 0x93 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("EF122288-7984-53D3-8488-133DCD3DE793")]
    internal interface IDragOperation : global::Microsoft.UI.Input.DragDrop.IDragOperation
    {
    }
    internal static class IDragUIOverrideMethods
    {


        internal static unsafe void Clear(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int>**)ThisPtr)[14](ThisPtr));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe void SetContentFromSoftwareBitmap(IObjectReference _obj, global::Windows.Graphics.Imaging.SoftwareBitmap bitmap)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __bitmap = default;
            try
            {
                __bitmap = global::ABI.Windows.Graphics.Imaging.SoftwareBitmap.CreateMarshaler2(bitmap);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[15](ThisPtr, MarshalInspectable<object>.GetAbi(__bitmap)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__bitmap);
            }
        }

        internal static unsafe void SetContentFromSoftwareBitmap(IObjectReference _obj, global::Windows.Graphics.Imaging.SoftwareBitmap bitmap, global::Windows.Foundation.Point anchorPoint)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __bitmap = default;
            try
            {
                __bitmap = global::ABI.Windows.Graphics.Imaging.SoftwareBitmap.CreateMarshaler2(bitmap);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::Windows.Foundation.Point, int>**)ThisPtr)[16](ThisPtr, MarshalInspectable<object>.GetAbi(__bitmap), anchorPoint));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__bitmap);
            }
        }
        internal static unsafe string get_Caption(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_Caption(IObjectReference _obj, string value)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalString.Pinnable __value = new(value);
            fixed(void* ___value = __value)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[7](ThisPtr, MarshalString.GetAbi(ref __value)));
                global::System.GC.KeepAlive(_obj);
            }
        }

        internal static unsafe bool get_IsCaptionVisible(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_IsCaptionVisible(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[9](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe bool get_IsContentVisible(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[10](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_IsContentVisible(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[11](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe bool get_IsGlyphVisible(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[12](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        internal static unsafe void set_IsGlyphVisible(IObjectReference _obj, bool value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[13](ThisPtr, (byte)(value ? 1 : 0)));
            global::System.GC.KeepAlive(_obj);
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xAC, 0xFB, 0x32, 0x84, 0x7F, 0xA1, 0x95, 0x5A, 0x8F, 0x56, 0xFB, 0x43, 0x22, 0x80, 0xB5, 0x4D };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("8432FBAC-A17F-5A95-8F56-FB432280B54D")]
    internal interface IDragUIOverride : global::Microsoft.UI.Input.DragDrop.IDragUIOverride
    {
    }
    public static class IDropOperationTargetMethods
    {


        public static unsafe global::Windows.Foundation.IAsyncOperation<global::Windows.ApplicationModel.DataTransfer.DataPackageOperation> DropAsync(IObjectReference _obj, global::Microsoft.UI.Input.DragDrop.DragInfo dragInfo)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __dragInfo = default;
            IntPtr __retval = default;
            try
            {
                __dragInfo = global::ABI.Microsoft.UI.Input.DragDrop.DragInfo.CreateMarshaler2(dragInfo);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__dragInfo), &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperation_1_Windows_ApplicationModel_DataTransfer_DataPackageOperation.EnsureInitialized();
                return MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Windows.ApplicationModel.DataTransfer.DataPackageOperation>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__dragInfo);
                MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Windows.ApplicationModel.DataTransfer.DataPackageOperation>>.DisposeAbi(__retval);
            }
        }

        public static unsafe global::Windows.Foundation.IAsyncOperation<global::Windows.ApplicationModel.DataTransfer.DataPackageOperation> EnterAsync(IObjectReference _obj, global::Microsoft.UI.Input.DragDrop.DragInfo dragInfo, global::Microsoft.UI.Input.DragDrop.DragUIOverride dragUIOverride)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __dragInfo = default;
            ObjectReferenceValue __dragUIOverride = default;
            IntPtr __retval = default;
            try
            {
                __dragInfo = global::ABI.Microsoft.UI.Input.DragDrop.DragInfo.CreateMarshaler2(dragInfo);
                __dragUIOverride = global::ABI.Microsoft.UI.Input.DragDrop.DragUIOverride.CreateMarshaler2(dragUIOverride);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, MarshalInspectable<object>.GetAbi(__dragInfo), MarshalInspectable<object>.GetAbi(__dragUIOverride), &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperation_1_Windows_ApplicationModel_DataTransfer_DataPackageOperation.EnsureInitialized();
                return MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Windows.ApplicationModel.DataTransfer.DataPackageOperation>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__dragInfo);
                MarshalInspectable<object>.DisposeMarshaler(__dragUIOverride);
                MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Windows.ApplicationModel.DataTransfer.DataPackageOperation>>.DisposeAbi(__retval);
            }
        }

        public static unsafe global::Windows.Foundation.IAsyncAction LeaveAsync(IObjectReference _obj, global::Microsoft.UI.Input.DragDrop.DragInfo dragInfo)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __dragInfo = default;
            IntPtr __retval = default;
            try
            {
                __dragInfo = global::ABI.Microsoft.UI.Input.DragDrop.DragInfo.CreateMarshaler2(dragInfo);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, MarshalInspectable<object>.GetAbi(__dragInfo), &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInterface<global::Windows.Foundation.IAsyncAction>.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__dragInfo);
                MarshalInterface<global::Windows.Foundation.IAsyncAction>.DisposeAbi(__retval);
            }
        }

        public static unsafe global::Windows.Foundation.IAsyncOperation<global::Windows.ApplicationModel.DataTransfer.DataPackageOperation> OverAsync(IObjectReference _obj, global::Microsoft.UI.Input.DragDrop.DragInfo dragInfo, global::Microsoft.UI.Input.DragDrop.DragUIOverride dragUIOverride)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __dragInfo = default;
            ObjectReferenceValue __dragUIOverride = default;
            IntPtr __retval = default;
            try
            {
                __dragInfo = global::ABI.Microsoft.UI.Input.DragDrop.DragInfo.CreateMarshaler2(dragInfo);
                __dragUIOverride = global::ABI.Microsoft.UI.Input.DragDrop.DragUIOverride.CreateMarshaler2(dragUIOverride);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, IntPtr*, int>**)ThisPtr)[9](ThisPtr, MarshalInspectable<object>.GetAbi(__dragInfo), MarshalInspectable<object>.GetAbi(__dragUIOverride), &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperation_1_Windows_ApplicationModel_DataTransfer_DataPackageOperation.EnsureInitialized();
                return MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Windows.ApplicationModel.DataTransfer.DataPackageOperation>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__dragInfo);
                MarshalInspectable<object>.DisposeMarshaler(__dragUIOverride);
                MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Windows.ApplicationModel.DataTransfer.DataPackageOperation>>.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xD9, 0x7, 0x27, 0x1C, 0x65, 0x0, 0xC7, 0x53, 0xBB, 0xFB, 0x50, 0x85, 0x3, 0x78, 0xCA, 0xF3 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

        public static global::System.IntPtr AbiToProjectionVftablePtr => IDropOperationTarget.AbiToProjectionVftablePtr;

    }
    [DynamicInterfaceCastableImplementation]
    [Guid("1C2707D9-0065-53C7-BBFB-50850378CAF3")]
    internal unsafe interface IDropOperationTarget : global::Microsoft.UI.Input.DragDrop.IDropOperationTarget
    {

        public static readonly IntPtr AbiToProjectionVftablePtr;
        static unsafe IDropOperationTarget()
        {
            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(IDropOperationTarget), sizeof(IInspectable.Vftbl) + sizeof(IntPtr) * 4);
            *(IInspectable.Vftbl*)AbiToProjectionVftablePtr = IInspectable.Vftbl.AbiToProjectionVftable;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>*)AbiToProjectionVftablePtr)[6] = &Do_Abi_DropAsync_0;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, IntPtr*, int>*)AbiToProjectionVftablePtr)[7] = &Do_Abi_EnterAsync_1;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>*)AbiToProjectionVftablePtr)[8] = &Do_Abi_LeaveAsync_2;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, IntPtr*, int>*)AbiToProjectionVftablePtr)[9] = &Do_Abi_OverAsync_3;
        }

        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_DropAsync_0(IntPtr thisPtr, IntPtr dragInfo, IntPtr* operation)
        {
            _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperation_1_Windows_ApplicationModel_DataTransfer_DataPackageOperation.EnsureInitialized();

            global::Windows.Foundation.IAsyncOperation<global::Windows.ApplicationModel.DataTransfer.DataPackageOperation> __operation = default;

            *operation = default;

            try
            {
                __operation = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Input.DragDrop.IDropOperationTarget>(thisPtr).DropAsync(global::ABI.Microsoft.UI.Input.DragDrop.DragInfo.FromAbi(dragInfo));
                *operation = MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Windows.ApplicationModel.DataTransfer.DataPackageOperation>>.FromManaged(__operation);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_EnterAsync_1(IntPtr thisPtr, IntPtr dragInfo, IntPtr dragUIOverride, IntPtr* operation)
        {
            _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperation_1_Windows_ApplicationModel_DataTransfer_DataPackageOperation.EnsureInitialized();

            global::Windows.Foundation.IAsyncOperation<global::Windows.ApplicationModel.DataTransfer.DataPackageOperation> __operation = default;

            *operation = default;

            try
            {
                __operation = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Input.DragDrop.IDropOperationTarget>(thisPtr).EnterAsync(global::ABI.Microsoft.UI.Input.DragDrop.DragInfo.FromAbi(dragInfo), global::ABI.Microsoft.UI.Input.DragDrop.DragUIOverride.FromAbi(dragUIOverride));
                *operation = MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Windows.ApplicationModel.DataTransfer.DataPackageOperation>>.FromManaged(__operation);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_LeaveAsync_2(IntPtr thisPtr, IntPtr dragInfo, IntPtr* operation)
        {

            global::Windows.Foundation.IAsyncAction __operation = default;

            *operation = default;

            try
            {
                __operation = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Input.DragDrop.IDropOperationTarget>(thisPtr).LeaveAsync(global::ABI.Microsoft.UI.Input.DragDrop.DragInfo.FromAbi(dragInfo));
                *operation = MarshalInterface<global::Windows.Foundation.IAsyncAction>.FromManaged(__operation);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_OverAsync_3(IntPtr thisPtr, IntPtr dragInfo, IntPtr dragUIOverride, IntPtr* operation)
        {
            _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperation_1_Windows_ApplicationModel_DataTransfer_DataPackageOperation.EnsureInitialized();

            global::Windows.Foundation.IAsyncOperation<global::Windows.ApplicationModel.DataTransfer.DataPackageOperation> __operation = default;

            *operation = default;

            try
            {
                __operation = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Input.DragDrop.IDropOperationTarget>(thisPtr).OverAsync(global::ABI.Microsoft.UI.Input.DragDrop.DragInfo.FromAbi(dragInfo), global::ABI.Microsoft.UI.Input.DragDrop.DragUIOverride.FromAbi(dragUIOverride));
                *operation = MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Windows.ApplicationModel.DataTransfer.DataPackageOperation>>.FromManaged(__operation);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }

        unsafe global::Windows.Foundation.IAsyncOperation<global::Windows.ApplicationModel.DataTransfer.DataPackageOperation> global::Microsoft.UI.Input.DragDrop.IDropOperationTarget.DropAsync(global::Microsoft.UI.Input.DragDrop.DragInfo dragInfo)
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Input.DragDrop.IDropOperationTarget).TypeHandle));
            return global::ABI.Microsoft.UI.Input.DragDrop.IDropOperationTargetMethods.DropAsync(_obj, dragInfo);
        }

        unsafe global::Windows.Foundation.IAsyncOperation<global::Windows.ApplicationModel.DataTransfer.DataPackageOperation> global::Microsoft.UI.Input.DragDrop.IDropOperationTarget.EnterAsync(global::Microsoft.UI.Input.DragDrop.DragInfo dragInfo, global::Microsoft.UI.Input.DragDrop.DragUIOverride dragUIOverride)
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Input.DragDrop.IDropOperationTarget).TypeHandle));
            return global::ABI.Microsoft.UI.Input.DragDrop.IDropOperationTargetMethods.EnterAsync(_obj, dragInfo, dragUIOverride);
        }

        unsafe global::Windows.Foundation.IAsyncAction global::Microsoft.UI.Input.DragDrop.IDropOperationTarget.LeaveAsync(global::Microsoft.UI.Input.DragDrop.DragInfo dragInfo)
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Input.DragDrop.IDropOperationTarget).TypeHandle));
            return global::ABI.Microsoft.UI.Input.DragDrop.IDropOperationTargetMethods.LeaveAsync(_obj, dragInfo);
        }

        unsafe global::Windows.Foundation.IAsyncOperation<global::Windows.ApplicationModel.DataTransfer.DataPackageOperation> global::Microsoft.UI.Input.DragDrop.IDropOperationTarget.OverAsync(global::Microsoft.UI.Input.DragDrop.DragInfo dragInfo, global::Microsoft.UI.Input.DragDrop.DragUIOverride dragUIOverride)
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Input.DragDrop.IDropOperationTarget).TypeHandle));
            return global::ABI.Microsoft.UI.Input.DragDrop.IDropOperationTargetMethods.OverAsync(_obj, dragInfo, dragUIOverride);
        }
    }

    internal static class IDropOperationTargetRequestedEventArgsMethods
    {


        internal static unsafe void SetTarget(IObjectReference _obj, global::Microsoft.UI.Input.DragDrop.IDropOperationTarget target)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __target = default;
            try
            {
                __target = MarshalInterface<global::Microsoft.UI.Input.DragDrop.IDropOperationTarget>.CreateMarshaler2(target, global::ABI.Microsoft.UI.Input.DragDrop.IDropOperationTargetMethods.IID);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[6](ThisPtr, MarshalInspectable<object>.GetAbi(__target)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__target);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x62, 0x5B, 0x1C, 0xF6, 0xE, 0x72, 0xFF, 0x59, 0xAD, 0xB, 0xE7, 0x7F, 0xC5, 0xB8, 0xA4, 0xA3 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("F61C5B62-720E-59FF-AD0B-E77FC5B8A4A3")]
    internal interface IDropOperationTargetRequestedEventArgs : global::Microsoft.UI.Input.DragDrop.IDropOperationTargetRequestedEventArgs
    {
    }
}
#pragma warning restore CA1416
