//------------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by cswinrt.exe version 2.2.0.241111.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq.Expressions;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using WinRT;
using WinRT.Interop;


#pragma warning disable 0169 // warning CS0169: The field '...' is never used
#pragma warning disable 0649 // warning CS0169: Field '...' is never assigned to
#pragma warning disable CA2207, CA1063, CA1033, CA1001, CA2213

namespace Microsoft.Windows.Storage.Pickers
{
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.Storage.Pickers")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.Storage.Pickers.FileOpenPicker))]
    [global::ABI.Microsoft.Windows.Storage.Pickers.FileOpenPickerRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IFileOpenPicker))]
    [global::Windows.Foundation.Metadata.Experimental]
    public sealed class FileOpenPicker : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<FileOpenPicker>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_Windows_Storage_Pickers_IFileOpenPicker => _inner;


        private static class _IFileOpenPickerFactoryMethods
        {
            public static unsafe IntPtr CreateInstance(IObjectReference _obj, global::Microsoft.UI.WindowId windowId)
            {
                var ThisPtr = _obj.ThisPtr;

                IntPtr __retval = default;
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.WindowId, IntPtr*, int>**)ThisPtr)[6](ThisPtr, windowId, &__retval));
                global::System.GC.KeepAlive(_obj);
                return __retval;
            }
        }

        private static volatile IObjectReference ___objRef_global__Microsoft_Windows_Storage_Pickers_IFileOpenPickerFactory;
        private static IObjectReference _objRef_global__Microsoft_Windows_Storage_Pickers_IFileOpenPickerFactory
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_Windows_Storage_Pickers_IFileOpenPickerFactory;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_Windows_Storage_Pickers_IFileOpenPickerFactory = ActivationFactory.Get("Microsoft.Windows.Storage.Pickers.FileOpenPicker", global::ABI.Microsoft.Windows.Storage.Pickers.IFileOpenPickerFactoryMethods.IID);
                }
            }
        }

        public FileOpenPicker(global::Microsoft.UI.WindowId windowId) 
        { 
        IntPtr ptr = (_IFileOpenPickerFactoryMethods.CreateInstance(_objRef_global__Microsoft_Windows_Storage_Pickers_IFileOpenPickerFactory, windowId)); 
        try 
        { 
        _inner = ComWrappersSupport.GetObjectReferenceForInterface(ptr, global::ABI.Microsoft.Windows.Storage.Pickers.IFileOpenPickerMethods.IID, false); 

        } 
        finally 
        { 
        MarshalInspectable<object>.DisposeAbi(ptr); 
        }

        ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
        ComWrappersHelper.Init(_inner, false);
        }

        public static FileOpenPicker FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<FileOpenPicker>.FromAbi(thisPtr);
        }

        internal FileOpenPicker(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.Windows.Storage.Pickers.IFileOpenPickerMethods.IID);

        }


        public static bool operator ==(FileOpenPicker x, FileOpenPicker y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(FileOpenPicker x, FileOpenPicker y) => !(x == y);
        public bool Equals(FileOpenPicker other) => this == other;
        public override bool Equals(object obj) => obj is FileOpenPicker that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public global::Windows.Foundation.IAsyncOperation<PickFileResult> PickSingleFileAsync() => global::ABI.Microsoft.Windows.Storage.Pickers.IFileOpenPickerMethods.PickSingleFileAsync(_objRef_global__Microsoft_Windows_Storage_Pickers_IFileOpenPicker);

        public global::Windows.Foundation.IAsyncOperation<global::System.Collections.Generic.IReadOnlyList<PickFileResult>> PickMultipleFilesAsync() => global::ABI.Microsoft.Windows.Storage.Pickers.IFileOpenPickerMethods.PickMultipleFilesAsync(_objRef_global__Microsoft_Windows_Storage_Pickers_IFileOpenPicker);

        public string CommitButtonText
        {
            get => global::ABI.Microsoft.Windows.Storage.Pickers.IFileOpenPickerMethods.get_CommitButtonText(_objRef_global__Microsoft_Windows_Storage_Pickers_IFileOpenPicker);
            set => global::ABI.Microsoft.Windows.Storage.Pickers.IFileOpenPickerMethods.set_CommitButtonText(_objRef_global__Microsoft_Windows_Storage_Pickers_IFileOpenPicker, value);
        }

        public global::System.Collections.Generic.IList<string> FileTypeFilter => global::ABI.Microsoft.Windows.Storage.Pickers.IFileOpenPickerMethods.get_FileTypeFilter(_objRef_global__Microsoft_Windows_Storage_Pickers_IFileOpenPicker);

        public string SettingsIdentifier
        {
            get => global::ABI.Microsoft.Windows.Storage.Pickers.IFileOpenPickerMethods.get_SettingsIdentifier(_objRef_global__Microsoft_Windows_Storage_Pickers_IFileOpenPicker);
            set => global::ABI.Microsoft.Windows.Storage.Pickers.IFileOpenPickerMethods.set_SettingsIdentifier(_objRef_global__Microsoft_Windows_Storage_Pickers_IFileOpenPicker, value);
        }

        public PickerLocationId SuggestedStartLocation
        {
            get => global::ABI.Microsoft.Windows.Storage.Pickers.IFileOpenPickerMethods.get_SuggestedStartLocation(_objRef_global__Microsoft_Windows_Storage_Pickers_IFileOpenPicker);
            set => global::ABI.Microsoft.Windows.Storage.Pickers.IFileOpenPickerMethods.set_SuggestedStartLocation(_objRef_global__Microsoft_Windows_Storage_Pickers_IFileOpenPicker, value);
        }

        public PickerViewMode ViewMode
        {
            get => global::ABI.Microsoft.Windows.Storage.Pickers.IFileOpenPickerMethods.get_ViewMode(_objRef_global__Microsoft_Windows_Storage_Pickers_IFileOpenPicker);
            set => global::ABI.Microsoft.Windows.Storage.Pickers.IFileOpenPickerMethods.set_ViewMode(_objRef_global__Microsoft_Windows_Storage_Pickers_IFileOpenPicker, value);
        }

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.Storage.Pickers")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.Storage.Pickers.FileSavePicker))]
    [global::ABI.Microsoft.Windows.Storage.Pickers.FileSavePickerRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IFileSavePicker))]
    [global::Windows.Foundation.Metadata.Experimental]
    public sealed class FileSavePicker : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<FileSavePicker>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_Windows_Storage_Pickers_IFileSavePicker => _inner;


        private static class _IFileSavePickerFactoryMethods
        {
            public static unsafe IntPtr CreateInstance(IObjectReference _obj, global::Microsoft.UI.WindowId windowId)
            {
                var ThisPtr = _obj.ThisPtr;

                IntPtr __retval = default;
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.WindowId, IntPtr*, int>**)ThisPtr)[6](ThisPtr, windowId, &__retval));
                global::System.GC.KeepAlive(_obj);
                return __retval;
            }
        }

        private static volatile IObjectReference ___objRef_global__Microsoft_Windows_Storage_Pickers_IFileSavePickerFactory;
        private static IObjectReference _objRef_global__Microsoft_Windows_Storage_Pickers_IFileSavePickerFactory
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_Windows_Storage_Pickers_IFileSavePickerFactory;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_Windows_Storage_Pickers_IFileSavePickerFactory = ActivationFactory.Get("Microsoft.Windows.Storage.Pickers.FileSavePicker", global::ABI.Microsoft.Windows.Storage.Pickers.IFileSavePickerFactoryMethods.IID);
                }
            }
        }

        public FileSavePicker(global::Microsoft.UI.WindowId windowId) 
        { 
        IntPtr ptr = (_IFileSavePickerFactoryMethods.CreateInstance(_objRef_global__Microsoft_Windows_Storage_Pickers_IFileSavePickerFactory, windowId)); 
        try 
        { 
        _inner = ComWrappersSupport.GetObjectReferenceForInterface(ptr, global::ABI.Microsoft.Windows.Storage.Pickers.IFileSavePickerMethods.IID, false); 

        } 
        finally 
        { 
        MarshalInspectable<object>.DisposeAbi(ptr); 
        }

        ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
        ComWrappersHelper.Init(_inner, false);
        }

        public static FileSavePicker FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<FileSavePicker>.FromAbi(thisPtr);
        }

        internal FileSavePicker(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.Windows.Storage.Pickers.IFileSavePickerMethods.IID);

        }


        public static bool operator ==(FileSavePicker x, FileSavePicker y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(FileSavePicker x, FileSavePicker y) => !(x == y);
        public bool Equals(FileSavePicker other) => this == other;
        public override bool Equals(object obj) => obj is FileSavePicker that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public global::Windows.Foundation.IAsyncOperation<PickFileResult> PickSaveFileAsync() => global::ABI.Microsoft.Windows.Storage.Pickers.IFileSavePickerMethods.PickSaveFileAsync(_objRef_global__Microsoft_Windows_Storage_Pickers_IFileSavePicker);

        public string CommitButtonText
        {
            get => global::ABI.Microsoft.Windows.Storage.Pickers.IFileSavePickerMethods.get_CommitButtonText(_objRef_global__Microsoft_Windows_Storage_Pickers_IFileSavePicker);
            set => global::ABI.Microsoft.Windows.Storage.Pickers.IFileSavePickerMethods.set_CommitButtonText(_objRef_global__Microsoft_Windows_Storage_Pickers_IFileSavePicker, value);
        }

        public string DefaultFileExtension
        {
            get => global::ABI.Microsoft.Windows.Storage.Pickers.IFileSavePickerMethods.get_DefaultFileExtension(_objRef_global__Microsoft_Windows_Storage_Pickers_IFileSavePicker);
            set => global::ABI.Microsoft.Windows.Storage.Pickers.IFileSavePickerMethods.set_DefaultFileExtension(_objRef_global__Microsoft_Windows_Storage_Pickers_IFileSavePicker, value);
        }

        public global::System.Collections.Generic.IDictionary<string, global::System.Collections.Generic.IList<string>> FileTypeChoices => global::ABI.Microsoft.Windows.Storage.Pickers.IFileSavePickerMethods.get_FileTypeChoices(_objRef_global__Microsoft_Windows_Storage_Pickers_IFileSavePicker);

        public string SettingsIdentifier
        {
            get => global::ABI.Microsoft.Windows.Storage.Pickers.IFileSavePickerMethods.get_SettingsIdentifier(_objRef_global__Microsoft_Windows_Storage_Pickers_IFileSavePicker);
            set => global::ABI.Microsoft.Windows.Storage.Pickers.IFileSavePickerMethods.set_SettingsIdentifier(_objRef_global__Microsoft_Windows_Storage_Pickers_IFileSavePicker, value);
        }

        public string SuggestedFileName
        {
            get => global::ABI.Microsoft.Windows.Storage.Pickers.IFileSavePickerMethods.get_SuggestedFileName(_objRef_global__Microsoft_Windows_Storage_Pickers_IFileSavePicker);
            set => global::ABI.Microsoft.Windows.Storage.Pickers.IFileSavePickerMethods.set_SuggestedFileName(_objRef_global__Microsoft_Windows_Storage_Pickers_IFileSavePicker, value);
        }

        public global::Windows.Storage.StorageFile SuggestedSaveFile
        {
            get => global::ABI.Microsoft.Windows.Storage.Pickers.IFileSavePickerMethods.get_SuggestedSaveFile(_objRef_global__Microsoft_Windows_Storage_Pickers_IFileSavePicker);
            set => global::ABI.Microsoft.Windows.Storage.Pickers.IFileSavePickerMethods.set_SuggestedSaveFile(_objRef_global__Microsoft_Windows_Storage_Pickers_IFileSavePicker, value);
        }

        public PickerLocationId SuggestedStartLocation
        {
            get => global::ABI.Microsoft.Windows.Storage.Pickers.IFileSavePickerMethods.get_SuggestedStartLocation(_objRef_global__Microsoft_Windows_Storage_Pickers_IFileSavePicker);
            set => global::ABI.Microsoft.Windows.Storage.Pickers.IFileSavePickerMethods.set_SuggestedStartLocation(_objRef_global__Microsoft_Windows_Storage_Pickers_IFileSavePicker, value);
        }

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.Storage.Pickers")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.Storage.Pickers.FolderPicker))]
    [global::ABI.Microsoft.Windows.Storage.Pickers.FolderPickerRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IFolderPicker))]
    [global::Windows.Foundation.Metadata.Experimental]
    public sealed class FolderPicker : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<FolderPicker>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_Windows_Storage_Pickers_IFolderPicker => _inner;


        private static class _IFolderPickerFactoryMethods
        {
            public static unsafe IntPtr CreateInstance(IObjectReference _obj, global::Microsoft.UI.WindowId windowId)
            {
                var ThisPtr = _obj.ThisPtr;

                IntPtr __retval = default;
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.WindowId, IntPtr*, int>**)ThisPtr)[6](ThisPtr, windowId, &__retval));
                global::System.GC.KeepAlive(_obj);
                return __retval;
            }
        }

        private static volatile IObjectReference ___objRef_global__Microsoft_Windows_Storage_Pickers_IFolderPickerFactory;
        private static IObjectReference _objRef_global__Microsoft_Windows_Storage_Pickers_IFolderPickerFactory
        {
            get
            { 
                var factory = ___objRef_global__Microsoft_Windows_Storage_Pickers_IFolderPickerFactory;
                if (factory != null && factory.IsInCurrentContext)
                {
                    return factory;
                }
                else
                {
                    return ___objRef_global__Microsoft_Windows_Storage_Pickers_IFolderPickerFactory = ActivationFactory.Get("Microsoft.Windows.Storage.Pickers.FolderPicker", global::ABI.Microsoft.Windows.Storage.Pickers.IFolderPickerFactoryMethods.IID);
                }
            }
        }

        public FolderPicker(global::Microsoft.UI.WindowId windowId) 
        { 
        IntPtr ptr = (_IFolderPickerFactoryMethods.CreateInstance(_objRef_global__Microsoft_Windows_Storage_Pickers_IFolderPickerFactory, windowId)); 
        try 
        { 
        _inner = ComWrappersSupport.GetObjectReferenceForInterface(ptr, global::ABI.Microsoft.Windows.Storage.Pickers.IFolderPickerMethods.IID, false); 

        } 
        finally 
        { 
        MarshalInspectable<object>.DisposeAbi(ptr); 
        }

        ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
        ComWrappersHelper.Init(_inner, false);
        }

        public static FolderPicker FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<FolderPicker>.FromAbi(thisPtr);
        }

        internal FolderPicker(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.Windows.Storage.Pickers.IFolderPickerMethods.IID);

        }


        public static bool operator ==(FolderPicker x, FolderPicker y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(FolderPicker x, FolderPicker y) => !(x == y);
        public bool Equals(FolderPicker other) => this == other;
        public override bool Equals(object obj) => obj is FolderPicker that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public global::Windows.Foundation.IAsyncOperation<PickFolderResult> PickSingleFolderAsync() => global::ABI.Microsoft.Windows.Storage.Pickers.IFolderPickerMethods.PickSingleFolderAsync(_objRef_global__Microsoft_Windows_Storage_Pickers_IFolderPicker);

        public string CommitButtonText
        {
            get => global::ABI.Microsoft.Windows.Storage.Pickers.IFolderPickerMethods.get_CommitButtonText(_objRef_global__Microsoft_Windows_Storage_Pickers_IFolderPicker);
            set => global::ABI.Microsoft.Windows.Storage.Pickers.IFolderPickerMethods.set_CommitButtonText(_objRef_global__Microsoft_Windows_Storage_Pickers_IFolderPicker, value);
        }

        public global::System.Collections.Generic.IList<string> FileTypeFilter => global::ABI.Microsoft.Windows.Storage.Pickers.IFolderPickerMethods.get_FileTypeFilter(_objRef_global__Microsoft_Windows_Storage_Pickers_IFolderPicker);

        public string SettingsIdentifier
        {
            get => global::ABI.Microsoft.Windows.Storage.Pickers.IFolderPickerMethods.get_SettingsIdentifier(_objRef_global__Microsoft_Windows_Storage_Pickers_IFolderPicker);
            set => global::ABI.Microsoft.Windows.Storage.Pickers.IFolderPickerMethods.set_SettingsIdentifier(_objRef_global__Microsoft_Windows_Storage_Pickers_IFolderPicker, value);
        }

        public PickerLocationId SuggestedStartLocation
        {
            get => global::ABI.Microsoft.Windows.Storage.Pickers.IFolderPickerMethods.get_SuggestedStartLocation(_objRef_global__Microsoft_Windows_Storage_Pickers_IFolderPicker);
            set => global::ABI.Microsoft.Windows.Storage.Pickers.IFolderPickerMethods.set_SuggestedStartLocation(_objRef_global__Microsoft_Windows_Storage_Pickers_IFolderPicker, value);
        }

        public PickerViewMode ViewMode
        {
            get => global::ABI.Microsoft.Windows.Storage.Pickers.IFolderPickerMethods.get_ViewMode(_objRef_global__Microsoft_Windows_Storage_Pickers_IFolderPicker);
            set => global::ABI.Microsoft.Windows.Storage.Pickers.IFolderPickerMethods.set_ViewMode(_objRef_global__Microsoft_Windows_Storage_Pickers_IFolderPicker, value);
        }

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.Storage.Pickers")][Guid("8B16E6B5-250E-55BE-9BAE-FED3640B062E")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.Storage.Pickers.IFileOpenPicker))]
    [global::Windows.Foundation.Metadata.Experimental]
    internal interface IFileOpenPicker
    {
        global::Windows.Foundation.IAsyncOperation<PickFileResult> PickSingleFileAsync();
        global::Windows.Foundation.IAsyncOperation<global::System.Collections.Generic.IReadOnlyList<PickFileResult>> PickMultipleFilesAsync();
        string CommitButtonText { get; set; }
        global::System.Collections.Generic.IList<string> FileTypeFilter { get; }
        string SettingsIdentifier { get; set; }
        PickerLocationId SuggestedStartLocation { get; set; }
        PickerViewMode ViewMode { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.Storage.Pickers")][Guid("315E86D7-D7A2-5D81-B379-7AF78207B1AF")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.Storage.Pickers.IFileOpenPickerFactory))]
    [global::Windows.Foundation.Metadata.Experimental]
    internal interface IFileOpenPickerFactory
    {
        FileOpenPicker CreateInstance(global::Microsoft.UI.WindowId windowId);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.Storage.Pickers")][Guid("C1E6D3D3-0880-50AE-BDCC-20B8AE6A7AF6")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.Storage.Pickers.IFileSavePicker))]
    [global::Windows.Foundation.Metadata.Experimental]
    internal interface IFileSavePicker
    {
        global::Windows.Foundation.IAsyncOperation<PickFileResult> PickSaveFileAsync();
        string CommitButtonText { get; set; }
        string DefaultFileExtension { get; set; }
        global::System.Collections.Generic.IDictionary<string, global::System.Collections.Generic.IList<string>> FileTypeChoices { get; }
        string SettingsIdentifier { get; set; }
        string SuggestedFileName { get; set; }
        global::Windows.Storage.StorageFile SuggestedSaveFile { get; set; }
        PickerLocationId SuggestedStartLocation { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.Storage.Pickers")][Guid("2E256696-30B6-5A05-A8F5-C752DB6DD268")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.Storage.Pickers.IFileSavePickerFactory))]
    [global::Windows.Foundation.Metadata.Experimental]
    internal interface IFileSavePickerFactory
    {
        FileSavePicker CreateInstance(global::Microsoft.UI.WindowId windowId);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.Storage.Pickers")][Guid("01C5BB98-CFB8-52F5-9994-E94EF1A734D8")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.Storage.Pickers.IFolderPicker))]
    [global::Windows.Foundation.Metadata.Experimental]
    internal interface IFolderPicker
    {
        global::Windows.Foundation.IAsyncOperation<PickFolderResult> PickSingleFolderAsync();
        string CommitButtonText { get; set; }
        global::System.Collections.Generic.IList<string> FileTypeFilter { get; }
        string SettingsIdentifier { get; set; }
        PickerLocationId SuggestedStartLocation { get; set; }
        PickerViewMode ViewMode { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.Storage.Pickers")][Guid("E1550D89-B389-5886-8395-022B1588D6A8")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.Storage.Pickers.IFolderPickerFactory))]
    [global::Windows.Foundation.Metadata.Experimental]
    internal interface IFolderPickerFactory
    {
        FolderPicker CreateInstance(global::Microsoft.UI.WindowId windowId);
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.Storage.Pickers")][Guid("E6F2E3D6-7BB0-5D81-9E7D-6FD35A1F25AB")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.Storage.Pickers.IPickFileResult))]
    [global::Windows.Foundation.Metadata.Experimental]
    internal interface IPickFileResult
    {
        string Path { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.Storage.Pickers")][Guid("6F7FD316-FE29-59D1-9343-C49CF5CDE680")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.Storage.Pickers.IPickFolderResult))]
    [global::Windows.Foundation.Metadata.Experimental]
    internal interface IPickFolderResult
    {
        string Path { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.Storage.Pickers")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.Storage.Pickers.PickFileResult))]
    [global::ABI.Microsoft.Windows.Storage.Pickers.PickFileResultRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IPickFileResult))]
    [global::Windows.Foundation.Metadata.Experimental]
    public sealed class PickFileResult : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<PickFileResult>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_Windows_Storage_Pickers_IPickFileResult => _inner;


        public static PickFileResult FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<PickFileResult>.FromAbi(thisPtr);
        }

        internal PickFileResult(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.Windows.Storage.Pickers.IPickFileResultMethods.IID);

        }


        public static bool operator ==(PickFileResult x, PickFileResult y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(PickFileResult x, PickFileResult y) => !(x == y);
        public bool Equals(PickFileResult other) => this == other;
        public override bool Equals(object obj) => obj is PickFileResult that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public string Path => global::ABI.Microsoft.Windows.Storage.Pickers.IPickFileResultMethods.get_Path(_objRef_global__Microsoft_Windows_Storage_Pickers_IPickFileResult);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.Storage.Pickers")]
    [global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.Windows.Storage.Pickers.PickFolderResult))]
    [global::ABI.Microsoft.Windows.Storage.Pickers.PickFolderResultRcwFactory]
    [global::WinRT.ProjectedRuntimeClass(typeof(IPickFolderResult))]
    [global::Windows.Foundation.Metadata.Experimental]
    public sealed class PickFolderResult : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<PickFolderResult>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private readonly IObjectReference _inner = null;



        private IObjectReference _objRef_global__Microsoft_Windows_Storage_Pickers_IPickFolderResult => _inner;


        public static PickFolderResult FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<PickFolderResult>.FromAbi(thisPtr);
        }

        internal PickFolderResult(IObjectReference objRef)
        {
            _inner = objRef.As(global::ABI.Microsoft.Windows.Storage.Pickers.IPickFolderResultMethods.IID);

        }


        public static bool operator ==(PickFolderResult x, PickFolderResult y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(PickFolderResult x, PickFolderResult y) => !(x == y);
        public bool Equals(PickFolderResult other) => this == other;
        public override bool Equals(object obj) => obj is PickFolderResult that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();


        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
            return _queryInterfaceCache;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
        private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
        private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
            return _additionalTypeData;
        }
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();

        private struct InterfaceTag<I>{};


        public string Path => global::ABI.Microsoft.Windows.Storage.Pickers.IPickFolderResultMethods.get_Path(_objRef_global__Microsoft_Windows_Storage_Pickers_IPickFolderResult);

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || global::WinRT.Interop.IID.IID_IInspectable == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs(iid, out ppv) >= 0)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.Storage.Pickers")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<PickerLocationId>))][global::Windows.Foundation.Metadata.Experimental]
    public enum PickerLocationId : int
    {
        DocumentsLibrary = unchecked((int)0),
        ComputerFolder = unchecked((int)0x1),
        Desktop = unchecked((int)0x2),
        Downloads = unchecked((int)0x3),
        HomeGroup = unchecked((int)0x4),
        MusicLibrary = unchecked((int)0x5),
        PicturesLibrary = unchecked((int)0x6),
        VideosLibrary = unchecked((int)0x7),
        Objects3D = unchecked((int)0x8),
        Unspecified = unchecked((int)0x9),
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.Windows.Storage.Pickers")][global::WinRT.WinRTExposedType(typeof(global::WinRT.EnumTypeDetails<PickerViewMode>))][global::Windows.Foundation.Metadata.Experimental]
    public enum PickerViewMode : int
    {
        List = unchecked((int)0),
        Thumbnail = unchecked((int)0x1),
    }
}

#pragma warning disable CA1416
namespace ABI.Microsoft.Windows.Storage.Pickers
{
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct FileOpenPicker
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.Windows.Storage.Pickers.FileOpenPicker obj) => obj is null ? null : MarshalInspectable<global::Microsoft.Windows.Storage.Pickers.FileOpenPicker>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.Windows.Storage.Pickers.IFileOpenPickerMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.Windows.Storage.Pickers.FileOpenPicker obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.Windows.Storage.Pickers.IFileOpenPickerMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.Windows.Storage.Pickers.FileOpenPicker FromAbi(IntPtr thisPtr) => global::Microsoft.Windows.Storage.Pickers.FileOpenPicker.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.Windows.Storage.Pickers.FileOpenPicker obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.Windows.Storage.Pickers.FileOpenPicker>.MarshalerArray CreateMarshalerArray(global::Microsoft.Windows.Storage.Pickers.FileOpenPicker[] array) => MarshalInterfaceHelper<global::Microsoft.Windows.Storage.Pickers.FileOpenPicker>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Windows.Storage.Pickers.FileOpenPicker>.GetAbiArray(box);
        public static unsafe global::Microsoft.Windows.Storage.Pickers.FileOpenPicker[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Windows.Storage.Pickers.FileOpenPicker>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.Windows.Storage.Pickers.FileOpenPicker[] array, object box) => MarshalInterfaceHelper<global::Microsoft.Windows.Storage.Pickers.FileOpenPicker>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.Windows.Storage.Pickers.FileOpenPicker[] array) => MarshalInterfaceHelper<global::Microsoft.Windows.Storage.Pickers.FileOpenPicker>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.Windows.Storage.Pickers.FileOpenPicker>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.Windows.Storage.Pickers.FileOpenPicker>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class FileOpenPickerRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.Windows.Storage.Pickers.FileOpenPicker(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct FileSavePicker
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.Windows.Storage.Pickers.FileSavePicker obj) => obj is null ? null : MarshalInspectable<global::Microsoft.Windows.Storage.Pickers.FileSavePicker>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.Windows.Storage.Pickers.IFileSavePickerMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.Windows.Storage.Pickers.FileSavePicker obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.Windows.Storage.Pickers.IFileSavePickerMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.Windows.Storage.Pickers.FileSavePicker FromAbi(IntPtr thisPtr) => global::Microsoft.Windows.Storage.Pickers.FileSavePicker.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.Windows.Storage.Pickers.FileSavePicker obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.Windows.Storage.Pickers.FileSavePicker>.MarshalerArray CreateMarshalerArray(global::Microsoft.Windows.Storage.Pickers.FileSavePicker[] array) => MarshalInterfaceHelper<global::Microsoft.Windows.Storage.Pickers.FileSavePicker>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Windows.Storage.Pickers.FileSavePicker>.GetAbiArray(box);
        public static unsafe global::Microsoft.Windows.Storage.Pickers.FileSavePicker[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Windows.Storage.Pickers.FileSavePicker>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.Windows.Storage.Pickers.FileSavePicker[] array, object box) => MarshalInterfaceHelper<global::Microsoft.Windows.Storage.Pickers.FileSavePicker>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.Windows.Storage.Pickers.FileSavePicker[] array) => MarshalInterfaceHelper<global::Microsoft.Windows.Storage.Pickers.FileSavePicker>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.Windows.Storage.Pickers.FileSavePicker>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.Windows.Storage.Pickers.FileSavePicker>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class FileSavePickerRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.Windows.Storage.Pickers.FileSavePicker(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct FolderPicker
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.Windows.Storage.Pickers.FolderPicker obj) => obj is null ? null : MarshalInspectable<global::Microsoft.Windows.Storage.Pickers.FolderPicker>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.Windows.Storage.Pickers.IFolderPickerMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.Windows.Storage.Pickers.FolderPicker obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.Windows.Storage.Pickers.IFolderPickerMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.Windows.Storage.Pickers.FolderPicker FromAbi(IntPtr thisPtr) => global::Microsoft.Windows.Storage.Pickers.FolderPicker.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.Windows.Storage.Pickers.FolderPicker obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.Windows.Storage.Pickers.FolderPicker>.MarshalerArray CreateMarshalerArray(global::Microsoft.Windows.Storage.Pickers.FolderPicker[] array) => MarshalInterfaceHelper<global::Microsoft.Windows.Storage.Pickers.FolderPicker>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Windows.Storage.Pickers.FolderPicker>.GetAbiArray(box);
        public static unsafe global::Microsoft.Windows.Storage.Pickers.FolderPicker[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Windows.Storage.Pickers.FolderPicker>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.Windows.Storage.Pickers.FolderPicker[] array, object box) => MarshalInterfaceHelper<global::Microsoft.Windows.Storage.Pickers.FolderPicker>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.Windows.Storage.Pickers.FolderPicker[] array) => MarshalInterfaceHelper<global::Microsoft.Windows.Storage.Pickers.FolderPicker>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.Windows.Storage.Pickers.FolderPicker>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.Windows.Storage.Pickers.FolderPicker>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class FolderPickerRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.Windows.Storage.Pickers.FolderPicker(inspectable.ObjRef);
    }
    internal static class IFileOpenPickerMethods
    {


        internal static unsafe global::Windows.Foundation.IAsyncOperation<global::Microsoft.Windows.Storage.Pickers.PickFileResult> PickSingleFileAsync(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[15](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperation_1_Microsoft_Windows_Storage_Pickers_PickFileResult.EnsureInitialized();
                return MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Microsoft.Windows.Storage.Pickers.PickFileResult>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Microsoft.Windows.Storage.Pickers.PickFileResult>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe global::Windows.Foundation.IAsyncOperation<global::System.Collections.Generic.IReadOnlyList<global::Microsoft.Windows.Storage.Pickers.PickFileResult>> PickMultipleFilesAsync(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[16](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperation_1_Windows_Foundation_Collections_IVectorView_1_Microsoft_Windows_Storage_Pickers_PickFileResult_.EnsureInitialized();
                return MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::System.Collections.Generic.IReadOnlyList<global::Microsoft.Windows.Storage.Pickers.PickFileResult>>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::System.Collections.Generic.IReadOnlyList<global::Microsoft.Windows.Storage.Pickers.PickFileResult>>>.DisposeAbi(__retval);
            }
        }
        internal static unsafe string get_CommitButtonText(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[12](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_CommitButtonText(IObjectReference _obj, string value)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalString.Pinnable __value = new(value);
            fixed(void* ___value = __value)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[13](ThisPtr, MarshalString.GetAbi(ref __value)));
                global::System.GC.KeepAlive(_obj);
            }
        }

        internal static unsafe global::System.Collections.Generic.IList<string> get_FileTypeFilter(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[14](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IVector_1_String.EnsureInitialized();
                return MarshalInterface<global::System.Collections.Generic.IList<string>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Collections.Generic.IList<string>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe string get_SettingsIdentifier(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_SettingsIdentifier(IObjectReference _obj, string value)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalString.Pinnable __value = new(value);
            fixed(void* ___value = __value)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[9](ThisPtr, MarshalString.GetAbi(ref __value)));
                global::System.GC.KeepAlive(_obj);
            }
        }

        internal static unsafe global::Microsoft.Windows.Storage.Pickers.PickerLocationId get_SuggestedStartLocation(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.Windows.Storage.Pickers.PickerLocationId __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Windows.Storage.Pickers.PickerLocationId*, int>**)ThisPtr)[10](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_SuggestedStartLocation(IObjectReference _obj, global::Microsoft.Windows.Storage.Pickers.PickerLocationId value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Windows.Storage.Pickers.PickerLocationId, int>**)ThisPtr)[11](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.Windows.Storage.Pickers.PickerViewMode get_ViewMode(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.Windows.Storage.Pickers.PickerViewMode __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Windows.Storage.Pickers.PickerViewMode*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_ViewMode(IObjectReference _obj, global::Microsoft.Windows.Storage.Pickers.PickerViewMode value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Windows.Storage.Pickers.PickerViewMode, int>**)ThisPtr)[7](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xB5, 0xE6, 0x16, 0x8B, 0xE, 0x25, 0xBE, 0x55, 0x9B, 0xAE, 0xFE, 0xD3, 0x64, 0xB, 0x6, 0x2E };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("8B16E6B5-250E-55BE-9BAE-FED3640B062E")]
    internal interface IFileOpenPicker : global::Microsoft.Windows.Storage.Pickers.IFileOpenPicker
    {
    }
    internal static class IFileOpenPickerFactoryMethods
    {


        internal static unsafe global::Microsoft.Windows.Storage.Pickers.FileOpenPicker CreateInstance(IObjectReference _obj, global::Microsoft.UI.WindowId windowId)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.WindowId, IntPtr*, int>**)ThisPtr)[6](ThisPtr, windowId, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.Windows.Storage.Pickers.FileOpenPicker.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.Windows.Storage.Pickers.FileOpenPicker.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xD7, 0x86, 0x5E, 0x31, 0xA2, 0xD7, 0x81, 0x5D, 0xB3, 0x79, 0x7A, 0xF7, 0x82, 0x7, 0xB1, 0xAF };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("315E86D7-D7A2-5D81-B379-7AF78207B1AF")]
    internal interface IFileOpenPickerFactory : global::Microsoft.Windows.Storage.Pickers.IFileOpenPickerFactory
    {
    }
    internal static class IFileSavePickerMethods
    {


        internal static unsafe global::Windows.Foundation.IAsyncOperation<global::Microsoft.Windows.Storage.Pickers.PickFileResult> PickSaveFileAsync(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[19](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperation_1_Microsoft_Windows_Storage_Pickers_PickFileResult.EnsureInitialized();
                return MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Microsoft.Windows.Storage.Pickers.PickFileResult>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Microsoft.Windows.Storage.Pickers.PickFileResult>>.DisposeAbi(__retval);
            }
        }
        internal static unsafe string get_CommitButtonText(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[10](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_CommitButtonText(IObjectReference _obj, string value)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalString.Pinnable __value = new(value);
            fixed(void* ___value = __value)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[11](ThisPtr, MarshalString.GetAbi(ref __value)));
                global::System.GC.KeepAlive(_obj);
            }
        }

        internal static unsafe string get_DefaultFileExtension(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[13](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_DefaultFileExtension(IObjectReference _obj, string value)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalString.Pinnable __value = new(value);
            fixed(void* ___value = __value)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[14](ThisPtr, MarshalString.GetAbi(ref __value)));
                global::System.GC.KeepAlive(_obj);
            }
        }

        internal static unsafe global::System.Collections.Generic.IDictionary<string, global::System.Collections.Generic.IList<string>> get_FileTypeChoices(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[12](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IMap_2_String__Windows_Foundation_Collections_IVector_1_String_.EnsureInitialized();
                return MarshalInterface<global::System.Collections.Generic.IDictionary<string, global::System.Collections.Generic.IList<string>>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Collections.Generic.IDictionary<string, global::System.Collections.Generic.IList<string>>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe string get_SettingsIdentifier(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_SettingsIdentifier(IObjectReference _obj, string value)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalString.Pinnable __value = new(value);
            fixed(void* ___value = __value)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[7](ThisPtr, MarshalString.GetAbi(ref __value)));
                global::System.GC.KeepAlive(_obj);
            }
        }

        internal static unsafe string get_SuggestedFileName(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[17](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_SuggestedFileName(IObjectReference _obj, string value)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalString.Pinnable __value = new(value);
            fixed(void* ___value = __value)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[18](ThisPtr, MarshalString.GetAbi(ref __value)));
                global::System.GC.KeepAlive(_obj);
            }
        }

        internal static unsafe global::Windows.Storage.StorageFile get_SuggestedSaveFile(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[15](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Windows.Storage.StorageFile.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Windows.Storage.StorageFile.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_SuggestedSaveFile(IObjectReference _obj, global::Windows.Storage.StorageFile value)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            try
            {
                __value = global::ABI.Windows.Storage.StorageFile.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[16](ThisPtr, MarshalInspectable<object>.GetAbi(__value)));
                global::System.GC.KeepAlive(_obj);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }

        internal static unsafe global::Microsoft.Windows.Storage.Pickers.PickerLocationId get_SuggestedStartLocation(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.Windows.Storage.Pickers.PickerLocationId __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Windows.Storage.Pickers.PickerLocationId*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_SuggestedStartLocation(IObjectReference _obj, global::Microsoft.Windows.Storage.Pickers.PickerLocationId value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Windows.Storage.Pickers.PickerLocationId, int>**)ThisPtr)[9](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xD3, 0xD3, 0xE6, 0xC1, 0x80, 0x8, 0xAE, 0x50, 0xBD, 0xCC, 0x20, 0xB8, 0xAE, 0x6A, 0x7A, 0xF6 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("C1E6D3D3-0880-50AE-BDCC-20B8AE6A7AF6")]
    internal interface IFileSavePicker : global::Microsoft.Windows.Storage.Pickers.IFileSavePicker
    {
    }
    internal static class IFileSavePickerFactoryMethods
    {


        internal static unsafe global::Microsoft.Windows.Storage.Pickers.FileSavePicker CreateInstance(IObjectReference _obj, global::Microsoft.UI.WindowId windowId)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.WindowId, IntPtr*, int>**)ThisPtr)[6](ThisPtr, windowId, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.Windows.Storage.Pickers.FileSavePicker.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.Windows.Storage.Pickers.FileSavePicker.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x96, 0x66, 0x25, 0x2E, 0xB6, 0x30, 0x5, 0x5A, 0xA8, 0xF5, 0xC7, 0x52, 0xDB, 0x6D, 0xD2, 0x68 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("2E256696-30B6-5A05-A8F5-C752DB6DD268")]
    internal interface IFileSavePickerFactory : global::Microsoft.Windows.Storage.Pickers.IFileSavePickerFactory
    {
    }
    internal static class IFolderPickerMethods
    {


        internal static unsafe global::Windows.Foundation.IAsyncOperation<global::Microsoft.Windows.Storage.Pickers.PickFolderResult> PickSingleFolderAsync(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[15](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperation_1_Microsoft_Windows_Storage_Pickers_PickFolderResult.EnsureInitialized();
                return MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Microsoft.Windows.Storage.Pickers.PickFolderResult>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Microsoft.Windows.Storage.Pickers.PickFolderResult>>.DisposeAbi(__retval);
            }
        }
        internal static unsafe string get_CommitButtonText(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[12](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_CommitButtonText(IObjectReference _obj, string value)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalString.Pinnable __value = new(value);
            fixed(void* ___value = __value)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[13](ThisPtr, MarshalString.GetAbi(ref __value)));
                global::System.GC.KeepAlive(_obj);
            }
        }

        internal static unsafe global::System.Collections.Generic.IList<string> get_FileTypeFilter(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[14](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                _ = global::WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IVector_1_String.EnsureInitialized();
                return MarshalInterface<global::System.Collections.Generic.IList<string>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Collections.Generic.IList<string>>.DisposeAbi(__retval);
            }
        }

        internal static unsafe string get_SettingsIdentifier(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }
        internal static unsafe void set_SettingsIdentifier(IObjectReference _obj, string value)
        {
            var ThisPtr = _obj.ThisPtr;

            MarshalString.Pinnable __value = new(value);
            fixed(void* ___value = __value)
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[9](ThisPtr, MarshalString.GetAbi(ref __value)));
                global::System.GC.KeepAlive(_obj);
            }
        }

        internal static unsafe global::Microsoft.Windows.Storage.Pickers.PickerLocationId get_SuggestedStartLocation(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.Windows.Storage.Pickers.PickerLocationId __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Windows.Storage.Pickers.PickerLocationId*, int>**)ThisPtr)[10](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_SuggestedStartLocation(IObjectReference _obj, global::Microsoft.Windows.Storage.Pickers.PickerLocationId value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Windows.Storage.Pickers.PickerLocationId, int>**)ThisPtr)[11](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }

        internal static unsafe global::Microsoft.Windows.Storage.Pickers.PickerViewMode get_ViewMode(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::Microsoft.Windows.Storage.Pickers.PickerViewMode __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Windows.Storage.Pickers.PickerViewMode*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }
        internal static unsafe void set_ViewMode(IObjectReference _obj, global::Microsoft.Windows.Storage.Pickers.PickerViewMode value)
        {
            var ThisPtr = _obj.ThisPtr;

            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.Windows.Storage.Pickers.PickerViewMode, int>**)ThisPtr)[7](ThisPtr, value));
            global::System.GC.KeepAlive(_obj);
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x98, 0xBB, 0xC5, 0x1, 0xB8, 0xCF, 0xF5, 0x52, 0x99, 0x94, 0xE9, 0x4E, 0xF1, 0xA7, 0x34, 0xD8 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("01C5BB98-CFB8-52F5-9994-E94EF1A734D8")]
    internal interface IFolderPicker : global::Microsoft.Windows.Storage.Pickers.IFolderPicker
    {
    }
    internal static class IFolderPickerFactoryMethods
    {


        internal static unsafe global::Microsoft.Windows.Storage.Pickers.FolderPicker CreateInstance(IObjectReference _obj, global::Microsoft.UI.WindowId windowId)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Microsoft.UI.WindowId, IntPtr*, int>**)ThisPtr)[6](ThisPtr, windowId, &__retval));
                global::System.GC.KeepAlive(_obj);
                return global::ABI.Microsoft.Windows.Storage.Pickers.FolderPicker.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Microsoft.Windows.Storage.Pickers.FolderPicker.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x89, 0xD, 0x55, 0xE1, 0x89, 0xB3, 0x86, 0x58, 0x83, 0x95, 0x2, 0x2B, 0x15, 0x88, 0xD6, 0xA8 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("E1550D89-B389-5886-8395-022B1588D6A8")]
    internal interface IFolderPickerFactory : global::Microsoft.Windows.Storage.Pickers.IFolderPickerFactory
    {
    }
    internal static class IPickFileResultMethods
    {

        internal static unsafe string get_Path(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xD6, 0xE3, 0xF2, 0xE6, 0xB0, 0x7B, 0x81, 0x5D, 0x9E, 0x7D, 0x6F, 0xD3, 0x5A, 0x1F, 0x25, 0xAB };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("E6F2E3D6-7BB0-5D81-9E7D-6FD35A1F25AB")]
    internal interface IPickFileResult : global::Microsoft.Windows.Storage.Pickers.IPickFileResult
    {
    }
    internal static class IPickFolderResultMethods
    {

        internal static unsafe string get_Path(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x16, 0xD3, 0x7F, 0x6F, 0x29, 0xFE, 0xD1, 0x59, 0x93, 0x43, 0xC4, 0x9C, 0xF5, 0xCD, 0xE6, 0x80 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("6F7FD316-FE29-59D1-9343-C49CF5CDE680")]
    internal interface IPickFolderResult : global::Microsoft.Windows.Storage.Pickers.IPickFolderResult
    {
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct PickFileResult
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.Windows.Storage.Pickers.PickFileResult obj) => obj is null ? null : MarshalInspectable<global::Microsoft.Windows.Storage.Pickers.PickFileResult>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.Windows.Storage.Pickers.IPickFileResultMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.Windows.Storage.Pickers.PickFileResult obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.Windows.Storage.Pickers.IPickFileResultMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.Windows.Storage.Pickers.PickFileResult FromAbi(IntPtr thisPtr) => global::Microsoft.Windows.Storage.Pickers.PickFileResult.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.Windows.Storage.Pickers.PickFileResult obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.Windows.Storage.Pickers.PickFileResult>.MarshalerArray CreateMarshalerArray(global::Microsoft.Windows.Storage.Pickers.PickFileResult[] array) => MarshalInterfaceHelper<global::Microsoft.Windows.Storage.Pickers.PickFileResult>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Windows.Storage.Pickers.PickFileResult>.GetAbiArray(box);
        public static unsafe global::Microsoft.Windows.Storage.Pickers.PickFileResult[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Windows.Storage.Pickers.PickFileResult>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.Windows.Storage.Pickers.PickFileResult[] array, object box) => MarshalInterfaceHelper<global::Microsoft.Windows.Storage.Pickers.PickFileResult>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.Windows.Storage.Pickers.PickFileResult[] array) => MarshalInterfaceHelper<global::Microsoft.Windows.Storage.Pickers.PickFileResult>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.Windows.Storage.Pickers.PickFileResult>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.Windows.Storage.Pickers.PickFileResult>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class PickFileResultRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.Windows.Storage.Pickers.PickFileResult(inspectable.ObjRef);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct PickFolderResult
    {

        public static IObjectReference CreateMarshaler(global::Microsoft.Windows.Storage.Pickers.PickFolderResult obj) => obj is null ? null : MarshalInspectable<global::Microsoft.Windows.Storage.Pickers.PickFolderResult>.CreateMarshaler<IUnknownVftbl>(obj, global::ABI.Microsoft.Windows.Storage.Pickers.IPickFolderResultMethods.IID);
        public static ObjectReferenceValue CreateMarshaler2(global::Microsoft.Windows.Storage.Pickers.PickFolderResult obj) => MarshalInspectable<object>.CreateMarshaler2(obj, global::ABI.Microsoft.Windows.Storage.Pickers.IPickFolderResultMethods.IID);
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Microsoft.Windows.Storage.Pickers.PickFolderResult FromAbi(IntPtr thisPtr) => global::Microsoft.Windows.Storage.Pickers.PickFolderResult.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Microsoft.Windows.Storage.Pickers.PickFolderResult obj) => obj is null ? IntPtr.Zero : CreateMarshaler2(obj).Detach();
        public static unsafe MarshalInterfaceHelper<global::Microsoft.Windows.Storage.Pickers.PickFolderResult>.MarshalerArray CreateMarshalerArray(global::Microsoft.Windows.Storage.Pickers.PickFolderResult[] array) => MarshalInterfaceHelper<global::Microsoft.Windows.Storage.Pickers.PickFolderResult>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Windows.Storage.Pickers.PickFolderResult>.GetAbiArray(box);
        public static unsafe global::Microsoft.Windows.Storage.Pickers.PickFolderResult[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.Windows.Storage.Pickers.PickFolderResult>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.Windows.Storage.Pickers.PickFolderResult[] array, object box) => MarshalInterfaceHelper<global::Microsoft.Windows.Storage.Pickers.PickFolderResult>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.Windows.Storage.Pickers.PickFolderResult[] array) => MarshalInterfaceHelper<global::Microsoft.Windows.Storage.Pickers.PickFolderResult>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.Windows.Storage.Pickers.PickFolderResult>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.Windows.Storage.Pickers.PickFolderResult>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal sealed class PickFolderResultRcwFactoryAttribute : global::WinRT.WinRTImplementationTypeRcwFactoryAttribute
    {
        public override object CreateInstance(global::WinRT.IInspectable inspectable)
            => new global::Microsoft.Windows.Storage.Pickers.PickFolderResult(inspectable.ObjRef);
    }
}
#pragma warning restore CA1416
