//------------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by cswinrt.exe version 2.2.0.241111.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq.Expressions;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using WinRT;
using WinRT.Interop;


#pragma warning disable 0169 // warning CS0169: The field '...' is never used
#pragma warning disable 0649 // warning CS0169: Field '...' is never assigned to
#pragma warning disable CA2207, CA1063, CA1033, CA1001, CA2213

namespace Microsoft.UI.Xaml.Interop
{
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Interop.BindableVectorChangedEventHandler))][global::WinRT.WinRTExposedType(typeof(global::ABI.Microsoft.UI.Xaml.Interop.BindableVectorChangedEventHandlerWinRTTypeDetails))][global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public delegate void BindableVectorChangedEventHandler(IBindableObservableVector vector, object e);
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("6A1D6C07-076D-49F2-8314-F52C9C9A8331")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Interop.IBindableIterator))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public interface IBindableIterator
    {
        bool MoveNext();
        object Current { get; }
        bool HasCurrent { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("FE1EB536-7E7F-4F90-AC9A-474984AAE512")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Interop.IBindableObservableVector))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public interface IBindableObservableVector : global::System.Collections.IList, global::System.Collections.IEnumerable
    {
        event BindableVectorChangedEventHandler VectorChanged;
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("346DD6E7-976E-4BC3-815D-ECE243BC0F33")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Interop.IBindableVectorView))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    public interface IBindableVectorView : global::System.Collections.IEnumerable
    {
        object GetAt(uint index);
        bool IndexOf(object value, out uint index);
        uint Size { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("DA049FF2-D2E0-5FE8-8C7B-F87F26060B6F")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Interop.INotifyCollectionChangedEventArgs))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface INotifyCollectionChangedEventArgs
    {
        global::System.Collections.Specialized.NotifyCollectionChangedAction Action { get; }
        global::System.Collections.IList NewItems { get; }
        int NewStartingIndex { get; }
        global::System.Collections.IList OldItems { get; }
        int OldStartingIndex { get; }
    }
    [global::WinRT.WindowsRuntimeType("Microsoft.UI.Xaml")][Guid("5108EBA4-4892-5A20-8374-A96815E0FD27")][global::WinRT.WindowsRuntimeHelperType(typeof(global::ABI.Microsoft.UI.Xaml.Interop.INotifyCollectionChangedEventArgsFactory))]
    [global::Windows.Foundation.Metadata.ContractVersion(typeof(global::Microsoft.UI.Xaml.WinUIContract), 65536u)]
    internal interface INotifyCollectionChangedEventArgsFactory
    {
        global::System.Collections.Specialized.NotifyCollectionChangedEventArgs CreateInstanceWithAllParameters(global::System.Collections.Specialized.NotifyCollectionChangedAction action, global::System.Collections.IList newItems, global::System.Collections.IList oldItems, int newIndex, int oldIndex, object baseInterface, out object innerInterface);
    }
}

#pragma warning disable CA1416
namespace ABI.Microsoft.UI.Xaml.Interop
{
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    [Guid("624CD4E1-D007-43B1-9C03-AF4D3E6258C4")]
    public static class BindableVectorChangedEventHandler
    {
        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xE1, 0xD4, 0x4C, 0x62, 0x7, 0xD0, 0xB1, 0x43, 0x9C, 0x3, 0xAF, 0x4D, 0x3E, 0x62, 0x58, 0xC4 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }



        public static readonly IntPtr AbiToProjectionVftablePtr;

        static unsafe BindableVectorChangedEventHandler()
        {

            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(BindableVectorChangedEventHandler), sizeof(IntPtr) * 4);
            *(global::WinRT.Interop.IUnknownVftbl*)AbiToProjectionVftablePtr = global::WinRT.Interop.IUnknownVftbl.AbiToProjectionVftbl;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, int>*)AbiToProjectionVftablePtr)[3] = &Do_Abi_Invoke;
            global::WinRT.ComWrappersSupport.RegisterDelegateFactory(typeof(global::Microsoft.UI.Xaml.Interop.BindableVectorChangedEventHandler), CreateRcw);
        }

        public static unsafe IObjectReference CreateMarshaler(global::Microsoft.UI.Xaml.Interop.BindableVectorChangedEventHandler managedDelegate) => 
        managedDelegate is null ? null : MarshalDelegate.CreateMarshaler(managedDelegate, IID);

        public static unsafe ObjectReferenceValue CreateMarshaler2(global::Microsoft.UI.Xaml.Interop.BindableVectorChangedEventHandler managedDelegate) => 
        MarshalDelegate.CreateMarshaler2(managedDelegate, IID);

        public static IntPtr GetAbi(IObjectReference value) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Interop.BindableVectorChangedEventHandler>.GetAbi(value);

        public static unsafe global::Microsoft.UI.Xaml.Interop.BindableVectorChangedEventHandler FromAbi(IntPtr nativeDelegate)
        {
            return MarshalDelegate.FromAbi<global::Microsoft.UI.Xaml.Interop.BindableVectorChangedEventHandler>(nativeDelegate);
        }

        public static global::Microsoft.UI.Xaml.Interop.BindableVectorChangedEventHandler CreateRcw(IntPtr ptr)
        {
            return new global::Microsoft.UI.Xaml.Interop.BindableVectorChangedEventHandler(new NativeDelegateWrapper(ComWrappersSupport.GetObjectReferenceForInterface<IUnknownVftbl>(ptr, IID)).Invoke);
        }

        #if !NET
        [global::WinRT.ObjectReferenceWrapper(nameof(_nativeDelegate))]
        private sealed class NativeDelegateWrapper
        #else
        private sealed class NativeDelegateWrapper : IWinRTObject
        #endif
        {
            private readonly ObjectReference<global::WinRT.Interop.IUnknownVftbl> _nativeDelegate;

            public NativeDelegateWrapper(ObjectReference<global::WinRT.Interop.IUnknownVftbl> nativeDelegate)
            {
                _nativeDelegate = nativeDelegate;
            }

            #if NET
            IObjectReference IWinRTObject.NativeObject => _nativeDelegate;
            bool IWinRTObject.HasUnwrappableNativeObject => true;
            private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> _queryInterfaceCache;
            private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache()
            {
                global::System.Threading.Interlocked.CompareExchange(ref _queryInterfaceCache, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference>(), null); 
                return _queryInterfaceCache;
            }
            global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache => _queryInterfaceCache ?? MakeQueryInterfaceCache();
            private volatile global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> _additionalTypeData;
            private global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> MakeAdditionalTypeData()
            {
                global::System.Threading.Interlocked.CompareExchange(ref _additionalTypeData, new global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object>(), null); 
                return _additionalTypeData;
            }
            global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData => _additionalTypeData ?? MakeAdditionalTypeData();
            #endif

            public unsafe void Invoke(global::Microsoft.UI.Xaml.Interop.IBindableObservableVector vector, object e)
            {{
                IntPtr ThisPtr = _nativeDelegate.ThisPtr;
                var abiInvoke = (delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, int>)(*(void***)_nativeDelegate.ThisPtr)[3];
                ObjectReferenceValue __vector = default;
                ObjectReferenceValue __e = default;
                try
                {
                    __vector = MarshalInterface<global::Microsoft.UI.Xaml.Interop.IBindableObservableVector>.CreateMarshaler2(vector, global::ABI.Microsoft.UI.Xaml.Interop.IBindableObservableVectorMethods.IID);
                    __e = MarshalInspectable<object>.CreateMarshaler2(e);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR(abiInvoke(ThisPtr, MarshalInspectable<object>.GetAbi(__vector), MarshalInspectable<object>.GetAbi(__e)));
                    global::System.GC.KeepAlive(_nativeDelegate);
                }
                finally
                {
                    MarshalInspectable<object>.DisposeMarshaler(__vector);
                    MarshalInspectable<object>.DisposeMarshaler(__e);
                }
            }
            }
        }

        public static IntPtr FromManaged(global::Microsoft.UI.Xaml.Interop.BindableVectorChangedEventHandler managedDelegate) => CreateMarshaler2(managedDelegate).Detach();

        public static void DisposeMarshaler(IObjectReference value) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Interop.BindableVectorChangedEventHandler>.DisposeMarshaler(value);

        public static void DisposeAbi(IntPtr abi) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Interop.BindableVectorChangedEventHandler>.DisposeAbi(abi);

        public static unsafe MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Interop.BindableVectorChangedEventHandler>.MarshalerArray CreateMarshalerArray(global::Microsoft.UI.Xaml.Interop.BindableVectorChangedEventHandler[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Interop.BindableVectorChangedEventHandler>.CreateMarshalerArray2(array, (o) => CreateMarshaler2(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Interop.BindableVectorChangedEventHandler>.GetAbiArray(box);
        public static unsafe global::Microsoft.UI.Xaml.Interop.BindableVectorChangedEventHandler[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Interop.BindableVectorChangedEventHandler>.FromAbiArray(box, FromAbi);
        public static void CopyAbiArray(global::Microsoft.UI.Xaml.Interop.BindableVectorChangedEventHandler[] array, object box) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Interop.BindableVectorChangedEventHandler>.CopyAbiArray(array, box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Microsoft.UI.Xaml.Interop.BindableVectorChangedEventHandler[] array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Interop.BindableVectorChangedEventHandler>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Interop.BindableVectorChangedEventHandler>.MarshalerArray array) => MarshalInterfaceHelper<global::Microsoft.UI.Xaml.Interop.BindableVectorChangedEventHandler>.DisposeMarshalerArray(array);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);


        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_Invoke(IntPtr thisPtr, IntPtr vector, IntPtr e)
        {



            try
            {

                global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Interop.BindableVectorChangedEventHandler>(thisPtr).Invoke(MarshalInterface<global::Microsoft.UI.Xaml.Interop.IBindableObservableVector>.FromAbi(vector), MarshalInspectable<object>.FromAbi(e))
                ;

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
    }


    internal sealed class BindableVectorChangedEventHandlerWinRTTypeDetails : global::WinRT.DelegateTypeDetails<global::Microsoft.UI.Xaml.Interop.BindableVectorChangedEventHandler>
    {
        public override ComWrappers.ComInterfaceEntry GetDelegateInterface()
        {
            return new global::System.Runtime.InteropServices.ComWrappers.ComInterfaceEntry
            {
                IID = BindableVectorChangedEventHandler.IID,
                Vtable = BindableVectorChangedEventHandler.AbiToProjectionVftablePtr
            };
        }
    }
    public static class IBindableIteratorMethods
    {


        public static unsafe bool MoveNext(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[8](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }
        public static unsafe object get_Current(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[6](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInspectable<object>.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeAbi(__retval);
            }
        }

        public static unsafe bool get_HasCurrent(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            byte __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte*, int>**)ThisPtr)[7](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval != 0;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x7, 0x6C, 0x1D, 0x6A, 0x6D, 0x7, 0xF2, 0x49, 0x83, 0x14, 0xF5, 0x2C, 0x9C, 0x9A, 0x83, 0x31 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

        public static global::System.IntPtr AbiToProjectionVftablePtr => IBindableIterator.AbiToProjectionVftablePtr;

    }
    [DynamicInterfaceCastableImplementation]
    [Guid("6A1D6C07-076D-49F2-8314-F52C9C9A8331")]
    internal unsafe interface IBindableIterator : global::Microsoft.UI.Xaml.Interop.IBindableIterator
    {

        public static readonly IntPtr AbiToProjectionVftablePtr;
        static unsafe IBindableIterator()
        {
            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(IBindableIterator), sizeof(IInspectable.Vftbl) + sizeof(IntPtr) * 3);
            *(IInspectable.Vftbl*)AbiToProjectionVftablePtr = IInspectable.Vftbl.AbiToProjectionVftable;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>*)AbiToProjectionVftablePtr)[6] = &Do_Abi_get_Current_0;
            ((delegate* unmanaged[Stdcall]<IntPtr, byte*, int>*)AbiToProjectionVftablePtr)[7] = &Do_Abi_get_HasCurrent_1;
            ((delegate* unmanaged[Stdcall]<IntPtr, byte*, int>*)AbiToProjectionVftablePtr)[8] = &Do_Abi_MoveNext_2;
        }

        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_MoveNext_2(IntPtr thisPtr, byte* result)
        {

            bool __result = default;

            *result = default;

            try
            {
                __result = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Interop.IBindableIterator>(thisPtr).MoveNext();
                *result = (byte)(__result ? 1 : 0);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_Current_0(IntPtr thisPtr, IntPtr* value)
        {

            object __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Interop.IBindableIterator>(thisPtr).Current;
                *value = MarshalInspectable<object>.FromManaged(__value);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_HasCurrent_1(IntPtr thisPtr, byte* value)
        {

            bool __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Interop.IBindableIterator>(thisPtr).HasCurrent;
                *value = (byte)(__value ? 1 : 0);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }

        unsafe bool global::Microsoft.UI.Xaml.Interop.IBindableIterator.MoveNext()
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Xaml.Interop.IBindableIterator).TypeHandle));
            return global::ABI.Microsoft.UI.Xaml.Interop.IBindableIteratorMethods.MoveNext(_obj);
        }

        unsafe object global::Microsoft.UI.Xaml.Interop.IBindableIterator.Current
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Xaml.Interop.IBindableIterator).TypeHandle));
                return global::ABI.Microsoft.UI.Xaml.Interop.IBindableIteratorMethods.get_Current(_obj);
            }
        }

        unsafe bool global::Microsoft.UI.Xaml.Interop.IBindableIterator.HasCurrent
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Xaml.Interop.IBindableIterator).TypeHandle));
                return global::ABI.Microsoft.UI.Xaml.Interop.IBindableIteratorMethods.get_HasCurrent(_obj);
            }
        }
    }

    public static class IBindableObservableVectorMethods
    {


        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.Interop.BindableVectorChangedEventHandler>> _VectorChanged_;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.Interop.BindableVectorChangedEventHandler>> MakeVectorChangedTable()
        {
            
            global::System.Threading.Interlocked.CompareExchange(ref _VectorChanged_, new(), null);
            return _VectorChanged_;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<object, global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.Interop.BindableVectorChangedEventHandler>> _VectorChanged => _VectorChanged_ ?? MakeVectorChangedTable();

        public static unsafe (Action<global::Microsoft.UI.Xaml.Interop.BindableVectorChangedEventHandler>, Action<global::Microsoft.UI.Xaml.Interop.BindableVectorChangedEventHandler>) Get_VectorChanged(IObjectReference _obj, object _thisObj)
        {
            var eventSource = Get_VectorChanged2(_obj, _thisObj);
            return (eventSource.Subscribe, eventSource.Unsubscribe);
        }

        public static unsafe global::ABI.WinRT.Interop.EventSource<global::Microsoft.UI.Xaml.Interop.BindableVectorChangedEventHandler> Get_VectorChanged2(IObjectReference _obj, object _thisObj)
        {
            return _VectorChanged.GetValue(_thisObj, (key) =>
            {

                var ThisPtr = _obj.ThisPtr;

                return 
                new _EventSource_global__Microsoft_UI_Xaml_Interop_BindableVectorChangedEventHandler(_obj,
                (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>**)ThisPtr)[6],
                (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[7],
                0);
            });
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0x36, 0xB5, 0x1E, 0xFE, 0x7F, 0x7E, 0x90, 0x4F, 0xAC, 0x9A, 0x47, 0x49, 0x84, 0xAA, 0xE5, 0x12 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

        public static global::System.IntPtr AbiToProjectionVftablePtr => IBindableObservableVector.AbiToProjectionVftablePtr;

    }
    [DynamicInterfaceCastableImplementation]
    [Guid("FE1EB536-7E7F-4F90-AC9A-474984AAE512")]
    internal unsafe interface IBindableObservableVector : global::Microsoft.UI.Xaml.Interop.IBindableObservableVector
    {

        public static readonly IntPtr AbiToProjectionVftablePtr;
        static unsafe IBindableObservableVector()
        {
            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(IBindableObservableVector), sizeof(IInspectable.Vftbl) + sizeof(IntPtr) * 2);
            *(IInspectable.Vftbl*)AbiToProjectionVftablePtr = IInspectable.Vftbl.AbiToProjectionVftable;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>*)AbiToProjectionVftablePtr)[6] = &Do_Abi_add_VectorChanged_0;
            ((delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>*)AbiToProjectionVftablePtr)[7] = &Do_Abi_remove_VectorChanged_1;
        }

        private volatile static global::System.Runtime.CompilerServices.ConditionalWeakTable<global::Microsoft.UI.Xaml.Interop.IBindableObservableVector, global::WinRT.EventRegistrationTokenTable<global::Microsoft.UI.Xaml.Interop.BindableVectorChangedEventHandler>> _VectorChanged_tokenTables;
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<global::Microsoft.UI.Xaml.Interop.IBindableObservableVector, global::WinRT.EventRegistrationTokenTable<global::Microsoft.UI.Xaml.Interop.BindableVectorChangedEventHandler>> MakeVectorChangedTable()
        {
            global::System.Threading.Interlocked.CompareExchange(ref _VectorChanged_tokenTables, new(), null);
            return _VectorChanged_tokenTables;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<global::Microsoft.UI.Xaml.Interop.IBindableObservableVector, global::WinRT.EventRegistrationTokenTable<global::Microsoft.UI.Xaml.Interop.BindableVectorChangedEventHandler>> _VectorChanged_TokenTables => _VectorChanged_tokenTables ?? MakeVectorChangedTable();

        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_add_VectorChanged_0(IntPtr thisPtr, IntPtr handler, global::WinRT.EventRegistrationToken* token)
        {

            *token = default;
            try
            {
                var __this = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Interop.IBindableObservableVector>(thisPtr);
                var __handler = BindableVectorChangedEventHandler.FromAbi(handler);
                *token = _VectorChanged_TokenTables.GetOrCreateValue(__this).AddEventHandler(__handler);
                __this.VectorChanged += __handler;
                return 0;
            }
            catch (Exception __ex)
            {
                return __ex.HResult;
            }
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_remove_VectorChanged_1(IntPtr thisPtr, global::WinRT.EventRegistrationToken token)
        {
            try
            {
                var __this = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Interop.IBindableObservableVector>(thisPtr);
                if(__this != null && _VectorChanged_TokenTables.TryGetValue(__this, out var __table) && __table.RemoveEventHandler(token, out var __handler))
                {
                    __this.VectorChanged -= __handler;
                }
                return 0;
            }
            catch (Exception __ex)
            {
                return __ex.HResult;
            }
        }

        event global::Microsoft.UI.Xaml.Interop.BindableVectorChangedEventHandler global::Microsoft.UI.Xaml.Interop.IBindableObservableVector.VectorChanged
        {
            add 
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Xaml.Interop.IBindableObservableVector).TypeHandle));
                global::ABI.Microsoft.UI.Xaml.Interop.IBindableObservableVectorMethods.Get_VectorChanged2(_obj, (IWinRTObject)this).Subscribe(value);
            }
            remove
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Xaml.Interop.IBindableObservableVector).TypeHandle));
                global::ABI.Microsoft.UI.Xaml.Interop.IBindableObservableVectorMethods.Get_VectorChanged2(_obj, (IWinRTObject)this).Unsubscribe(value);
            }
        }

        int global::System.Collections.ICollection.Count => ((global::System.Collections.IList)(IWinRTObject)this).Count;
        bool global::System.Collections.ICollection.IsSynchronized => ((global::System.Collections.IList)(IWinRTObject)this).IsSynchronized;
        object global::System.Collections.ICollection.SyncRoot => ((global::System.Collections.IList)(IWinRTObject)this).SyncRoot;
        void global::System.Collections.ICollection.CopyTo(Array array, int index) => ((global::System.Collections.IList)(IWinRTObject)this).CopyTo(array, index);

        object global::System.Collections.IList.this[int index]
        {
            get => ((global::System.Collections.IList)(IWinRTObject)this)[index];
            set => ((global::System.Collections.IList)(IWinRTObject)this)[index] = value;
        }
        bool global::System.Collections.IList.IsFixedSize => ((global::System.Collections.IList)(IWinRTObject)this).IsFixedSize;
        bool global::System.Collections.IList.IsReadOnly => ((global::System.Collections.IList)(IWinRTObject)this).IsReadOnly;
        int global::System.Collections.IList.Add(object value) => ((global::System.Collections.IList)(IWinRTObject)this).Add(value);
        void global::System.Collections.IList.Clear() => ((global::System.Collections.IList)(IWinRTObject)this).Clear();
        bool global::System.Collections.IList.Contains(object value) => ((global::System.Collections.IList)(IWinRTObject)this).Contains(value);
        int global::System.Collections.IList.IndexOf(object value) => ((global::System.Collections.IList)(IWinRTObject)this).IndexOf(value);
        void global::System.Collections.IList.Insert(int index, object value) => ((global::System.Collections.IList)(IWinRTObject)this).Insert(index, value);
        void global::System.Collections.IList.Remove(object value) => ((global::System.Collections.IList)(IWinRTObject)this).Remove(value);
        void global::System.Collections.IList.RemoveAt(int index) => ((global::System.Collections.IList)(IWinRTObject)this).RemoveAt(index);

        IEnumerator IEnumerable.GetEnumerator() => ((global::System.Collections.IList)(IWinRTObject)this).GetEnumerator();
    }

    public static class IBindableVectorViewMethods
    {


        public static unsafe object GetAt(IObjectReference _obj, uint index)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, uint, IntPtr*, int>**)ThisPtr)[6](ThisPtr, index, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInspectable<object>.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeAbi(__retval);
            }
        }

        public static unsafe bool IndexOf(IObjectReference _obj, object value, out uint index)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __value = default;
            uint __index = default;
            byte __retval = default;
            try
            {
                __value = MarshalInspectable<object>.CreateMarshaler2(value);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, uint*, byte*, int>**)ThisPtr)[8](ThisPtr, MarshalInspectable<object>.GetAbi(__value), &__index, &__retval));
                global::System.GC.KeepAlive(_obj);
                index = __index;
                return __retval != 0;
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__value);
            }
        }
        public static unsafe uint get_Size(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            uint __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, uint*, int>**)ThisPtr)[7](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xE7, 0xD6, 0x6D, 0x34, 0x6E, 0x97, 0xC3, 0x4B, 0x81, 0x5D, 0xEC, 0xE2, 0x43, 0xBC, 0xF, 0x33 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

        public static global::System.IntPtr AbiToProjectionVftablePtr => IBindableVectorView.AbiToProjectionVftablePtr;

    }
    [DynamicInterfaceCastableImplementation]
    [Guid("346DD6E7-976E-4BC3-815D-ECE243BC0F33")]
    internal unsafe interface IBindableVectorView : global::Microsoft.UI.Xaml.Interop.IBindableVectorView
    {

        public static readonly IntPtr AbiToProjectionVftablePtr;
        static unsafe IBindableVectorView()
        {
            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(IBindableVectorView), sizeof(IInspectable.Vftbl) + sizeof(IntPtr) * 3);
            *(IInspectable.Vftbl*)AbiToProjectionVftablePtr = IInspectable.Vftbl.AbiToProjectionVftable;
            ((delegate* unmanaged[Stdcall]<IntPtr, uint, IntPtr*, int>*)AbiToProjectionVftablePtr)[6] = &Do_Abi_GetAt_0;
            ((delegate* unmanaged[Stdcall]<IntPtr, uint*, int>*)AbiToProjectionVftablePtr)[7] = &Do_Abi_get_Size_1;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, uint*, byte*, int>*)AbiToProjectionVftablePtr)[8] = &Do_Abi_IndexOf_2;
        }

        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_GetAt_0(IntPtr thisPtr, uint index, IntPtr* result)
        {

            object __result = default;

            *result = default;

            try
            {
                __result = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Interop.IBindableVectorView>(thisPtr).GetAt(index);
                *result = MarshalInspectable<object>.FromManaged(__result);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_IndexOf_2(IntPtr thisPtr, IntPtr value, uint* index, byte* returnValue)
        {

            bool __returnValue = default;

            *index = default;
            *returnValue = default;
            uint __index = default;

            try
            {
                __returnValue = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Interop.IBindableVectorView>(thisPtr).IndexOf(MarshalInspectable<object>.FromAbi(value), out __index);
                *index = __index;
                *returnValue = (byte)(__returnValue ? 1 : 0);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_Size_1(IntPtr thisPtr, uint* value)
        {

            uint __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Microsoft.UI.Xaml.Interop.IBindableVectorView>(thisPtr).Size;
                *value = __value;

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }

        unsafe object global::Microsoft.UI.Xaml.Interop.IBindableVectorView.GetAt(uint index)
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Xaml.Interop.IBindableVectorView).TypeHandle));
            return global::ABI.Microsoft.UI.Xaml.Interop.IBindableVectorViewMethods.GetAt(_obj, index);
        }

        unsafe bool global::Microsoft.UI.Xaml.Interop.IBindableVectorView.IndexOf(object value, out uint index)
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Xaml.Interop.IBindableVectorView).TypeHandle));
            return global::ABI.Microsoft.UI.Xaml.Interop.IBindableVectorViewMethods.IndexOf(_obj, value, out index);
        }

        unsafe uint global::Microsoft.UI.Xaml.Interop.IBindableVectorView.Size
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Microsoft.UI.Xaml.Interop.IBindableVectorView).TypeHandle));
                return global::ABI.Microsoft.UI.Xaml.Interop.IBindableVectorViewMethods.get_Size(_obj);
            }
        }

        IEnumerator IEnumerable.GetEnumerator() => ((global::System.Collections.IEnumerable)(IWinRTObject)this).GetEnumerator();
    }

    internal static class INotifyCollectionChangedEventArgsMethods
    {

        internal static unsafe global::System.Collections.Specialized.NotifyCollectionChangedAction get_Action(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            global::System.Collections.Specialized.NotifyCollectionChangedAction __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::System.Collections.Specialized.NotifyCollectionChangedAction*, int>**)ThisPtr)[6](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::System.Collections.IList get_NewItems(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[7](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInterface<global::System.Collections.IList>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Collections.IList>.DisposeAbi(__retval);
            }
        }

        internal static unsafe int get_NewStartingIndex(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            int __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int*, int>**)ThisPtr)[9](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }

        internal static unsafe global::System.Collections.IList get_OldItems(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>**)ThisPtr)[8](ThisPtr, &__retval));
                global::System.GC.KeepAlive(_obj);
                return MarshalInterface<global::System.Collections.IList>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Collections.IList>.DisposeAbi(__retval);
            }
        }

        internal static unsafe int get_OldStartingIndex(IObjectReference _obj)
        {
            var ThisPtr = _obj.ThisPtr;

            int __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, int*, int>**)ThisPtr)[10](ThisPtr, &__retval));
            global::System.GC.KeepAlive(_obj);
            return __retval;
        }



        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xF2, 0x9F, 0x4, 0xDA, 0xE0, 0xD2, 0xE8, 0x5F, 0x8C, 0x7B, 0xF8, 0x7F, 0x26, 0x6, 0xB, 0x6F };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("DA049FF2-D2E0-5FE8-8C7B-F87F26060B6F")]
    internal interface INotifyCollectionChangedEventArgs : global::Microsoft.UI.Xaml.Interop.INotifyCollectionChangedEventArgs
    {
    }
    internal static class INotifyCollectionChangedEventArgsFactoryMethods
    {


        internal static unsafe global::System.Collections.Specialized.NotifyCollectionChangedEventArgs CreateInstanceWithAllParameters(IObjectReference _obj, global::System.Collections.Specialized.NotifyCollectionChangedAction action, global::System.Collections.IList newItems, global::System.Collections.IList oldItems, int newIndex, int oldIndex, object baseInterface, out object innerInterface)
        {
            var ThisPtr = _obj.ThisPtr;

            ObjectReferenceValue __newItems = default;
            ObjectReferenceValue __oldItems = default;
            ObjectReferenceValue __baseInterface = default;
            IntPtr __innerInterface = default;
            IntPtr __retval = default;
            try
            {
                __newItems = MarshalInterface<global::System.Collections.IList>.CreateMarshaler2(newItems, global::ABI.System.Collections.IListMethods.IID);
                __oldItems = MarshalInterface<global::System.Collections.IList>.CreateMarshaler2(oldItems, global::ABI.System.Collections.IListMethods.IID);
                __baseInterface = MarshalInspectable<object>.CreateMarshaler2(baseInterface);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::System.Collections.Specialized.NotifyCollectionChangedAction, IntPtr, IntPtr, int, int, IntPtr, IntPtr*, IntPtr*, int>**)ThisPtr)[6](ThisPtr, action, MarshalInspectable<object>.GetAbi(__newItems), MarshalInspectable<object>.GetAbi(__oldItems), newIndex, oldIndex, MarshalInspectable<object>.GetAbi(__baseInterface), &__innerInterface, &__retval));
                global::System.GC.KeepAlive(_obj);
                innerInterface = MarshalInspectable<object>.FromAbi(__innerInterface);
                return global::ABI.System.Collections.Specialized.NotifyCollectionChangedEventArgs.FromAbi(__retval);
            }
            finally
            {
                MarshalInspectable<object>.DisposeMarshaler(__newItems);
                MarshalInspectable<object>.DisposeMarshaler(__oldItems);
                MarshalInspectable<object>.DisposeMarshaler(__baseInterface);
                MarshalInspectable<object>.DisposeAbi(__innerInterface);
                global::ABI.System.Collections.Specialized.NotifyCollectionChangedEventArgs.DisposeAbi(__retval);
            }
        }


        public static ref readonly global::System.Guid IID
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                global::System.ReadOnlySpan<byte> data = new byte[] { 0xA4, 0xEB, 0x8, 0x51, 0x92, 0x48, 0x20, 0x5A, 0x83, 0x74, 0xA9, 0x68, 0x15, 0xE0, 0xFD, 0x27 };
                return ref global::System.Runtime.CompilerServices.Unsafe.As<byte, global::System.Guid>(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(data));
            }
        }

    }
    [Guid("5108EBA4-4892-5A20-8374-A96815E0FD27")]
    internal interface INotifyCollectionChangedEventArgsFactory : global::Microsoft.UI.Xaml.Interop.INotifyCollectionChangedEventArgsFactory
    {
    }
}
#pragma warning restore CA1416
